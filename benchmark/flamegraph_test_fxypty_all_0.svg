<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1686" onload="init(evt)" viewBox="0 0 1200 1686" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1686.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1669" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1669" > </text>
<g id="frames">
<g >
<title>[ssm-document-worker] (100,000,000 samples, 0.01%)</title><rect x="17.1" y="1237" width="0.2" height="15.0" fill="rgb(209,228,2)" rx="2" ry="2" />
<text  x="20.11" y="1247.5" ></text>
</g>
<g >
<title>[perf-2123.map] (252,750,000 samples, 0.04%)</title><rect x="11.6" y="1253" width="0.4" height="15.0" fill="rgb(205,157,39)" rx="2" ry="2" />
<text  x="14.58" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (81,000,000 samples, 0.01%)</title><rect x="13.6" y="277" width="0.1" height="15.0" fill="rgb(215,164,19)" rx="2" ry="2" />
<text  x="16.56" y="287.5" ></text>
</g>
<g >
<title>run_builtin (360,250,000 samples, 0.05%)</title><rect x="14.7" y="1573" width="0.7" height="15.0" fill="rgb(237,207,32)" rx="2" ry="2" />
<text  x="17.73" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (89,750,000 samples, 0.01%)</title><rect x="13.6" y="357" width="0.1" height="15.0" fill="rgb(220,120,4)" rx="2" ry="2" />
<text  x="16.56" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (131,250,000 samples, 0.02%)</title><rect x="13.5" y="725" width="0.3" height="15.0" fill="rgb(232,132,7)" rx="2" ry="2" />
<text  x="16.52" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (161,250,000 samples, 0.02%)</title><rect x="13.5" y="981" width="0.3" height="15.0" fill="rgb(229,221,4)" rx="2" ry="2" />
<text  x="16.51" y="991.5" ></text>
</g>
<g >
<title>ps (69,500,000 samples, 0.01%)</title><rect x="15.4" y="1621" width="0.1" height="15.0" fill="rgb(228,181,12)" rx="2" ry="2" />
<text  x="18.38" y="1631.5" ></text>
</g>
<g >
<title>node (2,403,250,000 samples, 0.36%)</title><rect x="10.5" y="1621" width="4.2" height="15.0" fill="rgb(210,126,33)" rx="2" ry="2" />
<text  x="13.51" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (201,000,000 samples, 0.03%)</title><rect x="13.5" y="1301" width="0.3" height="15.0" fill="rgb(248,92,33)" rx="2" ry="2" />
<text  x="16.48" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (98,750,000 samples, 0.01%)</title><rect x="13.6" y="437" width="0.1" height="15.0" fill="rgb(238,215,6)" rx="2" ry="2" />
<text  x="16.55" y="447.5" ></text>
</g>
<g >
<title>generic_write_end (74,500,000 samples, 0.01%)</title><rect x="15.2" y="1301" width="0.1" height="15.0" fill="rgb(218,121,40)" rx="2" ry="2" />
<text  x="18.19" y="1311.5" ></text>
</g>
<g >
<title>[perf-1052.map] (78,000,000 samples, 0.01%)</title><rect x="12.3" y="1205" width="0.1" height="15.0" fill="rgb(232,224,22)" rx="2" ry="2" />
<text  x="15.28" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (72,500,000 samples, 0.01%)</title><rect x="13.6" y="181" width="0.1" height="15.0" fill="rgb(223,197,11)" rx="2" ry="2" />
<text  x="16.57" y="191.5" ></text>
</g>
<g >
<title>Builtins_PromiseFulfillReactionJob (293,000,000 samples, 0.04%)</title><rect x="11.5" y="1285" width="0.5" height="15.0" fill="rgb(243,150,10)" rx="2" ry="2" />
<text  x="14.52" y="1295.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (133,750,000 samples, 0.02%)</title><rect x="12.3" y="1301" width="0.2" height="15.0" fill="rgb(215,194,11)" rx="2" ry="2" />
<text  x="15.26" y="1311.5" ></text>
</g>
<g >
<title>Builtins_JSRunMicrotasksEntry (293,250,000 samples, 0.04%)</title><rect x="11.5" y="1317" width="0.5" height="15.0" fill="rgb(228,205,52)" rx="2" ry="2" />
<text  x="14.52" y="1327.5" ></text>
</g>
<g >
<title>perf (360,250,000 samples, 0.05%)</title><rect x="14.7" y="1621" width="0.7" height="15.0" fill="rgb(231,183,45)" rx="2" ry="2" />
<text  x="17.73" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (85,500,000 samples, 0.01%)</title><rect x="13.6" y="325" width="0.1" height="15.0" fill="rgb(244,64,46)" rx="2" ry="2" />
<text  x="16.56" y="335.5" ></text>
</g>
<g >
<title>node::LibuvStreamWrap::ReadStart (258,000,000 samples, 0.04%)</title><rect x="12.2" y="1477" width="0.5" height="15.0" fill="rgb(241,159,8)" rx="2" ry="2" />
<text  x="15.24" y="1487.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (580,500,000 samples, 0.09%)</title><rect x="16.8" y="1493" width="1.1" height="15.0" fill="rgb(228,22,4)" rx="2" ry="2" />
<text  x="19.83" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (223,500,000 samples, 0.03%)</title><rect x="13.5" y="1429" width="0.4" height="15.0" fill="rgb(242,206,17)" rx="2" ry="2" />
<text  x="16.46" y="1439.5" ></text>
</g>
<g >
<title>do_user_addr_fault (69,000,000 samples, 0.01%)</title><rect x="18.0" y="1557" width="0.1" height="15.0" fill="rgb(227,3,42)" rx="2" ry="2" />
<text  x="20.96" y="1567.5" ></text>
</g>
<g >
<title>sshd (75,250,000 samples, 0.01%)</title><rect x="15.7" y="1621" width="0.1" height="15.0" fill="rgb(230,177,22)" rx="2" ry="2" />
<text  x="18.65" y="1631.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (274,250,000 samples, 0.04%)</title><rect x="14.9" y="1349" width="0.4" height="15.0" fill="rgb(251,166,2)" rx="2" ry="2" />
<text  x="17.87" y="1359.5" ></text>
</g>
<g >
<title>[perf-2123.map] (249,000,000 samples, 0.04%)</title><rect x="11.6" y="1205" width="0.4" height="15.0" fill="rgb(209,41,46)" rx="2" ry="2" />
<text  x="14.59" y="1215.5" ></text>
</g>
<g >
<title>[perf-1794.map] (63,250,000 samples, 0.01%)</title><rect x="13.0" y="1381" width="0.1" height="15.0" fill="rgb(210,210,13)" rx="2" ry="2" />
<text  x="15.97" y="1391.5" ></text>
</g>
<g >
<title>node::ThreadPoolWork::ScheduleWork (441,500,000 samples, 0.07%)</title><rect x="11.4" y="1477" width="0.7" height="15.0" fill="rgb(248,97,19)" rx="2" ry="2" />
<text  x="14.36" y="1487.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (1,108,750,000 samples, 0.16%)</title><rect x="16.0" y="1541" width="1.9" height="15.0" fill="rgb(233,114,1)" rx="2" ry="2" />
<text  x="18.99" y="1551.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (327,750,000 samples, 0.05%)</title><rect x="14.8" y="1525" width="0.6" height="15.0" fill="rgb(220,57,47)" rx="2" ry="2" />
<text  x="17.79" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (184,250,000 samples, 0.03%)</title><rect x="13.5" y="1173" width="0.3" height="15.0" fill="rgb(243,151,18)" rx="2" ry="2" />
<text  x="16.49" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (183,000,000 samples, 0.03%)</title><rect x="13.5" y="1141" width="0.3" height="15.0" fill="rgb(235,166,11)" rx="2" ry="2" />
<text  x="16.49" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (152,500,000 samples, 0.02%)</title><rect x="13.5" y="917" width="0.3" height="15.0" fill="rgb(208,127,26)" rx="2" ry="2" />
<text  x="16.52" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (166,500,000 samples, 0.02%)</title><rect x="13.5" y="997" width="0.3" height="15.0" fill="rgb(216,74,47)" rx="2" ry="2" />
<text  x="16.51" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (141,750,000 samples, 0.02%)</title><rect x="13.5" y="837" width="0.3" height="15.0" fill="rgb(243,204,39)" rx="2" ry="2" />
<text  x="16.52" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (136,500,000 samples, 0.02%)</title><rect x="13.5" y="757" width="0.3" height="15.0" fill="rgb(217,130,12)" rx="2" ry="2" />
<text  x="16.52" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (60,250,000 samples, 0.01%)</title><rect x="13.6" y="85" width="0.1" height="15.0" fill="rgb(208,97,13)" rx="2" ry="2" />
<text  x="16.58" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (136,750,000 samples, 0.02%)</title><rect x="13.5" y="773" width="0.3" height="15.0" fill="rgb(206,48,27)" rx="2" ry="2" />
<text  x="16.52" y="783.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (111,000,000 samples, 0.02%)</title><rect x="17.1" y="1269" width="0.2" height="15.0" fill="rgb(223,226,31)" rx="2" ry="2" />
<text  x="20.10" y="1279.5" ></text>
</g>
<g >
<title>node::SpinEventLoop (1,241,750,000 samples, 0.18%)</title><rect x="11.1" y="1557" width="2.2" height="15.0" fill="rgb(206,207,49)" rx="2" ry="2" />
<text  x="14.09" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (208,250,000 samples, 0.03%)</title><rect x="13.5" y="1333" width="0.3" height="15.0" fill="rgb(217,181,41)" rx="2" ry="2" />
<text  x="16.47" y="1343.5" ></text>
</g>
<g >
<title>[perf-1052.map] (83,000,000 samples, 0.01%)</title><rect x="12.3" y="1253" width="0.1" height="15.0" fill="rgb(209,110,54)" rx="2" ry="2" />
<text  x="15.27" y="1263.5" ></text>
</g>
<g >
<title>[perf-1052.map] (70,750,000 samples, 0.01%)</title><rect x="12.3" y="1157" width="0.1" height="15.0" fill="rgb(231,39,28)" rx="2" ry="2" />
<text  x="15.30" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (105,750,000 samples, 0.02%)</title><rect x="13.5" y="517" width="0.2" height="15.0" fill="rgb(237,159,49)" rx="2" ry="2" />
<text  x="16.55" y="527.5" ></text>
</g>
<g >
<title>Watcher::isIgnored (239,250,000 samples, 0.04%)</title><rect x="13.4" y="1509" width="0.5" height="15.0" fill="rgb(245,73,25)" rx="2" ry="2" />
<text  x="16.43" y="1519.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (82,500,000 samples, 0.01%)</title><rect x="17.1" y="1221" width="0.2" height="15.0" fill="rgb(229,79,49)" rx="2" ry="2" />
<text  x="20.14" y="1231.5" ></text>
</g>
<g >
<title>ext4_da_write_end (76,250,000 samples, 0.01%)</title><rect x="15.2" y="1317" width="0.1" height="15.0" fill="rgb(237,168,39)" rx="2" ry="2" />
<text  x="18.19" y="1327.5" ></text>
</g>
<g >
<title>[perf-1052.map] (76,000,000 samples, 0.01%)</title><rect x="12.3" y="1189" width="0.1" height="15.0" fill="rgb(213,143,53)" rx="2" ry="2" />
<text  x="15.29" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (104,500,000 samples, 0.02%)</title><rect x="13.5" y="485" width="0.2" height="15.0" fill="rgb(225,57,46)" rx="2" ry="2" />
<text  x="16.55" y="495.5" ></text>
</g>
<g >
<title>[perf-2123.map] (212,500,000 samples, 0.03%)</title><rect x="11.7" y="997" width="0.3" height="15.0" fill="rgb(242,157,19)" rx="2" ry="2" />
<text  x="14.65" y="1007.5" ></text>
</g>
<g >
<title>cpuidle_enter (583,896,750,000 samples, 86.87%)</title><rect x="18.2" y="1509" width="1025.1" height="15.0" fill="rgb(227,40,14)" rx="2" ry="2" />
<text  x="21.21" y="1519.5" >cpuidle_enter</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (106,500,000 samples, 0.02%)</title><rect x="13.5" y="533" width="0.2" height="15.0" fill="rgb(241,195,28)" rx="2" ry="2" />
<text  x="16.55" y="543.5" ></text>
</g>
<g >
<title>cmd_record (360,250,000 samples, 0.05%)</title><rect x="14.7" y="1557" width="0.7" height="15.0" fill="rgb(229,91,13)" rx="2" ry="2" />
<text  x="17.73" y="1567.5" ></text>
</g>
<g >
<title>__filemap_get_folio (89,500,000 samples, 0.01%)</title><rect x="15.0" y="1269" width="0.2" height="15.0" fill="rgb(238,83,43)" rx="2" ry="2" />
<text  x="18.03" y="1279.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (655,500,000 samples, 0.10%)</title><rect x="16.8" y="1509" width="1.1" height="15.0" fill="rgb(226,201,3)" rx="2" ry="2" />
<text  x="19.75" y="1519.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (177,750,000 samples, 0.03%)</title><rect x="17.1" y="1333" width="0.3" height="15.0" fill="rgb(229,9,39)" rx="2" ry="2" />
<text  x="20.08" y="1343.5" ></text>
</g>
<g >
<title>node::Start (1,241,750,000 samples, 0.18%)</title><rect x="11.1" y="1589" width="2.2" height="15.0" fill="rgb(214,165,28)" rx="2" ry="2" />
<text  x="14.09" y="1599.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Backend::run (311,000,000 samples, 0.05%)</title><rect x="13.4" y="1589" width="0.6" height="15.0" fill="rgb(216,2,49)" rx="2" ry="2" />
<text  x="16.42" y="1599.5" ></text>
</g>
<g >
<title>exc_page_fault (69,000,000 samples, 0.01%)</title><rect x="18.0" y="1573" width="0.1" height="15.0" fill="rgb(235,5,11)" rx="2" ry="2" />
<text  x="20.96" y="1583.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (235,250,000 samples, 0.03%)</title><rect x="10.6" y="1525" width="0.5" height="15.0" fill="rgb(254,125,2)" rx="2" ry="2" />
<text  x="13.65" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (84,750,000 samples, 0.01%)</title><rect x="13.6" y="293" width="0.1" height="15.0" fill="rgb(248,189,15)" rx="2" ry="2" />
<text  x="16.56" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (159,500,000 samples, 0.02%)</title><rect x="13.5" y="965" width="0.3" height="15.0" fill="rgb(251,212,31)" rx="2" ry="2" />
<text  x="16.51" y="975.5" ></text>
</g>
<g >
<title>v8::Function::Call (252,750,000 samples, 0.04%)</title><rect x="12.8" y="1493" width="0.5" height="15.0" fill="rgb(244,152,4)" rx="2" ry="2" />
<text  x="15.82" y="1503.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (82,750,000 samples, 0.01%)</title><rect x="11.4" y="1349" width="0.1" height="15.0" fill="rgb(213,104,13)" rx="2" ry="2" />
<text  x="14.37" y="1359.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (84,000,000 samples, 0.01%)</title><rect x="11.4" y="1365" width="0.1" height="15.0" fill="rgb(213,13,1)" rx="2" ry="2" />
<text  x="14.37" y="1375.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (134,000,000 samples, 0.02%)</title><rect x="12.3" y="1317" width="0.2" height="15.0" fill="rgb(239,170,27)" rx="2" ry="2" />
<text  x="15.26" y="1327.5" ></text>
</g>
<g >
<title>InotifyBackend::handleEvents (281,750,000 samples, 0.04%)</title><rect x="13.4" y="1557" width="0.5" height="15.0" fill="rgb(246,28,2)" rx="2" ry="2" />
<text  x="16.42" y="1567.5" ></text>
</g>
<g >
<title>cat (62,500,000 samples, 0.01%)</title><rect x="10.1" y="1621" width="0.1" height="15.0" fill="rgb(242,161,38)" rx="2" ry="2" />
<text  x="13.08" y="1631.5" ></text>
</g>
<g >
<title>generic_perform_write (268,250,000 samples, 0.04%)</title><rect x="14.9" y="1333" width="0.4" height="15.0" fill="rgb(226,79,43)" rx="2" ry="2" />
<text  x="17.88" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (221,000,000 samples, 0.03%)</title><rect x="13.5" y="1413" width="0.4" height="15.0" fill="rgb(206,185,21)" rx="2" ry="2" />
<text  x="16.46" y="1423.5" ></text>
</g>
<g >
<title>call_cpuidle (583,897,500,000 samples, 86.87%)</title><rect x="18.2" y="1525" width="1025.1" height="15.0" fill="rgb(216,79,27)" rx="2" ry="2" />
<text  x="21.21" y="1535.5" >call_cpuidle</text>
</g>
<g >
<title>node::InternalCallbackScope::Close (135,750,000 samples, 0.02%)</title><rect x="12.3" y="1381" width="0.2" height="15.0" fill="rgb(211,169,27)" rx="2" ry="2" />
<text  x="15.25" y="1391.5" ></text>
</g>
<g >
<title>all (672,143,250,000 samples, 100%)</title><rect x="10.0" y="1637" width="1180.0" height="15.0" fill="rgb(251,49,19)" rx="2" ry="2" />
<text  x="13.00" y="1647.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (1,241,750,000 samples, 0.18%)</title><rect x="11.1" y="1573" width="2.2" height="15.0" fill="rgb(245,186,45)" rx="2" ry="2" />
<text  x="14.09" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (199,750,000 samples, 0.03%)</title><rect x="13.5" y="1269" width="0.3" height="15.0" fill="rgb(210,137,18)" rx="2" ry="2" />
<text  x="16.48" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (183,000,000 samples, 0.03%)</title><rect x="13.5" y="1157" width="0.3" height="15.0" fill="rgb(249,48,24)" rx="2" ry="2" />
<text  x="16.49" y="1167.5" ></text>
</g>
<g >
<title>v8::Function::Call (135,000,000 samples, 0.02%)</title><rect x="12.3" y="1365" width="0.2" height="15.0" fill="rgb(237,61,2)" rx="2" ry="2" />
<text  x="15.26" y="1375.5" ></text>
</g>
<g >
<title>__handle_mm_fault (69,000,000 samples, 0.01%)</title><rect x="18.0" y="1525" width="0.1" height="15.0" fill="rgb(212,181,33)" rx="2" ry="2" />
<text  x="20.96" y="1535.5" ></text>
</g>
<g >
<title>rest_init (83,470,750,000 samples, 12.42%)</title><rect x="1043.4" y="1525" width="146.5" height="15.0" fill="rgb(230,76,30)" rx="2" ry="2" />
<text  x="1046.39" y="1535.5" >rest_init</text>
</g>
<g >
<title>swapper (667,432,000,000 samples, 99.30%)</title><rect x="18.2" y="1621" width="1171.7" height="15.0" fill="rgb(241,42,36)" rx="2" ry="2" />
<text  x="21.20" y="1631.5" >swapper</text>
</g>
<g >
<title>[ssm-document-worker] (1,187,250,000 samples, 0.18%)</title><rect x="15.9" y="1557" width="2.1" height="15.0" fill="rgb(209,219,39)" rx="2" ry="2" />
<text  x="18.87" y="1567.5" ></text>
</g>
<g >
<title>uv__io_poll (859,000,000 samples, 0.13%)</title><rect x="11.2" y="1525" width="1.5" height="15.0" fill="rgb(206,123,32)" rx="2" ry="2" />
<text  x="14.19" y="1535.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (248,500,000 samples, 0.04%)</title><rect x="12.8" y="1445" width="0.5" height="15.0" fill="rgb(229,69,51)" rx="2" ry="2" />
<text  x="15.83" y="1455.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::CompressionStream&lt;node::(anonymous namespace)::ZlibContext&gt;::AfterThreadPoolWork (439,750,000 samples, 0.07%)</title><rect x="11.4" y="1461" width="0.7" height="15.0" fill="rgb(231,134,4)" rx="2" ry="2" />
<text  x="14.37" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (91,000,000 samples, 0.01%)</title><rect x="13.6" y="389" width="0.1" height="15.0" fill="rgb(213,72,39)" rx="2" ry="2" />
<text  x="16.56" y="399.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (121,750,000 samples, 0.02%)</title><rect x="17.1" y="1285" width="0.2" height="15.0" fill="rgb(237,105,34)" rx="2" ry="2" />
<text  x="20.09" y="1295.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (250,750,000 samples, 0.04%)</title><rect x="12.8" y="1461" width="0.5" height="15.0" fill="rgb(246,64,2)" rx="2" ry="2" />
<text  x="15.83" y="1471.5" ></text>
</g>
<g >
<title>[perf-1794.map] (60,750,000 samples, 0.01%)</title><rect x="13.0" y="1365" width="0.1" height="15.0" fill="rgb(208,43,2)" rx="2" ry="2" />
<text  x="15.97" y="1375.5" ></text>
</g>
<g >
<title>handle_pte_fault (69,000,000 samples, 0.01%)</title><rect x="18.0" y="1509" width="0.1" height="15.0" fill="rgb(215,85,38)" rx="2" ry="2" />
<text  x="20.96" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (191,750,000 samples, 0.03%)</title><rect x="13.5" y="1221" width="0.3" height="15.0" fill="rgb(211,61,41)" rx="2" ry="2" />
<text  x="16.49" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (210,500,000 samples, 0.03%)</title><rect x="13.5" y="1365" width="0.3" height="15.0" fill="rgb(223,18,50)" rx="2" ry="2" />
<text  x="16.47" y="1375.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (144,750,000 samples, 0.02%)</title><rect x="17.1" y="1317" width="0.2" height="15.0" fill="rgb(229,219,39)" rx="2" ry="2" />
<text  x="20.08" y="1327.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (83,470,750,000 samples, 12.42%)</title><rect x="1043.4" y="1573" width="146.5" height="15.0" fill="rgb(251,103,4)" rx="2" ry="2" />
<text  x="1046.39" y="1583.5" >x86_64_start_reser..</text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (438,750,000 samples, 0.07%)</title><rect x="11.4" y="1445" width="0.7" height="15.0" fill="rgb(234,73,47)" rx="2" ry="2" />
<text  x="14.37" y="1455.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (511,250,000 samples, 0.08%)</title><rect x="16.9" y="1477" width="0.9" height="15.0" fill="rgb(221,155,42)" rx="2" ry="2" />
<text  x="19.89" y="1487.5" ></text>
</g>
<g >
<title>InotifyBackend::handleEvent (277,500,000 samples, 0.04%)</title><rect x="13.4" y="1541" width="0.5" height="15.0" fill="rgb(223,178,36)" rx="2" ry="2" />
<text  x="16.43" y="1551.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (309,250,000 samples, 0.05%)</title><rect x="17.0" y="1397" width="0.5" height="15.0" fill="rgb(254,14,30)" rx="2" ry="2" />
<text  x="19.96" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (58,750,000 samples, 0.01%)</title><rect x="13.6" y="53" width="0.1" height="15.0" fill="rgb(248,52,1)" rx="2" ry="2" />
<text  x="16.58" y="63.5" ></text>
</g>
<g >
<title>[perf-2123.map] (120,250,000 samples, 0.02%)</title><rect x="11.8" y="885" width="0.2" height="15.0" fill="rgb(231,16,2)" rx="2" ry="2" />
<text  x="14.80" y="895.5" ></text>
</g>
<g >
<title>InotifyBackend::handleSubscription (246,000,000 samples, 0.04%)</title><rect x="13.4" y="1525" width="0.5" height="15.0" fill="rgb(215,43,28)" rx="2" ry="2" />
<text  x="16.43" y="1535.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (83,458,500,000 samples, 12.42%)</title><rect x="1043.4" y="1477" width="146.5" height="15.0" fill="rgb(225,191,13)" rx="2" ry="2" />
<text  x="1046.39" y="1487.5" >cpuidle_idle_call</text>
</g>
<g >
<title>pagecache_get_page (91,000,000 samples, 0.01%)</title><rect x="15.0" y="1285" width="0.2" height="15.0" fill="rgb(207,178,51)" rx="2" ry="2" />
<text  x="18.03" y="1295.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (583,899,500,000 samples, 86.87%)</title><rect x="18.2" y="1541" width="1025.1" height="15.0" fill="rgb(223,36,29)" rx="2" ry="2" />
<text  x="21.21" y="1551.5" >cpuidle_idle_call</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (62,000,000 samples, 0.01%)</title><rect x="14.5" y="1605" width="0.1" height="15.0" fill="rgb(236,169,21)" rx="2" ry="2" />
<text  x="17.52" y="1615.5" ></text>
</g>
<g >
<title>[perf-2123.map] (236,000,000 samples, 0.04%)</title><rect x="11.6" y="1093" width="0.4" height="15.0" fill="rgb(226,159,54)" rx="2" ry="2" />
<text  x="14.61" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (199,250,000 samples, 0.03%)</title><rect x="13.5" y="1253" width="0.3" height="15.0" fill="rgb(219,208,50)" rx="2" ry="2" />
<text  x="16.48" y="1263.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (247,250,000 samples, 0.04%)</title><rect x="12.8" y="1429" width="0.5" height="15.0" fill="rgb(233,155,48)" rx="2" ry="2" />
<text  x="15.83" y="1439.5" ></text>
</g>
<g >
<title>worker (75,750,000 samples, 0.01%)</title><rect x="13.3" y="1589" width="0.1" height="15.0" fill="rgb(228,68,12)" rx="2" ry="2" />
<text  x="16.28" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (120,500,000 samples, 0.02%)</title><rect x="13.5" y="613" width="0.2" height="15.0" fill="rgb(213,218,24)" rx="2" ry="2" />
<text  x="16.53" y="623.5" ></text>
</g>
<g >
<title>new_sync_write (274,750,000 samples, 0.04%)</title><rect x="14.9" y="1381" width="0.4" height="15.0" fill="rgb(234,161,1)" rx="2" ry="2" />
<text  x="17.87" y="1391.5" ></text>
</g>
<g >
<title>cpu_startup_entry (83,470,750,000 samples, 12.42%)</title><rect x="1043.4" y="1509" width="146.5" height="15.0" fill="rgb(216,202,41)" rx="2" ry="2" />
<text  x="1046.39" y="1519.5" >cpu_startup_entry</text>
</g>
<g >
<title>Watcher::fireCallbacks (72,500,000 samples, 0.01%)</title><rect x="11.2" y="1493" width="0.2" height="15.0" fill="rgb(229,85,20)" rx="2" ry="2" />
<text  x="14.22" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (73,250,000 samples, 0.01%)</title><rect x="13.6" y="197" width="0.1" height="15.0" fill="rgb(245,174,24)" rx="2" ry="2" />
<text  x="16.57" y="207.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (240,000,000 samples, 0.04%)</title><rect x="12.3" y="1397" width="0.4" height="15.0" fill="rgb(206,214,1)" rx="2" ry="2" />
<text  x="15.25" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (66,000,000 samples, 0.01%)</title><rect x="13.6" y="117" width="0.1" height="15.0" fill="rgb(219,221,14)" rx="2" ry="2" />
<text  x="16.57" y="127.5" ></text>
</g>
<g >
<title>write (316,250,000 samples, 0.05%)</title><rect x="14.8" y="1477" width="0.6" height="15.0" fill="rgb(231,118,18)" rx="2" ry="2" />
<text  x="17.80" y="1487.5" ></text>
</g>
<g >
<title>handle_mm_fault (69,000,000 samples, 0.01%)</title><rect x="18.0" y="1541" width="0.1" height="15.0" fill="rgb(246,150,16)" rx="2" ry="2" />
<text  x="20.96" y="1551.5" ></text>
</g>
<g >
<title>Glob::isIgnored (237,000,000 samples, 0.04%)</title><rect x="13.4" y="1493" width="0.5" height="15.0" fill="rgb(230,168,53)" rx="2" ry="2" />
<text  x="16.44" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (152,000,000 samples, 0.02%)</title><rect x="13.5" y="885" width="0.3" height="15.0" fill="rgb(210,186,50)" rx="2" ry="2" />
<text  x="16.52" y="895.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (131,750,000 samples, 0.02%)</title><rect x="15.0" y="1317" width="0.2" height="15.0" fill="rgb(213,89,10)" rx="2" ry="2" />
<text  x="17.96" y="1327.5" ></text>
</g>
<g >
<title>node::StreamBase::CallJSOnreadMethod (242,250,000 samples, 0.04%)</title><rect x="12.2" y="1429" width="0.5" height="15.0" fill="rgb(242,177,44)" rx="2" ry="2" />
<text  x="15.25" y="1439.5" ></text>
</g>
<g >
<title>do_idle (83,470,000,000 samples, 12.42%)</title><rect x="1043.4" y="1493" width="146.5" height="15.0" fill="rgb(217,182,35)" rx="2" ry="2" />
<text  x="1046.39" y="1503.5" >do_idle</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (115,750,000 samples, 0.02%)</title><rect x="13.5" y="581" width="0.2" height="15.0" fill="rgb(252,0,44)" rx="2" ry="2" />
<text  x="16.54" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (87,000,000 samples, 0.01%)</title><rect x="14.0" y="1589" width="0.1" height="15.0" fill="rgb(218,124,51)" rx="2" ry="2" />
<text  x="16.99" y="1599.5" ></text>
</g>
<g >
<title>cpu_startup_entry (583,961,250,000 samples, 86.88%)</title><rect x="18.2" y="1573" width="1025.2" height="15.0" fill="rgb(221,10,3)" rx="2" ry="2" />
<text  x="21.20" y="1583.5" >cpu_startup_entry</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (207,250,000 samples, 0.03%)</title><rect x="13.5" y="1317" width="0.3" height="15.0" fill="rgb(210,212,11)" rx="2" ry="2" />
<text  x="16.48" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (113,750,000 samples, 0.02%)</title><rect x="13.5" y="565" width="0.2" height="15.0" fill="rgb(239,198,11)" rx="2" ry="2" />
<text  x="16.54" y="575.5" ></text>
</g>
<g >
<title>do_fault (69,000,000 samples, 0.01%)</title><rect x="18.0" y="1493" width="0.1" height="15.0" fill="rgb(223,68,2)" rx="2" ry="2" />
<text  x="20.96" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (175,750,000 samples, 0.03%)</title><rect x="13.5" y="1061" width="0.3" height="15.0" fill="rgb(227,127,42)" rx="2" ry="2" />
<text  x="16.50" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (200,250,000 samples, 0.03%)</title><rect x="13.5" y="1285" width="0.3" height="15.0" fill="rgb(240,107,31)" rx="2" ry="2" />
<text  x="16.48" y="1295.5" ></text>
</g>
<g >
<title>do_syscall_64 (314,000,000 samples, 0.05%)</title><rect x="14.8" y="1445" width="0.6" height="15.0" fill="rgb(222,150,53)" rx="2" ry="2" />
<text  x="17.80" y="1455.5" ></text>
</g>
<g >
<title>[perf-1052.map] (81,500,000 samples, 0.01%)</title><rect x="12.3" y="1237" width="0.1" height="15.0" fill="rgb(239,85,10)" rx="2" ry="2" />
<text  x="15.28" y="1247.5" ></text>
</g>
<g >
<title>[perf-2123.map] (156,500,000 samples, 0.02%)</title><rect x="11.7" y="933" width="0.3" height="15.0" fill="rgb(225,50,23)" rx="2" ry="2" />
<text  x="14.74" y="943.5" ></text>
</g>
<g >
<title>[perf-2134.map] (57,750,000 samples, 0.01%)</title><rect x="13.2" y="1365" width="0.1" height="15.0" fill="rgb(233,181,38)" rx="2" ry="2" />
<text  x="16.16" y="1375.5" ></text>
</g>
<g >
<title>[perf-1052.map] (67,750,000 samples, 0.01%)</title><rect x="12.3" y="1141" width="0.1" height="15.0" fill="rgb(212,61,21)" rx="2" ry="2" />
<text  x="15.30" y="1151.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (1,194,750,000 samples, 0.18%)</title><rect x="15.9" y="1589" width="2.1" height="15.0" fill="rgb(246,2,39)" rx="2" ry="2" />
<text  x="18.86" y="1599.5" ></text>
</g>
<g >
<title>__x64_sys_write (312,500,000 samples, 0.05%)</title><rect x="14.8" y="1429" width="0.5" height="15.0" fill="rgb(248,39,19)" rx="2" ry="2" />
<text  x="17.80" y="1439.5" ></text>
</g>
<g >
<title>[perf-2123.map] (219,250,000 samples, 0.03%)</title><rect x="11.6" y="1013" width="0.4" height="15.0" fill="rgb(221,150,43)" rx="2" ry="2" />
<text  x="14.64" y="1023.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (314,000,000 samples, 0.05%)</title><rect x="14.8" y="1461" width="0.6" height="15.0" fill="rgb(216,24,42)" rx="2" ry="2" />
<text  x="17.80" y="1471.5" ></text>
</g>
<g >
<title>[unknown] (112,250,000 samples, 0.02%)</title><rect x="14.0" y="1605" width="0.2" height="15.0" fill="rgb(253,189,38)" rx="2" ry="2" />
<text  x="16.99" y="1615.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,640,250,000 samples, 0.24%)</title><rect x="10.5" y="1605" width="2.9" height="15.0" fill="rgb(219,161,43)" rx="2" ry="2" />
<text  x="13.53" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (158,500,000 samples, 0.02%)</title><rect x="13.5" y="949" width="0.3" height="15.0" fill="rgb(236,133,40)" rx="2" ry="2" />
<text  x="16.51" y="959.5" ></text>
</g>
<g >
<title>[perf-2123.map] (235,750,000 samples, 0.04%)</title><rect x="11.6" y="1077" width="0.4" height="15.0" fill="rgb(254,119,4)" rx="2" ry="2" />
<text  x="14.61" y="1087.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::Close (379,250,000 samples, 0.06%)</title><rect x="11.4" y="1413" width="0.6" height="15.0" fill="rgb(206,163,3)" rx="2" ry="2" />
<text  x="14.37" y="1423.5" ></text>
</g>
<g >
<title>[perf-2123.map] (238,000,000 samples, 0.04%)</title><rect x="11.6" y="1141" width="0.4" height="15.0" fill="rgb(205,221,11)" rx="2" ry="2" />
<text  x="14.61" y="1151.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (99,750,000 samples, 0.01%)</title><rect x="12.5" y="1317" width="0.2" height="15.0" fill="rgb(252,47,7)" rx="2" ry="2" />
<text  x="15.50" y="1327.5" ></text>
</g>
<g >
<title>v8::Function::Call (103,000,000 samples, 0.02%)</title><rect x="12.5" y="1381" width="0.2" height="15.0" fill="rgb(208,75,42)" rx="2" ry="2" />
<text  x="15.49" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (66,750,000 samples, 0.01%)</title><rect x="13.6" y="133" width="0.1" height="15.0" fill="rgb(222,145,44)" rx="2" ry="2" />
<text  x="16.57" y="143.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (134,750,000 samples, 0.02%)</title><rect x="12.3" y="1333" width="0.2" height="15.0" fill="rgb(229,179,46)" rx="2" ry="2" />
<text  x="15.26" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (59,750,000 samples, 0.01%)</title><rect x="13.6" y="69" width="0.1" height="15.0" fill="rgb(235,39,17)" rx="2" ry="2" />
<text  x="16.58" y="79.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (102,750,000 samples, 0.02%)</title><rect x="12.5" y="1349" width="0.2" height="15.0" fill="rgb(208,180,48)" rx="2" ry="2" />
<text  x="15.49" y="1359.5" ></text>
</g>
<g >
<title>malloc (72,000,000 samples, 0.01%)</title><rect x="14.3" y="1605" width="0.1" height="15.0" fill="rgb(243,44,3)" rx="2" ry="2" />
<text  x="17.31" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (105,250,000 samples, 0.02%)</title><rect x="13.5" y="501" width="0.2" height="15.0" fill="rgb(230,87,3)" rx="2" ry="2" />
<text  x="16.55" y="511.5" ></text>
</g>
<g >
<title>[perf-2123.map] (244,250,000 samples, 0.04%)</title><rect x="11.6" y="1173" width="0.4" height="15.0" fill="rgb(233,24,53)" rx="2" ry="2" />
<text  x="14.60" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (74,250,000 samples, 0.01%)</title><rect x="13.6" y="213" width="0.1" height="15.0" fill="rgb(212,87,46)" rx="2" ry="2" />
<text  x="16.57" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (152,250,000 samples, 0.02%)</title><rect x="13.5" y="901" width="0.3" height="15.0" fill="rgb(211,55,53)" rx="2" ry="2" />
<text  x="16.52" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (218,750,000 samples, 0.03%)</title><rect x="13.5" y="1397" width="0.4" height="15.0" fill="rgb(235,45,44)" rx="2" ry="2" />
<text  x="16.47" y="1407.5" ></text>
</g>
<g >
<title>[perf-2123.map] (202,500,000 samples, 0.03%)</title><rect x="11.7" y="981" width="0.3" height="15.0" fill="rgb(234,223,41)" rx="2" ry="2" />
<text  x="14.67" y="991.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (583,896,750,000 samples, 86.87%)</title><rect x="18.2" y="1493" width="1025.1" height="15.0" fill="rgb(205,80,28)" rx="2" ry="2" />
<text  x="21.21" y="1503.5" >cpuidle_enter_state</text>
</g>
<g >
<title>[ssm-document-worker] (1,190,250,000 samples, 0.18%)</title><rect x="15.9" y="1573" width="2.1" height="15.0" fill="rgb(249,219,22)" rx="2" ry="2" />
<text  x="18.87" y="1583.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::PerformCheckpoint (294,000,000 samples, 0.04%)</title><rect x="11.5" y="1397" width="0.5" height="15.0" fill="rgb(238,175,39)" rx="2" ry="2" />
<text  x="14.52" y="1407.5" ></text>
</g>
<g >
<title>[perf-1052.map] (84,000,000 samples, 0.01%)</title><rect x="12.3" y="1269" width="0.1" height="15.0" fill="rgb(249,126,47)" rx="2" ry="2" />
<text  x="15.27" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (168,250,000 samples, 0.03%)</title><rect x="13.5" y="1029" width="0.3" height="15.0" fill="rgb(210,71,23)" rx="2" ry="2" />
<text  x="16.50" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (141,250,000 samples, 0.02%)</title><rect x="13.5" y="821" width="0.3" height="15.0" fill="rgb(233,208,22)" rx="2" ry="2" />
<text  x="16.52" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (182,500,000 samples, 0.03%)</title><rect x="13.5" y="1125" width="0.3" height="15.0" fill="rgb(211,124,16)" rx="2" ry="2" />
<text  x="16.49" y="1135.5" ></text>
</g>
<g >
<title>acpi_idle_enter (83,458,000,000 samples, 12.42%)</title><rect x="1043.4" y="1413" width="146.5" height="15.0" fill="rgb(247,217,17)" rx="2" ry="2" />
<text  x="1046.39" y="1423.5" >acpi_idle_enter</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (86,250,000 samples, 0.01%)</title><rect x="13.6" y="341" width="0.1" height="15.0" fill="rgb(211,73,29)" rx="2" ry="2" />
<text  x="16.56" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (65,250,000 samples, 0.01%)</title><rect x="13.6" y="101" width="0.1" height="15.0" fill="rgb(247,219,52)" rx="2" ry="2" />
<text  x="16.57" y="111.5" ></text>
</g>
<g >
<title>v8::Function::Call (57,750,000 samples, 0.01%)</title><rect x="12.0" y="1413" width="0.1" height="15.0" fill="rgb(228,185,13)" rx="2" ry="2" />
<text  x="15.04" y="1423.5" ></text>
</g>
<g >
<title>vfs_write (310,500,000 samples, 0.05%)</title><rect x="14.8" y="1397" width="0.5" height="15.0" fill="rgb(224,121,9)" rx="2" ry="2" />
<text  x="17.80" y="1407.5" ></text>
</g>
<g >
<title>[perf-1794.map] (57,000,000 samples, 0.01%)</title><rect x="13.0" y="1333" width="0.1" height="15.0" fill="rgb(251,1,49)" rx="2" ry="2" />
<text  x="15.98" y="1343.5" ></text>
</g>
<g >
<title>__cmd_record.constprop.0 (359,750,000 samples, 0.05%)</title><rect x="14.7" y="1541" width="0.7" height="15.0" fill="rgb(253,174,50)" rx="2" ry="2" />
<text  x="17.73" y="1551.5" ></text>
</g>
<g >
<title>non-virtual thunk to v8::internal::CancelableTask::Run (238,000,000 samples, 0.04%)</title><rect x="10.6" y="1573" width="0.5" height="15.0" fill="rgb(233,80,26)" rx="2" ry="2" />
<text  x="13.64" y="1583.5" ></text>
</g>
<g >
<title>[perf-1794.map] (58,000,000 samples, 0.01%)</title><rect x="13.0" y="1349" width="0.1" height="15.0" fill="rgb(205,27,27)" rx="2" ry="2" />
<text  x="15.98" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (85,000,000 samples, 0.01%)</title><rect x="13.6" y="309" width="0.1" height="15.0" fill="rgb(229,85,27)" rx="2" ry="2" />
<text  x="16.56" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (332,000,000 samples, 0.05%)</title><rect x="13.4" y="1605" width="0.6" height="15.0" fill="rgb(207,225,51)" rx="2" ry="2" />
<text  x="16.41" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (98,500,000 samples, 0.01%)</title><rect x="13.6" y="421" width="0.1" height="15.0" fill="rgb(213,78,4)" rx="2" ry="2" />
<text  x="16.55" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (158,250,000 samples, 0.02%)</title><rect x="13.5" y="933" width="0.3" height="15.0" fill="rgb(211,164,42)" rx="2" ry="2" />
<text  x="16.51" y="943.5" ></text>
</g>
<g >
<title>uv__async_io.part.1 (553,000,000 samples, 0.08%)</title><rect x="11.2" y="1509" width="1.0" height="15.0" fill="rgb(206,60,34)" rx="2" ry="2" />
<text  x="14.22" y="1519.5" ></text>
</g>
<g >
<title>Builtins_RunMicrotasks (293,250,000 samples, 0.04%)</title><rect x="11.5" y="1301" width="0.5" height="15.0" fill="rgb(243,104,0)" rx="2" ry="2" />
<text  x="14.52" y="1311.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (293,000,000 samples, 0.04%)</title><rect x="17.0" y="1381" width="0.5" height="15.0" fill="rgb(205,50,49)" rx="2" ry="2" />
<text  x="19.97" y="1391.5" ></text>
</g>
<g >
<title>[perf-2123.map] (232,500,000 samples, 0.03%)</title><rect x="11.6" y="1045" width="0.4" height="15.0" fill="rgb(252,167,45)" rx="2" ry="2" />
<text  x="14.62" y="1055.5" ></text>
</g>
<g >
<title>v8::internal::OptimizingCompileDispatcher::CompileNext (236,000,000 samples, 0.04%)</title><rect x="10.6" y="1557" width="0.5" height="15.0" fill="rgb(207,209,8)" rx="2" ry="2" />
<text  x="13.65" y="1567.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (82,750,000 samples, 0.01%)</title><rect x="11.4" y="1333" width="0.1" height="15.0" fill="rgb(208,167,27)" rx="2" ry="2" />
<text  x="14.37" y="1343.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (451,500,000 samples, 0.07%)</title><rect x="16.9" y="1461" width="0.8" height="15.0" fill="rgb(251,42,0)" rx="2" ry="2" />
<text  x="19.91" y="1471.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineImpl::OptimizeGraph (223,750,000 samples, 0.03%)</title><rect x="10.7" y="1509" width="0.4" height="15.0" fill="rgb(222,122,12)" rx="2" ry="2" />
<text  x="13.67" y="1519.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (1,264,250,000 samples, 0.19%)</title><rect x="15.9" y="1605" width="2.2" height="15.0" fill="rgb(242,168,3)" rx="2" ry="2" />
<text  x="18.86" y="1615.5" ></text>
</g>
<g >
<title>native_safe_halt (83,458,000,000 samples, 12.42%)</title><rect x="1043.4" y="1397" width="146.5" height="15.0" fill="rgb(252,219,0)" rx="2" ry="2" />
<text  x="1046.39" y="1407.5" >native_safe_halt</text>
</g>
<g >
<title>[perf-1052.map] (58,500,000 samples, 0.01%)</title><rect x="12.3" y="1125" width="0.1" height="15.0" fill="rgb(243,85,48)" rx="2" ry="2" />
<text  x="15.32" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (224,500,000 samples, 0.03%)</title><rect x="13.5" y="1445" width="0.4" height="15.0" fill="rgb(210,156,7)" rx="2" ry="2" />
<text  x="16.46" y="1455.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (103,500,000 samples, 0.02%)</title><rect x="17.1" y="1253" width="0.2" height="15.0" fill="rgb(233,111,43)" rx="2" ry="2" />
<text  x="20.11" y="1263.5" ></text>
</g>
<g >
<title>InotifyBackend::start (293,750,000 samples, 0.04%)</title><rect x="13.4" y="1573" width="0.5" height="15.0" fill="rgb(248,83,16)" rx="2" ry="2" />
<text  x="16.42" y="1583.5" ></text>
</g>
<g >
<title>node::EmitToJSStreamListener::OnStreamRead (248,500,000 samples, 0.04%)</title><rect x="12.2" y="1445" width="0.5" height="15.0" fill="rgb(246,9,41)" rx="2" ry="2" />
<text  x="15.25" y="1455.5" ></text>
</g>
<g >
<title>[perf-2123.map] (237,250,000 samples, 0.04%)</title><rect x="11.6" y="1125" width="0.4" height="15.0" fill="rgb(216,196,46)" rx="2" ry="2" />
<text  x="14.61" y="1135.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (69,000,000 samples, 0.01%)</title><rect x="18.0" y="1589" width="0.1" height="15.0" fill="rgb(225,78,49)" rx="2" ry="2" />
<text  x="20.96" y="1599.5" ></text>
</g>
<g >
<title>[perf-2123.map] (194,000,000 samples, 0.03%)</title><rect x="11.7" y="965" width="0.3" height="15.0" fill="rgb(250,127,45)" rx="2" ry="2" />
<text  x="14.69" y="975.5" ></text>
</g>
<g >
<title>acpi_idle_enter (583,887,500,000 samples, 86.87%)</title><rect x="18.2" y="1477" width="1025.1" height="15.0" fill="rgb(212,186,21)" rx="2" ry="2" />
<text  x="21.23" y="1487.5" >acpi_idle_enter</text>
</g>
<g >
<title>node::InternalMakeCallback (438,250,000 samples, 0.07%)</title><rect x="11.4" y="1429" width="0.7" height="15.0" fill="rgb(233,10,21)" rx="2" ry="2" />
<text  x="14.37" y="1439.5" ></text>
</g>
<g >
<title>v8::internal::OptimizedCompilationJob::ExecuteJob (235,500,000 samples, 0.04%)</title><rect x="10.6" y="1541" width="0.5" height="15.0" fill="rgb(214,200,54)" rx="2" ry="2" />
<text  x="13.65" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (128,250,000 samples, 0.02%)</title><rect x="13.5" y="677" width="0.3" height="15.0" fill="rgb(251,87,45)" rx="2" ry="2" />
<text  x="16.53" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (99,750,000 samples, 0.01%)</title><rect x="13.6" y="453" width="0.1" height="15.0" fill="rgb(233,222,29)" rx="2" ry="2" />
<text  x="16.55" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (209,000,000 samples, 0.03%)</title><rect x="13.5" y="1349" width="0.3" height="15.0" fill="rgb(220,7,24)" rx="2" ry="2" />
<text  x="16.47" y="1359.5" ></text>
</g>
<g >
<title>start_secondary (583,961,250,000 samples, 86.88%)</title><rect x="18.2" y="1589" width="1025.2" height="15.0" fill="rgb(251,23,36)" rx="2" ry="2" />
<text  x="21.20" y="1599.5" >start_secondary</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (141,250,000 samples, 0.02%)</title><rect x="13.5" y="805" width="0.3" height="15.0" fill="rgb(210,197,51)" rx="2" ry="2" />
<text  x="16.52" y="815.5" ></text>
</g>
<g >
<title>[perf-2134.map] (67,500,000 samples, 0.01%)</title><rect x="13.1" y="1413" width="0.2" height="15.0" fill="rgb(233,181,18)" rx="2" ry="2" />
<text  x="16.14" y="1423.5" ></text>
</g>
<g >
<title>[perf-2134.map] (64,000,000 samples, 0.01%)</title><rect x="13.1" y="1397" width="0.2" height="15.0" fill="rgb(211,191,34)" rx="2" ry="2" />
<text  x="16.15" y="1407.5" ></text>
</g>
<g >
<title>[perf-2123.map] (252,250,000 samples, 0.04%)</title><rect x="11.6" y="1237" width="0.4" height="15.0" fill="rgb(207,155,9)" rx="2" ry="2" />
<text  x="14.59" y="1247.5" ></text>
</g>
<g >
<title>do_idle (583,958,750,000 samples, 86.88%)</title><rect x="18.2" y="1557" width="1025.2" height="15.0" fill="rgb(250,172,51)" rx="2" ry="2" />
<text  x="21.20" y="1567.5" >do_idle</text>
</g>
<g >
<title>[perf-2123.map] (234,750,000 samples, 0.03%)</title><rect x="11.6" y="1061" width="0.4" height="15.0" fill="rgb(222,175,2)" rx="2" ry="2" />
<text  x="14.62" y="1071.5" ></text>
</g>
<g >
<title>cpuUsage.sh (98,500,000 samples, 0.01%)</title><rect x="10.2" y="1621" width="0.2" height="15.0" fill="rgb(241,164,0)" rx="2" ry="2" />
<text  x="13.20" y="1631.5" ></text>
</g>
<g >
<title>cpuidle_enter (83,458,250,000 samples, 12.42%)</title><rect x="1043.4" y="1445" width="146.5" height="15.0" fill="rgb(253,13,48)" rx="2" ry="2" />
<text  x="1046.39" y="1455.5" >cpuidle_enter</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (67,250,000 samples, 0.01%)</title><rect x="13.6" y="149" width="0.1" height="15.0" fill="rgb(245,163,42)" rx="2" ry="2" />
<text  x="16.57" y="159.5" ></text>
</g>
<g >
<title>[perf-2123.map] (242,500,000 samples, 0.04%)</title><rect x="11.6" y="1157" width="0.4" height="15.0" fill="rgb(206,121,9)" rx="2" ry="2" />
<text  x="14.60" y="1167.5" ></text>
</g>
<g >
<title>native_safe_halt (583,887,000,000 samples, 86.87%)</title><rect x="18.2" y="1461" width="1025.1" height="15.0" fill="rgb(252,153,33)" rx="2" ry="2" />
<text  x="21.23" y="1471.5" >native_safe_halt</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (79,750,000 samples, 0.01%)</title><rect x="13.6" y="261" width="0.1" height="15.0" fill="rgb(250,159,1)" rx="2" ry="2" />
<text  x="16.56" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (116,250,000 samples, 0.02%)</title><rect x="13.5" y="597" width="0.2" height="15.0" fill="rgb(236,32,7)" rx="2" ry="2" />
<text  x="16.54" y="607.5" ></text>
</g>
<g >
<title>uv__stream_io (270,000,000 samples, 0.04%)</title><rect x="12.2" y="1509" width="0.5" height="15.0" fill="rgb(218,98,40)" rx="2" ry="2" />
<text  x="15.23" y="1519.5" ></text>
</g>
<g >
<title>[libc.so.6] (360,250,000 samples, 0.05%)</title><rect x="14.7" y="1605" width="0.7" height="15.0" fill="rgb(210,82,24)" rx="2" ry="2" />
<text  x="17.73" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (130,000,000 samples, 0.02%)</title><rect x="13.5" y="709" width="0.3" height="15.0" fill="rgb(219,104,47)" rx="2" ry="2" />
<text  x="16.53" y="719.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (328,500,000 samples, 0.05%)</title><rect x="17.0" y="1413" width="0.5" height="15.0" fill="rgb(215,87,23)" rx="2" ry="2" />
<text  x="19.95" y="1423.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (389,750,000 samples, 0.06%)</title><rect x="16.9" y="1445" width="0.7" height="15.0" fill="rgb(221,227,34)" rx="2" ry="2" />
<text  x="19.92" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (129,250,000 samples, 0.02%)</title><rect x="13.5" y="693" width="0.3" height="15.0" fill="rgb(239,152,11)" rx="2" ry="2" />
<text  x="16.53" y="703.5" ></text>
</g>
<g >
<title>[perf-2123.map] (57,000,000 samples, 0.01%)</title><rect x="11.9" y="821" width="0.1" height="15.0" fill="rgb(237,169,44)" rx="2" ry="2" />
<text  x="14.91" y="831.5" ></text>
</g>
<g >
<title>node::LibuvStreamWrap::OnUvRead (248,750,000 samples, 0.04%)</title><rect x="12.2" y="1461" width="0.5" height="15.0" fill="rgb(227,198,38)" rx="2" ry="2" />
<text  x="15.25" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (79,000,000 samples, 0.01%)</title><rect x="13.6" y="229" width="0.1" height="15.0" fill="rgb(209,34,51)" rx="2" ry="2" />
<text  x="16.56" y="239.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (101,000,000 samples, 0.02%)</title><rect x="12.5" y="1333" width="0.2" height="15.0" fill="rgb(248,73,35)" rx="2" ry="2" />
<text  x="15.50" y="1343.5" ></text>
</g>
<g >
<title>ssm-document-wo (1,323,000,000 samples, 0.20%)</title><rect x="15.9" y="1621" width="2.3" height="15.0" fill="rgb(220,193,53)" rx="2" ry="2" />
<text  x="18.86" y="1631.5" ></text>
</g>
<g >
<title>uv__run_timers (268,500,000 samples, 0.04%)</title><rect x="12.8" y="1525" width="0.5" height="15.0" fill="rgb(213,52,31)" rx="2" ry="2" />
<text  x="15.80" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (142,750,000 samples, 0.02%)</title><rect x="13.5" y="853" width="0.3" height="15.0" fill="rgb(251,54,4)" rx="2" ry="2" />
<text  x="16.52" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (225,750,000 samples, 0.03%)</title><rect x="13.5" y="1461" width="0.4" height="15.0" fill="rgb(210,92,8)" rx="2" ry="2" />
<text  x="16.45" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (167,250,000 samples, 0.02%)</title><rect x="13.5" y="1013" width="0.3" height="15.0" fill="rgb(218,1,50)" rx="2" ry="2" />
<text  x="16.51" y="1023.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (274,250,000 samples, 0.04%)</title><rect x="14.9" y="1365" width="0.4" height="15.0" fill="rgb(243,160,2)" rx="2" ry="2" />
<text  x="17.87" y="1375.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (271,500,000 samples, 0.04%)</title><rect x="17.0" y="1349" width="0.5" height="15.0" fill="rgb(243,143,45)" rx="2" ry="2" />
<text  x="19.97" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (72,500,000 samples, 0.01%)</title><rect x="13.6" y="165" width="0.1" height="15.0" fill="rgb(219,217,49)" rx="2" ry="2" />
<text  x="16.57" y="175.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (83,470,750,000 samples, 12.42%)</title><rect x="1043.4" y="1589" width="146.5" height="15.0" fill="rgb(238,71,53)" rx="2" ry="2" />
<text  x="1046.39" y="1599.5" >x86_64_start_kernel</text>
</g>
<g >
<title>perf_mmap__push (320,500,000 samples, 0.05%)</title><rect x="14.8" y="1509" width="0.6" height="15.0" fill="rgb(216,19,49)" rx="2" ry="2" />
<text  x="17.79" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (112,750,000 samples, 0.02%)</title><rect x="13.5" y="549" width="0.2" height="15.0" fill="rgb(218,79,8)" rx="2" ry="2" />
<text  x="16.54" y="559.5" ></text>
</g>
<g >
<title>[perf-2123.map] (236,250,000 samples, 0.04%)</title><rect x="11.6" y="1109" width="0.4" height="15.0" fill="rgb(229,144,0)" rx="2" ry="2" />
<text  x="14.61" y="1119.5" ></text>
</g>
<g >
<title>[perf-2123.map] (94,000,000 samples, 0.01%)</title><rect x="11.8" y="853" width="0.2" height="15.0" fill="rgb(213,80,23)" rx="2" ry="2" />
<text  x="14.84" y="863.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;,  (235,500,000 samples, 0.04%)</title><rect x="13.4" y="1477" width="0.5" height="15.0" fill="rgb(222,65,0)" rx="2" ry="2" />
<text  x="16.44" y="1487.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (83,458,250,000 samples, 12.42%)</title><rect x="1043.4" y="1429" width="146.5" height="15.0" fill="rgb(227,24,54)" rx="2" ry="2" />
<text  x="1046.39" y="1439.5" >cpuidle_enter_state</text>
</g>
<g >
<title>v8::internal::compiler::PipelineImpl::SelectInstructions (58,750,000 samples, 0.01%)</title><rect x="10.9" y="1493" width="0.1" height="15.0" fill="rgb(249,90,52)" rx="2" ry="2" />
<text  x="13.93" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (122,750,000 samples, 0.02%)</title><rect x="13.5" y="661" width="0.2" height="15.0" fill="rgb(247,100,45)" rx="2" ry="2" />
<text  x="16.53" y="671.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (288,500,000 samples, 0.04%)</title><rect x="17.0" y="1365" width="0.5" height="15.0" fill="rgb(239,47,54)" rx="2" ry="2" />
<text  x="19.97" y="1375.5" ></text>
</g>
<g >
<title>v8::Function::Call (84,250,000 samples, 0.01%)</title><rect x="11.4" y="1397" width="0.1" height="15.0" fill="rgb(240,174,53)" rx="2" ry="2" />
<text  x="14.37" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (121,250,000 samples, 0.02%)</title><rect x="13.5" y="629" width="0.2" height="15.0" fill="rgb(225,54,31)" rx="2" ry="2" />
<text  x="16.53" y="639.5" ></text>
</g>
<g >
<title>arch_call_rest_init (83,470,750,000 samples, 12.42%)</title><rect x="1043.4" y="1541" width="146.5" height="15.0" fill="rgb(224,31,8)" rx="2" ry="2" />
<text  x="1046.39" y="1551.5" >arch_call_rest_init</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (193,500,000 samples, 0.03%)</title><rect x="13.5" y="1237" width="0.3" height="15.0" fill="rgb(252,202,47)" rx="2" ry="2" />
<text  x="16.48" y="1247.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (293,500,000 samples, 0.04%)</title><rect x="11.5" y="1349" width="0.5" height="15.0" fill="rgb(232,109,15)" rx="2" ry="2" />
<text  x="14.52" y="1359.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (241,000,000 samples, 0.04%)</title><rect x="12.3" y="1413" width="0.4" height="15.0" fill="rgb(249,115,29)" rx="2" ry="2" />
<text  x="15.25" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (177,000,000 samples, 0.03%)</title><rect x="13.5" y="1109" width="0.3" height="15.0" fill="rgb(246,220,12)" rx="2" ry="2" />
<text  x="16.50" y="1119.5" ></text>
</g>
<g >
<title>[perf-1052.map] (73,500,000 samples, 0.01%)</title><rect x="12.3" y="1173" width="0.1" height="15.0" fill="rgb(254,84,32)" rx="2" ry="2" />
<text  x="15.29" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (91,750,000 samples, 0.01%)</title><rect x="13.6" y="405" width="0.1" height="15.0" fill="rgb(209,223,39)" rx="2" ry="2" />
<text  x="16.55" y="415.5" ></text>
</g>
<g >
<title>[perf-1052.map] (80,000,000 samples, 0.01%)</title><rect x="12.3" y="1221" width="0.1" height="15.0" fill="rgb(247,10,13)" rx="2" ry="2" />
<text  x="15.28" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (90,000,000 samples, 0.01%)</title><rect x="13.6" y="373" width="0.1" height="15.0" fill="rgb(232,175,34)" rx="2" ry="2" />
<text  x="16.56" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (152,000,000 samples, 0.02%)</title><rect x="13.5" y="869" width="0.3" height="15.0" fill="rgb(238,160,25)" rx="2" ry="2" />
<text  x="16.52" y="879.5" ></text>
</g>
<g >
<title>uv_run (1,241,250,000 samples, 0.18%)</title><rect x="11.1" y="1541" width="2.2" height="15.0" fill="rgb(223,135,6)" rx="2" ry="2" />
<text  x="14.09" y="1551.5" ></text>
</g>
<g >
<title>record__pushfn (318,750,000 samples, 0.05%)</title><rect x="14.8" y="1493" width="0.6" height="15.0" fill="rgb(247,130,15)" rx="2" ry="2" />
<text  x="17.79" y="1503.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (353,000,000 samples, 0.05%)</title><rect x="16.9" y="1429" width="0.7" height="15.0" fill="rgb(230,159,17)" rx="2" ry="2" />
<text  x="19.94" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (170,000,000 samples, 0.03%)</title><rect x="13.5" y="1045" width="0.3" height="15.0" fill="rgb(212,216,14)" rx="2" ry="2" />
<text  x="16.50" y="1055.5" ></text>
</g>
<g >
<title>node::Environment::RunTimers (266,750,000 samples, 0.04%)</title><rect x="12.8" y="1509" width="0.5" height="15.0" fill="rgb(215,206,16)" rx="2" ry="2" />
<text  x="15.80" y="1519.5" ></text>
</g>
<g >
<title>[perf-2123.map] (107,500,000 samples, 0.02%)</title><rect x="11.8" y="869" width="0.2" height="15.0" fill="rgb(235,171,18)" rx="2" ry="2" />
<text  x="14.82" y="879.5" ></text>
</g>
<g >
<title>[perf-2123.map] (251,250,000 samples, 0.04%)</title><rect x="11.6" y="1221" width="0.4" height="15.0" fill="rgb(213,221,4)" rx="2" ry="2" />
<text  x="14.59" y="1231.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (84,000,000 samples, 0.01%)</title><rect x="11.4" y="1381" width="0.1" height="15.0" fill="rgb(237,143,23)" rx="2" ry="2" />
<text  x="14.37" y="1391.5" ></text>
</g>
<g >
<title>[perf-2123.map] (82,500,000 samples, 0.01%)</title><rect x="11.9" y="837" width="0.1" height="15.0" fill="rgb(237,124,9)" rx="2" ry="2" />
<text  x="14.86" y="847.5" ></text>
</g>
<g >
<title>[perf-2123.map] (127,750,000 samples, 0.02%)</title><rect x="11.8" y="901" width="0.2" height="15.0" fill="rgb(222,175,54)" rx="2" ry="2" />
<text  x="14.78" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (176,250,000 samples, 0.03%)</title><rect x="13.5" y="1077" width="0.3" height="15.0" fill="rgb(210,78,39)" rx="2" ry="2" />
<text  x="16.50" y="1087.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (890,500,000 samples, 0.13%)</title><rect x="16.4" y="1525" width="1.5" height="15.0" fill="rgb(242,52,17)" rx="2" ry="2" />
<text  x="19.36" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (190,500,000 samples, 0.03%)</title><rect x="13.5" y="1189" width="0.3" height="15.0" fill="rgb(212,110,51)" rx="2" ry="2" />
<text  x="16.49" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (79,500,000 samples, 0.01%)</title><rect x="13.6" y="245" width="0.1" height="15.0" fill="rgb(240,187,6)" rx="2" ry="2" />
<text  x="16.56" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (136,750,000 samples, 0.02%)</title><rect x="13.5" y="789" width="0.3" height="15.0" fill="rgb(250,93,16)" rx="2" ry="2" />
<text  x="16.52" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (57,750,000 samples, 0.01%)</title><rect x="13.6" y="37" width="0.1" height="15.0" fill="rgb(238,81,30)" rx="2" ry="2" />
<text  x="16.58" y="47.5" ></text>
</g>
<g >
<title>main (360,250,000 samples, 0.05%)</title><rect x="14.7" y="1589" width="0.7" height="15.0" fill="rgb(224,191,13)" rx="2" ry="2" />
<text  x="17.73" y="1599.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (252,000,000 samples, 0.04%)</title><rect x="12.8" y="1477" width="0.5" height="15.0" fill="rgb(205,113,17)" rx="2" ry="2" />
<text  x="15.82" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (121,750,000 samples, 0.02%)</title><rect x="13.5" y="645" width="0.2" height="15.0" fill="rgb(234,93,54)" rx="2" ry="2" />
<text  x="16.53" y="655.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (667,432,000,000 samples, 99.30%)</title><rect x="18.2" y="1605" width="1171.7" height="15.0" fill="rgb(246,51,35)" rx="2" ry="2" />
<text  x="21.20" y="1615.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (176,750,000 samples, 0.03%)</title><rect x="13.5" y="1093" width="0.3" height="15.0" fill="rgb(252,34,32)" rx="2" ry="2" />
<text  x="16.50" y="1103.5" ></text>
</g>
<g >
<title>[perf-1052.map] (90,500,000 samples, 0.01%)</title><rect x="12.3" y="1285" width="0.1" height="15.0" fill="rgb(217,38,15)" rx="2" ry="2" />
<text  x="15.26" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (100,000,000 samples, 0.01%)</title><rect x="13.6" y="469" width="0.1" height="15.0" fill="rgb(214,46,44)" rx="2" ry="2" />
<text  x="16.55" y="479.5" ></text>
</g>
<g >
<title>[perf-1794.map] (71,250,000 samples, 0.01%)</title><rect x="13.0" y="1413" width="0.1" height="15.0" fill="rgb(248,49,25)" rx="2" ry="2" />
<text  x="15.96" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (136,500,000 samples, 0.02%)</title><rect x="13.5" y="741" width="0.3" height="15.0" fill="rgb(211,66,54)" rx="2" ry="2" />
<text  x="16.52" y="751.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (293,500,000 samples, 0.04%)</title><rect x="11.5" y="1333" width="0.5" height="15.0" fill="rgb(234,34,1)" rx="2" ry="2" />
<text  x="14.52" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (218,000,000 samples, 0.03%)</title><rect x="13.5" y="1381" width="0.3" height="15.0" fill="rgb(238,130,36)" rx="2" ry="2" />
<text  x="16.47" y="1391.5" ></text>
</g>
<g >
<title>call_cpuidle (83,458,250,000 samples, 12.42%)</title><rect x="1043.4" y="1461" width="146.5" height="15.0" fill="rgb(214,49,40)" rx="2" ry="2" />
<text  x="1046.39" y="1471.5" >call_cpuidle</text>
</g>
<g >
<title>node::(anonymous namespace)::PlatformWorkerThread (255,750,000 samples, 0.04%)</title><rect x="10.6" y="1589" width="0.5" height="15.0" fill="rgb(221,97,27)" rx="2" ry="2" />
<text  x="13.64" y="1599.5" ></text>
</g>
<g >
<title>[perf-1794.map] (67,500,000 samples, 0.01%)</title><rect x="13.0" y="1397" width="0.1" height="15.0" fill="rgb(211,169,46)" rx="2" ry="2" />
<text  x="15.96" y="1407.5" ></text>
</g>
<g >
<title>[perf-2123.map] (245,250,000 samples, 0.04%)</title><rect x="11.6" y="1189" width="0.4" height="15.0" fill="rgb(222,23,20)" rx="2" ry="2" />
<text  x="14.60" y="1199.5" ></text>
</g>
<g >
<title>[perf-2123.map] (228,750,000 samples, 0.03%)</title><rect x="11.6" y="1029" width="0.4" height="15.0" fill="rgb(237,195,36)" rx="2" ry="2" />
<text  x="14.63" y="1039.5" ></text>
</g>
<g >
<title>uv__read (266,000,000 samples, 0.04%)</title><rect x="12.2" y="1493" width="0.5" height="15.0" fill="rgb(229,92,9)" rx="2" ry="2" />
<text  x="15.23" y="1503.5" ></text>
</g>
<g >
<title>uv__work_done (469,750,000 samples, 0.07%)</title><rect x="11.4" y="1493" width="0.8" height="15.0" fill="rgb(226,104,41)" rx="2" ry="2" />
<text  x="14.36" y="1503.5" ></text>
</g>
<g >
<title>ksys_write (312,000,000 samples, 0.05%)</title><rect x="14.8" y="1413" width="0.5" height="15.0" fill="rgb(240,38,4)" rx="2" ry="2" />
<text  x="17.80" y="1423.5" ></text>
</g>
<g >
<title>[perf-2134.map] (60,750,000 samples, 0.01%)</title><rect x="13.2" y="1381" width="0.1" height="15.0" fill="rgb(217,23,45)" rx="2" ry="2" />
<text  x="16.16" y="1391.5" ></text>
</g>
<g >
<title>[perf-2123.map] (138,750,000 samples, 0.02%)</title><rect x="11.8" y="917" width="0.2" height="15.0" fill="rgb(250,68,5)" rx="2" ry="2" />
<text  x="14.77" y="927.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (91,500,000 samples, 0.01%)</title><rect x="15.0" y="1301" width="0.2" height="15.0" fill="rgb(237,151,39)" rx="2" ry="2" />
<text  x="18.03" y="1311.5" ></text>
</g>
<g >
<title>v8::internal::Execution::TryRunMicrotasks (293,750,000 samples, 0.04%)</title><rect x="11.5" y="1365" width="0.5" height="15.0" fill="rgb(248,67,11)" rx="2" ry="2" />
<text  x="14.52" y="1375.5" ></text>
</g>
<g >
<title>Builtins_AsyncFunctionAwaitResolveClosure (289,250,000 samples, 0.04%)</title><rect x="11.5" y="1269" width="0.5" height="15.0" fill="rgb(237,212,42)" rx="2" ry="2" />
<text  x="14.52" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (191,250,000 samples, 0.03%)</title><rect x="13.5" y="1205" width="0.3" height="15.0" fill="rgb(241,209,18)" rx="2" ry="2" />
<text  x="16.49" y="1215.5" ></text>
</g>
<g >
<title>[perf-2123.map] (177,750,000 samples, 0.03%)</title><rect x="11.7" y="949" width="0.3" height="15.0" fill="rgb(214,220,27)" rx="2" ry="2" />
<text  x="14.71" y="959.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (102,750,000 samples, 0.02%)</title><rect x="12.5" y="1365" width="0.2" height="15.0" fill="rgb(253,161,51)" rx="2" ry="2" />
<text  x="15.49" y="1375.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (134,750,000 samples, 0.02%)</title><rect x="12.3" y="1349" width="0.2" height="15.0" fill="rgb(207,59,19)" rx="2" ry="2" />
<text  x="15.26" y="1359.5" ></text>
</g>
<g >
<title>[ssm-document-worker] (133,250,000 samples, 0.02%)</title><rect x="17.1" y="1301" width="0.2" height="15.0" fill="rgb(220,55,28)" rx="2" ry="2" />
<text  x="20.09" y="1311.5" ></text>
</g>
<g >
<title>start_kernel (83,470,750,000 samples, 12.42%)</title><rect x="1043.4" y="1557" width="146.5" height="15.0" fill="rgb(211,21,48)" rx="2" ry="2" />
<text  x="1046.39" y="1567.5" >start_kernel</text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::RunMicrotasks (294,000,000 samples, 0.04%)</title><rect x="11.5" y="1381" width="0.5" height="15.0" fill="rgb(248,184,53)" rx="2" ry="2" />
<text  x="14.52" y="1391.5" ></text>
</g>
</g>
</svg>
