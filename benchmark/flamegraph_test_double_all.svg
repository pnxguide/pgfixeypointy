<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1638" onload="init(evt)" viewBox="0 0 1200 1638" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="1638.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="1621" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="1621" > </text>
<g id="frames">
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (33,250,000 samples, 0.03%)</title><rect x="12.7" y="1189" width="0.3" height="15.0" fill="rgb(219,211,44)" rx="2" ry="2" />
<text  x="15.71" y="1199.5" ></text>
</g>
<g >
<title>[libc.so.6] (13,750,000 samples, 0.01%)</title><rect x="13.3" y="1541" width="0.1" height="15.0" fill="rgb(228,9,38)" rx="2" ry="2" />
<text  x="16.26" y="1551.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (47,250,000 samples, 0.04%)</title><rect x="14.1" y="1301" width="0.4" height="15.0" fill="rgb(237,5,13)" rx="2" ry="2" />
<text  x="17.08" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,500,000 samples, 0.01%)</title><rect x="12.8" y="309" width="0.1" height="15.0" fill="rgb(247,23,36)" rx="2" ry="2" />
<text  x="15.79" y="319.5" ></text>
</g>
<g >
<title>__folio_alloc (19,750,000 samples, 0.02%)</title><rect x="40.9" y="1413" width="0.2" height="15.0" fill="rgb(224,5,52)" rx="2" ry="2" />
<text  x="43.87" y="1423.5" ></text>
</g>
<g >
<title>new_sync_read (55,250,000 samples, 0.05%)</title><rect x="28.9" y="1477" width="0.5" height="15.0" fill="rgb(215,220,49)" rx="2" ry="2" />
<text  x="31.86" y="1487.5" ></text>
</g>
<g >
<title>perf (54,000,000 samples, 0.05%)</title><rect x="14.0" y="1573" width="0.6" height="15.0" fill="rgb(243,67,8)" rx="2" ry="2" />
<text  x="17.02" y="1583.5" ></text>
</g>
<g >
<title>mbvalidate (260,750,000 samples, 0.22%)</title><rect x="54.5" y="1557" width="2.6" height="15.0" fill="rgb(215,216,47)" rx="2" ry="2" />
<text  x="57.51" y="1567.5" ></text>
</g>
<g >
<title>__do_munmap (177,000,000 samples, 0.15%)</title><rect x="49.3" y="1461" width="1.8" height="15.0" fill="rgb(224,46,21)" rx="2" ry="2" />
<text  x="52.32" y="1471.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (51,500,000 samples, 0.04%)</title><rect x="14.0" y="1477" width="0.6" height="15.0" fill="rgb(226,219,26)" rx="2" ry="2" />
<text  x="17.04" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (32,250,000 samples, 0.03%)</title><rect x="12.7" y="1125" width="0.3" height="15.0" fill="rgb(239,121,23)" rx="2" ry="2" />
<text  x="15.72" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (28,000,000 samples, 0.02%)</title><rect x="12.7" y="965" width="0.3" height="15.0" fill="rgb(246,58,24)" rx="2" ry="2" />
<text  x="15.73" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,500,000 samples, 0.01%)</title><rect x="12.8" y="405" width="0.1" height="15.0" fill="rgb(225,112,21)" rx="2" ry="2" />
<text  x="15.78" y="415.5" ></text>
</g>
<g >
<title>v8::Function::Call (13,250,000 samples, 0.01%)</title><rect x="11.9" y="1317" width="0.1" height="15.0" fill="rgb(219,92,7)" rx="2" ry="2" />
<text  x="14.90" y="1327.5" ></text>
</g>
<g >
<title>[perf-2123.map] (11,000,000 samples, 0.01%)</title><rect x="11.6" y="853" width="0.1" height="15.0" fill="rgb(245,36,20)" rx="2" ry="2" />
<text  x="14.57" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (32,250,000 samples, 0.03%)</title><rect x="12.7" y="1077" width="0.3" height="15.0" fill="rgb(242,144,9)" rx="2" ry="2" />
<text  x="15.72" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,500,000 samples, 0.02%)</title><rect x="12.7" y="933" width="0.3" height="15.0" fill="rgb(254,36,27)" rx="2" ry="2" />
<text  x="15.73" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,500,000 samples, 0.02%)</title><rect x="12.7" y="725" width="0.3" height="15.0" fill="rgb(221,193,54)" rx="2" ry="2" />
<text  x="15.75" y="735.5" ></text>
</g>
<g >
<title>InotifyBackend::handleEvents (52,250,000 samples, 0.04%)</title><rect x="12.6" y="1509" width="0.6" height="15.0" fill="rgb(237,1,50)" rx="2" ry="2" />
<text  x="15.65" y="1519.5" ></text>
</g>
<g >
<title>free_pgtables (10,500,000 samples, 0.01%)</title><rect x="50.0" y="1429" width="0.1" height="15.0" fill="rgb(239,55,13)" rx="2" ry="2" />
<text  x="53.01" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,000,000 samples, 0.01%)</title><rect x="12.8" y="277" width="0.1" height="15.0" fill="rgb(254,129,5)" rx="2" ry="2" />
<text  x="15.79" y="287.5" ></text>
</g>
<g >
<title>__alloc_pages (19,500,000 samples, 0.02%)</title><rect x="40.9" y="1397" width="0.2" height="15.0" fill="rgb(235,8,21)" rx="2" ry="2" />
<text  x="43.87" y="1407.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (154,000,000 samples, 0.13%)</title><rect x="11.0" y="1525" width="1.5" height="15.0" fill="rgb(207,16,8)" rx="2" ry="2" />
<text  x="13.97" y="1535.5" ></text>
</g>
<g >
<title>[libc.so.6] (147,750,000 samples, 0.13%)</title><rect x="24.9" y="1525" width="1.5" height="15.0" fill="rgb(232,157,24)" rx="2" ry="2" />
<text  x="27.88" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (17,500,000 samples, 0.01%)</title><rect x="12.8" y="469" width="0.1" height="15.0" fill="rgb(213,137,31)" rx="2" ry="2" />
<text  x="15.77" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (35,000,000 samples, 0.03%)</title><rect x="12.7" y="1253" width="0.4" height="15.0" fill="rgb(206,60,6)" rx="2" ry="2" />
<text  x="15.71" y="1263.5" ></text>
</g>
<g >
<title>[libc.so.6] (50,250,000 samples, 0.04%)</title><rect x="15.9" y="1557" width="0.5" height="15.0" fill="rgb(235,80,6)" rx="2" ry="2" />
<text  x="18.94" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (32,250,000 samples, 0.03%)</title><rect x="12.7" y="1093" width="0.3" height="15.0" fill="rgb(223,99,40)" rx="2" ry="2" />
<text  x="15.72" y="1103.5" ></text>
</g>
<g >
<title>__send (305,250,000 samples, 0.26%)</title><rect x="29.4" y="1557" width="3.1" height="15.0" fill="rgb(241,8,43)" rx="2" ry="2" />
<text  x="32.43" y="1567.5" ></text>
</g>
<g >
<title>__filemap_get_folio (19,500,000 samples, 0.02%)</title><rect x="14.2" y="1221" width="0.2" height="15.0" fill="rgb(226,201,22)" rx="2" ry="2" />
<text  x="17.22" y="1231.5" ></text>
</g>
<g >
<title>do_user_addr_fault (42,750,000 samples, 0.04%)</title><rect x="101.1" y="1509" width="0.4" height="15.0" fill="rgb(227,71,49)" rx="2" ry="2" />
<text  x="104.09" y="1519.5" ></text>
</g>
<g >
<title>new_sync_write (47,750,000 samples, 0.04%)</title><rect x="14.1" y="1333" width="0.5" height="15.0" fill="rgb(220,166,18)" rx="2" ry="2" />
<text  x="17.07" y="1343.5" ></text>
</g>
<g >
<title>[perf-2123.map] (33,250,000 samples, 0.03%)</title><rect x="11.4" y="1093" width="0.3" height="15.0" fill="rgb(242,32,54)" rx="2" ry="2" />
<text  x="14.36" y="1103.5" ></text>
</g>
<g >
<title>psql (7,111,750,000 samples, 6.03%)</title><rect x="37.7" y="1573" width="71.1" height="15.0" fill="rgb(229,59,24)" rx="2" ry="2" />
<text  x="40.69" y="1583.5" >psql</text>
</g>
<g >
<title>unmap_page_range (23,750,000 samples, 0.02%)</title><rect x="50.8" y="1397" width="0.3" height="15.0" fill="rgb(205,89,38)" rx="2" ry="2" />
<text  x="53.84" y="1407.5" ></text>
</g>
<g >
<title>[perf-1052.map] (10,250,000 samples, 0.01%)</title><rect x="11.9" y="1221" width="0.1" height="15.0" fill="rgb(208,10,8)" rx="2" ry="2" />
<text  x="14.91" y="1231.5" ></text>
</g>
<g >
<title>__alloc_skb (24,000,000 samples, 0.02%)</title><rect x="29.9" y="1413" width="0.2" height="15.0" fill="rgb(252,219,10)" rx="2" ry="2" />
<text  x="32.86" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="12.8" y="165" width="0.1" height="15.0" fill="rgb(232,129,20)" rx="2" ry="2" />
<text  x="15.79" y="175.5" ></text>
</g>
<g >
<title>handle_mm_fault (11,000,000 samples, 0.01%)</title><rect x="51.5" y="1477" width="0.1" height="15.0" fill="rgb(206,183,45)" rx="2" ry="2" />
<text  x="54.49" y="1487.5" ></text>
</g>
<g >
<title>_find_next_bit (15,000,000 samples, 0.01%)</title><rect x="1188.6" y="1157" width="0.1" height="15.0" fill="rgb(242,52,51)" rx="2" ry="2" />
<text  x="1191.57" y="1167.5" ></text>
</g>
<g >
<title>cpuidle_enter (14,602,750,000 samples, 12.37%)</title><rect x="1043.9" y="1397" width="146.0" height="15.0" fill="rgb(221,85,49)" rx="2" ry="2" />
<text  x="1046.89" y="1407.5" >cpuidle_enter</text>
</g>
<g >
<title>node::InternalCallbackScope::Close (13,250,000 samples, 0.01%)</title><rect x="11.9" y="1333" width="0.1" height="15.0" fill="rgb(223,109,42)" rx="2" ry="2" />
<text  x="14.90" y="1343.5" ></text>
</g>
<g >
<title>exc_page_fault (155,250,000 samples, 0.13%)</title><rect x="39.7" y="1525" width="1.6" height="15.0" fill="rgb(226,90,11)" rx="2" ry="2" />
<text  x="42.74" y="1535.5" ></text>
</g>
<g >
<title>unmap_vmas (26,500,000 samples, 0.02%)</title><rect x="50.8" y="1429" width="0.3" height="15.0" fill="rgb(220,12,42)" rx="2" ry="2" />
<text  x="53.82" y="1439.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (11,250,000 samples, 0.01%)</title><rect x="11.2" y="1301" width="0.1" height="15.0" fill="rgb(235,222,48)" rx="2" ry="2" />
<text  x="14.19" y="1311.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,500,000 samples, 0.03%)</title><rect x="11.4" y="1013" width="0.3" height="15.0" fill="rgb(207,175,41)" rx="2" ry="2" />
<text  x="14.38" y="1023.5" ></text>
</g>
<g >
<title>call_timer_fn (36,000,000 samples, 0.03%)</title><rect x="1189.5" y="1221" width="0.3" height="15.0" fill="rgb(236,189,20)" rx="2" ry="2" />
<text  x="1192.47" y="1231.5" ></text>
</g>
<g >
<title>[perf-2123.map] (20,000,000 samples, 0.02%)</title><rect x="11.5" y="933" width="0.2" height="15.0" fill="rgb(230,93,28)" rx="2" ry="2" />
<text  x="14.48" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (34,750,000 samples, 0.03%)</title><rect x="12.7" y="1221" width="0.4" height="15.0" fill="rgb(253,212,45)" rx="2" ry="2" />
<text  x="15.71" y="1231.5" ></text>
</g>
<g >
<title>mod_timer (18,250,000 samples, 0.02%)</title><rect x="1189.6" y="1189" width="0.2" height="15.0" fill="rgb(243,24,3)" rx="2" ry="2" />
<text  x="1192.61" y="1199.5" ></text>
</g>
<g >
<title>uv__work_done (65,000,000 samples, 0.06%)</title><rect x="11.2" y="1445" width="0.6" height="15.0" fill="rgb(213,123,18)" rx="2" ry="2" />
<text  x="14.18" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,500,000 samples, 0.03%)</title><rect x="12.7" y="1365" width="0.4" height="15.0" fill="rgb(251,103,47)" rx="2" ry="2" />
<text  x="15.70" y="1375.5" ></text>
</g>
<g >
<title>[perf-2123.map] (26,250,000 samples, 0.02%)</title><rect x="11.4" y="965" width="0.3" height="15.0" fill="rgb(205,57,14)" rx="2" ry="2" />
<text  x="14.43" y="975.5" ></text>
</g>
<g >
<title>filemap_add_folio (12,500,000 samples, 0.01%)</title><rect x="14.2" y="1205" width="0.2" height="15.0" fill="rgb(214,106,1)" rx="2" ry="2" />
<text  x="17.23" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (32,750,000 samples, 0.03%)</title><rect x="12.7" y="1157" width="0.3" height="15.0" fill="rgb(221,160,24)" rx="2" ry="2" />
<text  x="15.72" y="1167.5" ></text>
</g>
<g >
<title>irq_exit_rcu (346,000,000 samples, 0.29%)</title><rect x="1186.4" y="1301" width="3.5" height="15.0" fill="rgb(213,38,4)" rx="2" ry="2" />
<text  x="1189.42" y="1311.5" ></text>
</g>
<g >
<title>native_safe_halt (14,550,250,000 samples, 12.33%)</title><rect x="1044.4" y="1349" width="145.5" height="15.0" fill="rgb(221,33,27)" rx="2" ry="2" />
<text  x="1047.42" y="1359.5" >native_safe_halt</text>
</g>
<g >
<title>[perf-2123.map] (28,000,000 samples, 0.02%)</title><rect x="11.4" y="997" width="0.3" height="15.0" fill="rgb(206,76,32)" rx="2" ry="2" />
<text  x="14.41" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19,000,000 samples, 0.02%)</title><rect x="12.8" y="533" width="0.2" height="15.0" fill="rgb(238,141,40)" rx="2" ry="2" />
<text  x="15.76" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (28,000,000 samples, 0.02%)</title><rect x="12.7" y="949" width="0.3" height="15.0" fill="rgb(230,57,16)" rx="2" ry="2" />
<text  x="15.73" y="959.5" ></text>
</g>
<g >
<title>handle_pte_fault (102,250,000 samples, 0.09%)</title><rect x="40.2" y="1461" width="1.0" height="15.0" fill="rgb(247,114,3)" rx="2" ry="2" />
<text  x="43.23" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (34,750,000 samples, 0.03%)</title><rect x="12.7" y="1205" width="0.4" height="15.0" fill="rgb(244,146,8)" rx="2" ry="2" />
<text  x="15.71" y="1215.5" ></text>
</g>
<g >
<title>idle_cpu (11,250,000 samples, 0.01%)</title><rect x="1188.7" y="1157" width="0.1" height="15.0" fill="rgb(239,213,35)" rx="2" ry="2" />
<text  x="1191.73" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (16,500,000 samples, 0.01%)</title><rect x="12.8" y="389" width="0.1" height="15.0" fill="rgb(231,47,44)" rx="2" ry="2" />
<text  x="15.78" y="399.5" ></text>
</g>
<g >
<title>[postgres] (30,750,000 samples, 0.03%)</title><rect x="16.4" y="1557" width="0.4" height="15.0" fill="rgb(244,170,26)" rx="2" ry="2" />
<text  x="19.45" y="1567.5" ></text>
</g>
<g >
<title>pagecache_get_page (19,500,000 samples, 0.02%)</title><rect x="14.2" y="1237" width="0.2" height="15.0" fill="rgb(216,17,44)" rx="2" ry="2" />
<text  x="17.22" y="1247.5" ></text>
</g>
<g >
<title>__run_timers.part.0 (52,000,000 samples, 0.04%)</title><rect x="1189.3" y="1237" width="0.5" height="15.0" fill="rgb(221,135,33)" rx="2" ry="2" />
<text  x="1192.33" y="1247.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (28,750,000 samples, 0.02%)</title><rect x="12.2" y="1429" width="0.3" height="15.0" fill="rgb(234,224,3)" rx="2" ry="2" />
<text  x="15.22" y="1439.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (36,500,000 samples, 0.03%)</title><rect x="54.0" y="1477" width="0.3" height="15.0" fill="rgb(227,208,29)" rx="2" ry="2" />
<text  x="56.96" y="1487.5" ></text>
</g>
<g >
<title>cpuidle_enter (93,440,250,000 samples, 79.16%)</title><rect x="109.3" y="1461" width="934.2" height="15.0" fill="rgb(222,193,25)" rx="2" ry="2" />
<text  x="112.34" y="1471.5" >cpuidle_enter</text>
</g>
<g >
<title>__sys_sendto (296,500,000 samples, 0.25%)</title><rect x="29.5" y="1493" width="3.0" height="15.0" fill="rgb(239,163,52)" rx="2" ry="2" />
<text  x="32.49" y="1503.5" ></text>
</g>
<g >
<title>write (51,000,000 samples, 0.04%)</title><rect x="14.0" y="1429" width="0.6" height="15.0" fill="rgb(216,160,6)" rx="2" ry="2" />
<text  x="17.04" y="1439.5" ></text>
</g>
<g >
<title>do_sys_poll (43,000,000 samples, 0.04%)</title><rect x="53.9" y="1493" width="0.5" height="15.0" fill="rgb(230,208,1)" rx="2" ry="2" />
<text  x="56.93" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,750,000 samples, 0.03%)</title><rect x="12.7" y="1269" width="0.4" height="15.0" fill="rgb(216,145,34)" rx="2" ry="2" />
<text  x="15.71" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (11,250,000 samples, 0.01%)</title><rect x="10.1" y="1557" width="0.1" height="15.0" fill="rgb(222,103,31)" rx="2" ry="2" />
<text  x="13.11" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (34,750,000 samples, 0.03%)</title><rect x="12.7" y="1237" width="0.4" height="15.0" fill="rgb(252,46,33)" rx="2" ry="2" />
<text  x="15.71" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (25,000,000 samples, 0.02%)</title><rect x="12.7" y="837" width="0.3" height="15.0" fill="rgb(252,219,10)" rx="2" ry="2" />
<text  x="15.74" y="847.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (57,000,000 samples, 0.05%)</title><rect x="28.9" y="1509" width="0.5" height="15.0" fill="rgb(231,218,5)" rx="2" ry="2" />
<text  x="31.85" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (21,000,000 samples, 0.02%)</title><rect x="12.8" y="581" width="0.2" height="15.0" fill="rgb(251,56,9)" rx="2" ry="2" />
<text  x="15.76" y="591.5" ></text>
</g>
<g >
<title>main (54,000,000 samples, 0.05%)</title><rect x="14.0" y="1541" width="0.6" height="15.0" fill="rgb(208,203,21)" rx="2" ry="2" />
<text  x="17.02" y="1551.5" ></text>
</g>
<g >
<title>do_syscall_64 (51,000,000 samples, 0.04%)</title><rect x="14.0" y="1397" width="0.6" height="15.0" fill="rgb(224,136,30)" rx="2" ry="2" />
<text  x="17.04" y="1407.5" ></text>
</g>
<g >
<title>sock_recvmsg (116,250,000 samples, 0.10%)</title><rect x="52.5" y="1461" width="1.2" height="15.0" fill="rgb(218,3,25)" rx="2" ry="2" />
<text  x="55.54" y="1471.5" ></text>
</g>
<g >
<title>pg_server_to_client (18,500,000 samples, 0.02%)</title><rect x="18.0" y="1525" width="0.2" height="15.0" fill="rgb(250,47,54)" rx="2" ry="2" />
<text  x="21.04" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,000,000 samples, 0.01%)</title><rect x="12.8" y="181" width="0.1" height="15.0" fill="rgb(235,169,51)" rx="2" ry="2" />
<text  x="15.79" y="191.5" ></text>
</g>
<g >
<title>skb_release_data (21,500,000 samples, 0.02%)</title><rect x="52.7" y="1397" width="0.3" height="15.0" fill="rgb(247,138,0)" rx="2" ry="2" />
<text  x="55.75" y="1407.5" ></text>
</g>
<g >
<title>[unknown] (91,250,000 samples, 0.08%)</title><rect x="17.7" y="1541" width="0.9" height="15.0" fill="rgb(205,84,20)" rx="2" ry="2" />
<text  x="20.73" y="1551.5" ></text>
</g>
<g >
<title>__libc_pread (60,250,000 samples, 0.05%)</title><rect x="28.8" y="1557" width="0.6" height="15.0" fill="rgb(234,129,32)" rx="2" ry="2" />
<text  x="31.83" y="1567.5" ></text>
</g>
<g >
<title>vm_area_dup (19,500,000 samples, 0.02%)</title><rect x="49.6" y="1429" width="0.2" height="15.0" fill="rgb(207,12,52)" rx="2" ry="2" />
<text  x="52.61" y="1439.5" ></text>
</g>
<g >
<title>[unknown] (1,207,000,000 samples, 1.02%)</title><rect x="16.8" y="1557" width="12.0" height="15.0" fill="rgb(206,31,17)" rx="2" ry="2" />
<text  x="19.75" y="1567.5" ></text>
</g>
<g >
<title>PQclear (25,500,000 samples, 0.02%)</title><rect x="47.6" y="1541" width="0.3" height="15.0" fill="rgb(219,170,37)" rx="2" ry="2" />
<text  x="50.60" y="1551.5" ></text>
</g>
<g >
<title>ext4_da_write_end (10,500,000 samples, 0.01%)</title><rect x="14.4" y="1269" width="0.1" height="15.0" fill="rgb(249,133,10)" rx="2" ry="2" />
<text  x="17.42" y="1279.5" ></text>
</g>
<g >
<title>[unknown] (13,000,000 samples, 0.01%)</title><rect x="37.5" y="1557" width="0.1" height="15.0" fill="rgb(241,147,0)" rx="2" ry="2" />
<text  x="40.51" y="1567.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (18,250,000 samples, 0.02%)</title><rect x="54.1" y="1397" width="0.1" height="15.0" fill="rgb(216,218,42)" rx="2" ry="2" />
<text  x="57.06" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (28,500,000 samples, 0.02%)</title><rect x="12.7" y="981" width="0.3" height="15.0" fill="rgb(224,10,49)" rx="2" ry="2" />
<text  x="15.73" y="991.5" ></text>
</g>
<g >
<title>cpuUsage.sh (43,750,000 samples, 0.04%)</title><rect x="10.3" y="1573" width="0.5" height="15.0" fill="rgb(220,62,33)" rx="2" ry="2" />
<text  x="13.35" y="1583.5" ></text>
</g>
<g >
<title>charge_memcg (11,750,000 samples, 0.01%)</title><rect x="40.6" y="1429" width="0.1" height="15.0" fill="rgb(218,188,51)" rx="2" ry="2" />
<text  x="43.57" y="1439.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::PerformCheckpoint (41,000,000 samples, 0.03%)</title><rect x="11.3" y="1349" width="0.4" height="15.0" fill="rgb(238,228,36)" rx="2" ry="2" />
<text  x="14.30" y="1359.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (41,000,000 samples, 0.03%)</title><rect x="11.3" y="1285" width="0.4" height="15.0" fill="rgb(244,77,6)" rx="2" ry="2" />
<text  x="14.30" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (18,750,000 samples, 0.02%)</title><rect x="12.8" y="517" width="0.2" height="15.0" fill="rgb(206,61,53)" rx="2" ry="2" />
<text  x="15.77" y="527.5" ></text>
</g>
<g >
<title>skb_copy_datagram_from_iter (10,500,000 samples, 0.01%)</title><rect x="29.6" y="1445" width="0.1" height="15.0" fill="rgb(244,192,26)" rx="2" ry="2" />
<text  x="32.64" y="1455.5" ></text>
</g>
<g >
<title>do_syscall_64 (300,750,000 samples, 0.25%)</title><rect x="29.5" y="1525" width="3.0" height="15.0" fill="rgb(222,113,11)" rx="2" ry="2" />
<text  x="32.48" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24,250,000 samples, 0.02%)</title><rect x="12.7" y="805" width="0.3" height="15.0" fill="rgb(238,190,18)" rx="2" ry="2" />
<text  x="15.74" y="815.5" ></text>
</g>
<g >
<title>filemap_read (54,250,000 samples, 0.05%)</title><rect x="28.9" y="1429" width="0.5" height="15.0" fill="rgb(218,142,17)" rx="2" ry="2" />
<text  x="31.87" y="1439.5" ></text>
</g>
<g >
<title>rcu_core_si (24,500,000 samples, 0.02%)</title><rect x="1186.5" y="1253" width="0.2" height="15.0" fill="rgb(222,118,32)" rx="2" ry="2" />
<text  x="1189.48" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,000,000 samples, 0.02%)</title><rect x="12.8" y="693" width="0.2" height="15.0" fill="rgb(232,83,25)" rx="2" ry="2" />
<text  x="15.75" y="703.5" ></text>
</g>
<g >
<title>uv__io_poll (107,750,000 samples, 0.09%)</title><rect x="11.0" y="1477" width="1.1" height="15.0" fill="rgb(205,196,15)" rx="2" ry="2" />
<text  x="14.05" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (30,000,000 samples, 0.03%)</title><rect x="12.7" y="1045" width="0.3" height="15.0" fill="rgb(253,85,0)" rx="2" ry="2" />
<text  x="15.72" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (10,250,000 samples, 0.01%)</title><rect x="12.8" y="37" width="0.1" height="15.0" fill="rgb(250,131,6)" rx="2" ry="2" />
<text  x="15.80" y="47.5" ></text>
</g>
<g >
<title>node::Environment::RunTimers (31,000,000 samples, 0.03%)</title><rect x="12.2" y="1461" width="0.3" height="15.0" fill="rgb(212,26,23)" rx="2" ry="2" />
<text  x="15.20" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (33,000,000 samples, 0.03%)</title><rect x="12.7" y="1173" width="0.3" height="15.0" fill="rgb(211,212,44)" rx="2" ry="2" />
<text  x="15.71" y="1183.5" ></text>
</g>
<g >
<title>swapper (108,099,000,000 samples, 91.58%)</title><rect x="109.3" y="1573" width="1080.7" height="15.0" fill="rgb(217,8,14)" rx="2" ry="2" />
<text  x="112.30" y="1583.5" >swapper</text>
</g>
<g >
<title>skb_release_head_state (11,250,000 samples, 0.01%)</title><rect x="53.0" y="1397" width="0.1" height="15.0" fill="rgb(243,167,51)" rx="2" ry="2" />
<text  x="55.96" y="1407.5" ></text>
</g>
<g >
<title>[psql] (19,500,000 samples, 0.02%)</title><rect x="49.0" y="1541" width="0.2" height="15.0" fill="rgb(236,130,14)" rx="2" ry="2" />
<text  x="52.00" y="1551.5" ></text>
</g>
<g >
<title>[ssm-agent-worker] (11,500,000 samples, 0.01%)</title><rect x="109.1" y="1509" width="0.1" height="15.0" fill="rgb(222,90,27)" rx="2" ry="2" />
<text  x="112.10" y="1519.5" ></text>
</g>
<g >
<title>[perf-2123.map] (13,500,000 samples, 0.01%)</title><rect x="11.5" y="885" width="0.2" height="15.0" fill="rgb(235,172,13)" rx="2" ry="2" />
<text  x="14.54" y="895.5" ></text>
</g>
<g >
<title>ps (21,750,000 samples, 0.02%)</title><rect x="37.5" y="1573" width="0.2" height="15.0" fill="rgb(214,222,54)" rx="2" ry="2" />
<text  x="40.48" y="1583.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (14,500,000 samples, 0.01%)</title><rect x="30.1" y="1381" width="0.2" height="15.0" fill="rgb(241,102,1)" rx="2" ry="2" />
<text  x="33.12" y="1391.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (38,500,000 samples, 0.03%)</title><rect x="50.4" y="1413" width="0.4" height="15.0" fill="rgb(237,139,31)" rx="2" ry="2" />
<text  x="53.40" y="1423.5" ></text>
</g>
<g >
<title>get_page_from_freelist (15,500,000 samples, 0.01%)</title><rect x="40.9" y="1381" width="0.2" height="15.0" fill="rgb(226,36,32)" rx="2" ry="2" />
<text  x="43.90" y="1391.5" ></text>
</g>
<g >
<title>SeqNext (38,250,000 samples, 0.03%)</title><rect x="15.5" y="1557" width="0.4" height="15.0" fill="rgb(239,99,5)" rx="2" ry="2" />
<text  x="18.55" y="1567.5" ></text>
</g>
<g >
<title>[unknown] (612,250,000 samples, 0.52%)</title><rect x="47.6" y="1557" width="6.1" height="15.0" fill="rgb(244,67,30)" rx="2" ry="2" />
<text  x="50.60" y="1567.5" ></text>
</g>
<g >
<title>AllocSetAlloc (44,000,000 samples, 0.04%)</title><rect x="16.8" y="1541" width="0.4" height="15.0" fill="rgb(214,215,54)" rx="2" ry="2" />
<text  x="19.75" y="1551.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (112,750,000 samples, 0.10%)</title><rect x="52.6" y="1429" width="1.1" height="15.0" fill="rgb(210,183,41)" rx="2" ry="2" />
<text  x="55.58" y="1439.5" ></text>
</g>
<g >
<title>v8::Function::Call (11,250,000 samples, 0.01%)</title><rect x="11.2" y="1349" width="0.1" height="15.0" fill="rgb(222,72,9)" rx="2" ry="2" />
<text  x="14.19" y="1359.5" ></text>
</g>
<g >
<title>ssm-agent-worke (14,000,000 samples, 0.01%)</title><rect x="109.1" y="1573" width="0.1" height="15.0" fill="rgb(231,124,30)" rx="2" ry="2" />
<text  x="112.10" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (36,750,000 samples, 0.03%)</title><rect x="12.7" y="1285" width="0.4" height="15.0" fill="rgb(226,165,4)" rx="2" ry="2" />
<text  x="15.71" y="1295.5" ></text>
</g>
<g >
<title>schedule (21,000,000 samples, 0.02%)</title><rect x="54.0" y="1429" width="0.2" height="15.0" fill="rgb(215,30,41)" rx="2" ry="2" />
<text  x="57.04" y="1439.5" ></text>
</g>
<g >
<title>release_pages (35,000,000 samples, 0.03%)</title><rect x="50.4" y="1381" width="0.4" height="15.0" fill="rgb(212,38,40)" rx="2" ry="2" />
<text  x="53.43" y="1391.5" ></text>
</g>
<g >
<title>heapgetpage (29,500,000 samples, 0.02%)</title><rect x="35.9" y="1557" width="0.3" height="15.0" fill="rgb(246,106,10)" rx="2" ry="2" />
<text  x="38.86" y="1567.5" ></text>
</g>
<g >
<title>printtup (15,000,000 samples, 0.01%)</title><rect x="23.6" y="1541" width="0.2" height="15.0" fill="rgb(214,154,16)" rx="2" ry="2" />
<text  x="26.64" y="1551.5" ></text>
</g>
<g >
<title>[perf-2123.map] (36,250,000 samples, 0.03%)</title><rect x="11.3" y="1205" width="0.4" height="15.0" fill="rgb(250,47,42)" rx="2" ry="2" />
<text  x="14.33" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22,250,000 samples, 0.02%)</title><rect x="12.8" y="645" width="0.2" height="15.0" fill="rgb(230,91,18)" rx="2" ry="2" />
<text  x="15.75" y="655.5" ></text>
</g>
<g >
<title>__do_sys_brk (186,500,000 samples, 0.16%)</title><rect x="49.3" y="1477" width="1.9" height="15.0" fill="rgb(219,0,6)" rx="2" ry="2" />
<text  x="52.32" y="1487.5" ></text>
</g>
<g >
<title>printtup (78,000,000 samples, 0.07%)</title><rect x="27.8" y="1525" width="0.8" height="15.0" fill="rgb(254,38,24)" rx="2" ry="2" />
<text  x="30.80" y="1535.5" ></text>
</g>
<g >
<title>exc_page_fault (16,250,000 samples, 0.01%)</title><rect x="51.4" y="1509" width="0.2" height="15.0" fill="rgb(217,164,7)" rx="2" ry="2" />
<text  x="54.44" y="1519.5" ></text>
</g>
<g >
<title>[perf-2123.map] (16,000,000 samples, 0.01%)</title><rect x="11.5" y="917" width="0.2" height="15.0" fill="rgb(240,206,7)" rx="2" ry="2" />
<text  x="14.52" y="927.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (14,599,750,000 samples, 12.37%)</title><rect x="1043.9" y="1381" width="146.0" height="15.0" fill="rgb(247,57,23)" rx="2" ry="2" />
<text  x="1046.92" y="1391.5" >cpuidle_enter_state</text>
</g>
<g >
<title>ext4_file_write_iter (47,500,000 samples, 0.04%)</title><rect x="14.1" y="1317" width="0.5" height="15.0" fill="rgb(236,72,25)" rx="2" ry="2" />
<text  x="17.08" y="1327.5" ></text>
</g>
<g >
<title>__handle_mm_fault (108,750,000 samples, 0.09%)</title><rect x="40.2" y="1477" width="1.1" height="15.0" fill="rgb(243,215,37)" rx="2" ry="2" />
<text  x="43.17" y="1487.5" ></text>
</g>
<g >
<title>pg_wcssize (1,413,000,000 samples, 1.20%)</title><rect x="84.7" y="1557" width="14.2" height="15.0" fill="rgb(248,11,48)" rx="2" ry="2" />
<text  x="87.73" y="1567.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (164,500,000 samples, 0.14%)</title><rect x="30.8" y="1429" width="1.6" height="15.0" fill="rgb(235,49,47)" rx="2" ry="2" />
<text  x="33.80" y="1439.5" ></text>
</g>
<g >
<title>__put_page (10,750,000 samples, 0.01%)</title><rect x="52.8" y="1381" width="0.1" height="15.0" fill="rgb(216,3,18)" rx="2" ry="2" />
<text  x="55.75" y="1391.5" ></text>
</g>
<g >
<title>do_idle (14,625,750,000 samples, 12.39%)</title><rect x="1043.7" y="1445" width="146.3" height="15.0" fill="rgb(224,95,14)" rx="2" ry="2" />
<text  x="1046.75" y="1455.5" >do_idle</text>
</g>
<g >
<title>vfs_write (50,750,000 samples, 0.04%)</title><rect x="14.0" y="1349" width="0.6" height="15.0" fill="rgb(221,151,0)" rx="2" ry="2" />
<text  x="17.04" y="1359.5" ></text>
</g>
<g >
<title>node::Start (154,000,000 samples, 0.13%)</title><rect x="11.0" y="1541" width="1.5" height="15.0" fill="rgb(209,156,11)" rx="2" ry="2" />
<text  x="13.97" y="1551.5" ></text>
</g>
<g >
<title>cpu_startup_entry (14,629,250,000 samples, 12.39%)</title><rect x="1043.7" y="1461" width="146.3" height="15.0" fill="rgb(225,46,23)" rx="2" ry="2" />
<text  x="1046.71" y="1471.5" >cpu_startup_entry</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,250,000 samples, 0.01%)</title><rect x="12.8" y="373" width="0.1" height="15.0" fill="rgb(237,145,2)" rx="2" ry="2" />
<text  x="15.78" y="383.5" ></text>
</g>
<g >
<title>InotifyBackend::handleEvent (51,250,000 samples, 0.04%)</title><rect x="12.6" y="1493" width="0.6" height="15.0" fill="rgb(237,171,20)" rx="2" ry="2" />
<text  x="15.65" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11,250,000 samples, 0.01%)</title><rect x="12.8" y="53" width="0.1" height="15.0" fill="rgb(221,4,24)" rx="2" ry="2" />
<text  x="15.80" y="63.5" ></text>
</g>
<g >
<title>[libc.so.6] (181,250,000 samples, 0.15%)</title><rect x="10.8" y="1557" width="1.8" height="15.0" fill="rgb(235,190,51)" rx="2" ry="2" />
<text  x="13.81" y="1567.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (14,616,750,000 samples, 12.38%)</title><rect x="1043.8" y="1429" width="146.1" height="15.0" fill="rgb(239,137,44)" rx="2" ry="2" />
<text  x="1046.79" y="1439.5" >cpuidle_idle_call</text>
</g>
<g >
<title>postgres (2,292,750,000 samples, 1.94%)</title><rect x="14.6" y="1573" width="22.9" height="15.0" fill="rgb(253,33,31)" rx="2" ry="2" />
<text  x="17.56" y="1583.5" >p..</text>
</g>
<g >
<title>unix_stream_sendmsg (287,500,000 samples, 0.24%)</title><rect x="29.6" y="1461" width="2.9" height="15.0" fill="rgb(207,131,4)" rx="2" ry="2" />
<text  x="32.58" y="1471.5" ></text>
</g>
<g >
<title>update_sd_lb_stats.constprop.0 (153,750,000 samples, 0.13%)</title><rect x="1187.3" y="1189" width="1.5" height="15.0" fill="rgb(207,94,4)" rx="2" ry="2" />
<text  x="1190.30" y="1199.5" ></text>
</g>
<g >
<title>clear_page_erms (21,500,000 samples, 0.02%)</title><rect x="30.4" y="1365" width="0.2" height="15.0" fill="rgb(218,89,36)" rx="2" ry="2" />
<text  x="33.38" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19,250,000 samples, 0.02%)</title><rect x="12.8" y="549" width="0.2" height="15.0" fill="rgb(247,99,35)" rx="2" ry="2" />
<text  x="15.76" y="559.5" ></text>
</g>
<g >
<title>sshd (12,750,000 samples, 0.01%)</title><rect x="109.0" y="1573" width="0.1" height="15.0" fill="rgb(214,49,17)" rx="2" ry="2" />
<text  x="111.97" y="1583.5" ></text>
</g>
<g >
<title>printtup_startup (490,250,000 samples, 0.42%)</title><rect x="23.8" y="1541" width="4.9" height="15.0" fill="rgb(242,96,34)" rx="2" ry="2" />
<text  x="26.79" y="1551.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (20,250,000 samples, 0.02%)</title><rect x="1043.5" y="1461" width="0.2" height="15.0" fill="rgb(209,34,42)" rx="2" ry="2" />
<text  x="1046.48" y="1471.5" ></text>
</g>
<g >
<title>double_to_shortest_decimal_bufn (418,500,000 samples, 0.35%)</title><rect x="18.6" y="1541" width="4.2" height="15.0" fill="rgb(239,132,33)" rx="2" ry="2" />
<text  x="21.64" y="1551.5" ></text>
</g>
<g >
<title>AllocSetReset (71,250,000 samples, 0.06%)</title><rect x="23.8" y="1525" width="0.7" height="15.0" fill="rgb(247,197,18)" rx="2" ry="2" />
<text  x="26.79" y="1535.5" ></text>
</g>
<g >
<title>start_secondary (93,469,750,000 samples, 79.19%)</title><rect x="109.3" y="1541" width="934.4" height="15.0" fill="rgb(230,110,41)" rx="2" ry="2" />
<text  x="112.30" y="1551.5" >start_secondary</text>
</g>
<g >
<title>malloc (11,750,000 samples, 0.01%)</title><rect x="13.6" y="1557" width="0.2" height="15.0" fill="rgb(249,135,35)" rx="2" ry="2" />
<text  x="16.64" y="1567.5" ></text>
</g>
<g >
<title>kmalloc_reserve (14,500,000 samples, 0.01%)</title><rect x="29.9" y="1397" width="0.1" height="15.0" fill="rgb(213,29,36)" rx="2" ry="2" />
<text  x="32.87" y="1407.5" ></text>
</g>
<g >
<title>InotifyBackend::handleSubscription (44,250,000 samples, 0.04%)</title><rect x="12.7" y="1477" width="0.4" height="15.0" fill="rgb(209,67,34)" rx="2" ry="2" />
<text  x="15.65" y="1487.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (52,250,000 samples, 0.04%)</title><rect x="53.9" y="1541" width="0.5" height="15.0" fill="rgb(247,74,10)" rx="2" ry="2" />
<text  x="56.92" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (13,000,000 samples, 0.01%)</title><rect x="12.8" y="197" width="0.1" height="15.0" fill="rgb(212,199,40)" rx="2" ry="2" />
<text  x="15.79" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,000,000 samples, 0.03%)</title><rect x="12.7" y="1349" width="0.4" height="15.0" fill="rgb(207,165,45)" rx="2" ry="2" />
<text  x="15.70" y="1359.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (52,250,000 samples, 0.04%)</title><rect x="53.2" y="1349" width="0.5" height="15.0" fill="rgb(241,35,31)" rx="2" ry="2" />
<text  x="56.18" y="1359.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (163,750,000 samples, 0.14%)</title><rect x="30.8" y="1397" width="1.6" height="15.0" fill="rgb(209,30,5)" rx="2" ry="2" />
<text  x="33.81" y="1407.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (13,250,000 samples, 0.01%)</title><rect x="11.9" y="1301" width="0.1" height="15.0" fill="rgb(242,51,22)" rx="2" ry="2" />
<text  x="14.90" y="1311.5" ></text>
</g>
<g >
<title>unix_stream_read_actor (59,750,000 samples, 0.05%)</title><rect x="53.1" y="1413" width="0.6" height="15.0" fill="rgb(244,1,2)" rx="2" ry="2" />
<text  x="56.11" y="1423.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (93,440,250,000 samples, 79.16%)</title><rect x="109.3" y="1445" width="934.2" height="15.0" fill="rgb(218,85,24)" rx="2" ry="2" />
<text  x="112.34" y="1455.5" >cpuidle_enter_state</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15,250,000 samples, 0.01%)</title><rect x="12.8" y="357" width="0.1" height="15.0" fill="rgb(230,27,11)" rx="2" ry="2" />
<text  x="15.78" y="367.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (51,000,000 samples, 0.04%)</title><rect x="14.0" y="1413" width="0.6" height="15.0" fill="rgb(228,99,20)" rx="2" ry="2" />
<text  x="17.04" y="1423.5" ></text>
</g>
<g >
<title>[perf-2123.map] (36,250,000 samples, 0.03%)</title><rect x="11.3" y="1189" width="0.4" height="15.0" fill="rgb(250,7,29)" rx="2" ry="2" />
<text  x="14.33" y="1199.5" ></text>
</g>
<g >
<title>pq_sendcountedtext (34,000,000 samples, 0.03%)</title><rect x="18.3" y="1525" width="0.3" height="15.0" fill="rgb(213,24,52)" rx="2" ry="2" />
<text  x="21.26" y="1535.5" ></text>
</g>
<g >
<title>native_safe_halt (93,433,000,000 samples, 79.16%)</title><rect x="109.4" y="1413" width="934.1" height="15.0" fill="rgb(225,183,39)" rx="2" ry="2" />
<text  x="112.41" y="1423.5" >native_safe_halt</text>
</g>
<g >
<title>printTableAddCell (87,750,000 samples, 0.07%)</title><rect x="100.6" y="1557" width="0.9" height="15.0" fill="rgb(219,207,18)" rx="2" ry="2" />
<text  x="103.65" y="1567.5" ></text>
</g>
<g >
<title>perf_mmap__push (51,000,000 samples, 0.04%)</title><rect x="14.0" y="1461" width="0.6" height="15.0" fill="rgb(235,133,22)" rx="2" ry="2" />
<text  x="17.04" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22,000,000 samples, 0.02%)</title><rect x="12.8" y="629" width="0.2" height="15.0" fill="rgb(210,144,21)" rx="2" ry="2" />
<text  x="15.76" y="639.5" ></text>
</g>
<g >
<title>Builtins_JSRunMicrotasksEntry (41,000,000 samples, 0.03%)</title><rect x="11.3" y="1269" width="0.4" height="15.0" fill="rgb(227,8,19)" rx="2" ry="2" />
<text  x="14.30" y="1279.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (26,750,000 samples, 0.02%)</title><rect x="12.2" y="1381" width="0.3" height="15.0" fill="rgb(237,55,4)" rx="2" ry="2" />
<text  x="15.23" y="1391.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (22,000,000 samples, 0.02%)</title><rect x="11.9" y="1365" width="0.2" height="15.0" fill="rgb(228,227,9)" rx="2" ry="2" />
<text  x="14.90" y="1375.5" ></text>
</g>
<g >
<title>Builtins_PromiseFulfillReactionJob (41,000,000 samples, 0.03%)</title><rect x="11.3" y="1237" width="0.4" height="15.0" fill="rgb(245,75,30)" rx="2" ry="2" />
<text  x="14.30" y="1247.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (20,000,000 samples, 0.02%)</title><rect x="50.9" y="1381" width="0.2" height="15.0" fill="rgb(244,190,31)" rx="2" ry="2" />
<text  x="53.87" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,750,000 samples, 0.02%)</title><rect x="12.7" y="741" width="0.3" height="15.0" fill="rgb(214,60,28)" rx="2" ry="2" />
<text  x="15.74" y="751.5" ></text>
</g>
<g >
<title>enlargeStringInfo (14,000,000 samples, 0.01%)</title><rect x="35.6" y="1557" width="0.1" height="15.0" fill="rgb(220,108,5)" rx="2" ry="2" />
<text  x="38.56" y="1567.5" ></text>
</g>
<g >
<title>do_anonymous_page (25,500,000 samples, 0.02%)</title><rect x="101.2" y="1445" width="0.3" height="15.0" fill="rgb(206,155,21)" rx="2" ry="2" />
<text  x="104.22" y="1455.5" ></text>
</g>
<g >
<title>InotifyBackend::start (56,250,000 samples, 0.05%)</title><rect x="12.6" y="1525" width="0.6" height="15.0" fill="rgb(231,58,47)" rx="2" ry="2" />
<text  x="15.64" y="1535.5" ></text>
</g>
<g >
<title>do_syscall_64 (52,000,000 samples, 0.04%)</title><rect x="53.9" y="1525" width="0.5" height="15.0" fill="rgb(234,10,34)" rx="2" ry="2" />
<text  x="56.92" y="1535.5" ></text>
</g>
<g >
<title>acpi_idle_enter (93,434,250,000 samples, 79.16%)</title><rect x="109.4" y="1429" width="934.1" height="15.0" fill="rgb(254,96,13)" rx="2" ry="2" />
<text  x="112.40" y="1439.5" >acpi_idle_enter</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (301,250,000 samples, 0.26%)</title><rect x="29.5" y="1541" width="3.0" height="15.0" fill="rgb(213,199,5)" rx="2" ry="2" />
<text  x="32.47" y="1551.5" ></text>
</g>
<g >
<title>__alloc_pages (65,250,000 samples, 0.06%)</title><rect x="30.1" y="1397" width="0.7" height="15.0" fill="rgb(222,191,52)" rx="2" ry="2" />
<text  x="33.10" y="1407.5" ></text>
</g>
<g >
<title>enlargeStringInfo (30,500,000 samples, 0.03%)</title><rect x="17.7" y="1525" width="0.3" height="15.0" fill="rgb(234,75,32)" rx="2" ry="2" />
<text  x="20.73" y="1535.5" ></text>
</g>
<g >
<title>node::StreamBase::CallJSOnreadMethod (22,250,000 samples, 0.02%)</title><rect x="11.9" y="1381" width="0.2" height="15.0" fill="rgb(221,220,15)" rx="2" ry="2" />
<text  x="14.90" y="1391.5" ></text>
</g>
<g >
<title>__mem_cgroup_uncharge_list (13,750,000 samples, 0.01%)</title><rect x="50.4" y="1365" width="0.2" height="15.0" fill="rgb(226,18,8)" rx="2" ry="2" />
<text  x="53.45" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,000,000 samples, 0.01%)</title><rect x="12.8" y="261" width="0.1" height="15.0" fill="rgb(240,191,47)" rx="2" ry="2" />
<text  x="15.79" y="271.5" ></text>
</g>
<g >
<title>sock_def_readable (167,500,000 samples, 0.14%)</title><rect x="30.8" y="1445" width="1.6" height="15.0" fill="rgb(239,170,24)" rx="2" ry="2" />
<text  x="33.77" y="1455.5" ></text>
</g>
<g >
<title>do_user_addr_fault (154,250,000 samples, 0.13%)</title><rect x="39.7" y="1509" width="1.6" height="15.0" fill="rgb(237,147,42)" rx="2" ry="2" />
<text  x="42.74" y="1519.5" ></text>
</g>
<g >
<title>__sys_recvfrom (117,500,000 samples, 0.10%)</title><rect x="52.5" y="1477" width="1.2" height="15.0" fill="rgb(232,175,0)" rx="2" ry="2" />
<text  x="55.54" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (17,500,000 samples, 0.01%)</title><rect x="12.8" y="485" width="0.1" height="15.0" fill="rgb(210,196,30)" rx="2" ry="2" />
<text  x="15.77" y="495.5" ></text>
</g>
<g >
<title>Builtins_AsyncFunctionAwaitResolveClosure (39,500,000 samples, 0.03%)</title><rect x="11.3" y="1221" width="0.4" height="15.0" fill="rgb(210,181,47)" rx="2" ry="2" />
<text  x="14.30" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (37,750,000 samples, 0.03%)</title><rect x="12.7" y="1333" width="0.4" height="15.0" fill="rgb(212,225,30)" rx="2" ry="2" />
<text  x="15.70" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24,250,000 samples, 0.02%)</title><rect x="12.7" y="757" width="0.3" height="15.0" fill="rgb(250,148,50)" rx="2" ry="2" />
<text  x="15.74" y="767.5" ></text>
</g>
<g >
<title>[ssm-agent-worker] (11,500,000 samples, 0.01%)</title><rect x="109.1" y="1557" width="0.1" height="15.0" fill="rgb(237,76,19)" rx="2" ry="2" />
<text  x="112.10" y="1567.5" ></text>
</g>
<g >
<title>update_blocked_averages (39,000,000 samples, 0.03%)</title><rect x="1188.9" y="1237" width="0.4" height="15.0" fill="rgb(211,36,18)" rx="2" ry="2" />
<text  x="1191.93" y="1247.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (27,500,000 samples, 0.02%)</title><rect x="14.1" y="1269" width="0.3" height="15.0" fill="rgb(241,82,8)" rx="2" ry="2" />
<text  x="17.14" y="1279.5" ></text>
</g>
<g >
<title>rcu_core (24,000,000 samples, 0.02%)</title><rect x="1186.5" y="1237" width="0.2" height="15.0" fill="rgb(232,229,15)" rx="2" ry="2" />
<text  x="1189.49" y="1247.5" ></text>
</g>
<g >
<title>update_sg_lb_stats (118,250,000 samples, 0.10%)</title><rect x="1187.7" y="1173" width="1.1" height="15.0" fill="rgb(228,188,47)" rx="2" ry="2" />
<text  x="1190.66" y="1183.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (58,250,000 samples, 0.05%)</title><rect x="11.2" y="1397" width="0.6" height="15.0" fill="rgb(218,207,17)" rx="2" ry="2" />
<text  x="14.19" y="1407.5" ></text>
</g>
<g >
<title>handle_mm_fault (113,500,000 samples, 0.10%)</title><rect x="40.1" y="1493" width="1.2" height="15.0" fill="rgb(215,133,28)" rx="2" ry="2" />
<text  x="43.15" y="1503.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (22,000,000 samples, 0.02%)</title><rect x="54.0" y="1445" width="0.2" height="15.0" fill="rgb(214,103,35)" rx="2" ry="2" />
<text  x="57.03" y="1455.5" ></text>
</g>
<g >
<title>[perf-2123.map] (27,000,000 samples, 0.02%)</title><rect x="11.4" y="981" width="0.3" height="15.0" fill="rgb(228,210,29)" rx="2" ry="2" />
<text  x="14.42" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (17,250,000 samples, 0.01%)</title><rect x="12.8" y="437" width="0.1" height="15.0" fill="rgb(253,30,32)" rx="2" ry="2" />
<text  x="15.77" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (14,500,000 samples, 0.01%)</title><rect x="12.8" y="325" width="0.1" height="15.0" fill="rgb(227,33,21)" rx="2" ry="2" />
<text  x="15.79" y="335.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (93,442,250,000 samples, 79.16%)</title><rect x="109.3" y="1493" width="934.2" height="15.0" fill="rgb(241,12,24)" rx="2" ry="2" />
<text  x="112.32" y="1503.5" >cpuidle_idle_call</text>
</g>
<g >
<title>node::LibuvStreamWrap::ReadStart (23,000,000 samples, 0.02%)</title><rect x="11.9" y="1429" width="0.2" height="15.0" fill="rgb(208,45,21)" rx="2" ry="2" />
<text  x="14.90" y="1439.5" ></text>
</g>
<g >
<title>MemoryContextReset (11,750,000 samples, 0.01%)</title><rect x="24.5" y="1525" width="0.1" height="15.0" fill="rgb(221,18,41)" rx="2" ry="2" />
<text  x="27.51" y="1535.5" ></text>
</g>
<g >
<title>vma_alloc_folio (22,000,000 samples, 0.02%)</title><rect x="40.9" y="1429" width="0.2" height="15.0" fill="rgb(238,22,13)" rx="2" ry="2" />
<text  x="43.85" y="1439.5" ></text>
</g>
<g >
<title>ksys_write (50,750,000 samples, 0.04%)</title><rect x="14.0" y="1365" width="0.6" height="15.0" fill="rgb(216,100,10)" rx="2" ry="2" />
<text  x="17.04" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (29,500,000 samples, 0.02%)</title><rect x="12.7" y="1013" width="0.3" height="15.0" fill="rgb(221,23,13)" rx="2" ry="2" />
<text  x="15.73" y="1023.5" ></text>
</g>
<g >
<title>[perf-2123.map] (33,500,000 samples, 0.03%)</title><rect x="11.4" y="1109" width="0.3" height="15.0" fill="rgb(216,125,21)" rx="2" ry="2" />
<text  x="14.36" y="1119.5" ></text>
</g>
<g >
<title>ExecStoreBufferHeapTuple (44,250,000 samples, 0.04%)</title><rect x="15.0" y="1557" width="0.5" height="15.0" fill="rgb(241,40,41)" rx="2" ry="2" />
<text  x="18.02" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,000,000 samples, 0.02%)</title><rect x="12.7" y="885" width="0.3" height="15.0" fill="rgb(210,107,33)" rx="2" ry="2" />
<text  x="15.74" y="895.5" ></text>
</g>
<g >
<title>sock_wfree (11,000,000 samples, 0.01%)</title><rect x="53.0" y="1365" width="0.1" height="15.0" fill="rgb(206,166,24)" rx="2" ry="2" />
<text  x="55.97" y="1375.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::Close (52,250,000 samples, 0.04%)</title><rect x="11.2" y="1365" width="0.5" height="15.0" fill="rgb(249,1,0)" rx="2" ry="2" />
<text  x="14.19" y="1375.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (43,000,000 samples, 0.04%)</title><rect x="101.1" y="1541" width="0.4" height="15.0" fill="rgb(219,83,22)" rx="2" ry="2" />
<text  x="104.09" y="1551.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (58,250,000 samples, 0.05%)</title><rect x="11.2" y="1381" width="0.6" height="15.0" fill="rgb(233,34,12)" rx="2" ry="2" />
<text  x="14.19" y="1391.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (346,000,000 samples, 0.29%)</title><rect x="1186.4" y="1317" width="3.5" height="15.0" fill="rgb(253,27,10)" rx="2" ry="2" />
<text  x="1189.42" y="1327.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (10,750,000 samples, 0.01%)</title><rect x="101.2" y="1429" width="0.1" height="15.0" fill="rgb(235,87,54)" rx="2" ry="2" />
<text  x="104.23" y="1439.5" ></text>
</g>
<g >
<title>__x64_sys_brk (190,500,000 samples, 0.16%)</title><rect x="49.3" y="1493" width="1.9" height="15.0" fill="rgb(232,70,1)" rx="2" ry="2" />
<text  x="52.32" y="1503.5" ></text>
</g>
<g >
<title>sock_sendmsg (294,000,000 samples, 0.25%)</title><rect x="29.5" y="1477" width="3.0" height="15.0" fill="rgb(244,50,52)" rx="2" ry="2" />
<text  x="32.51" y="1487.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (19,500,000 samples, 0.02%)</title><rect x="14.2" y="1253" width="0.2" height="15.0" fill="rgb(209,150,54)" rx="2" ry="2" />
<text  x="17.22" y="1263.5" ></text>
</g>
<g >
<title>cpu_startup_entry (93,469,500,000 samples, 79.19%)</title><rect x="109.3" y="1525" width="934.4" height="15.0" fill="rgb(210,60,36)" rx="2" ry="2" />
<text  x="112.30" y="1535.5" >cpu_startup_entry</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,750,000 samples, 0.03%)</title><rect x="12.7" y="1301" width="0.4" height="15.0" fill="rgb(254,16,16)" rx="2" ry="2" />
<text  x="15.71" y="1311.5" ></text>
</g>
<g >
<title>[libc.so.6] (54,000,000 samples, 0.05%)</title><rect x="14.0" y="1557" width="0.6" height="15.0" fill="rgb(236,94,18)" rx="2" ry="2" />
<text  x="17.02" y="1567.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (11,250,000 samples, 0.01%)</title><rect x="11.2" y="1317" width="0.1" height="15.0" fill="rgb(248,117,8)" rx="2" ry="2" />
<text  x="14.19" y="1327.5" ></text>
</g>
<g >
<title>kfree_skbmem (11,500,000 samples, 0.01%)</title><rect x="52.6" y="1397" width="0.1" height="15.0" fill="rgb(209,44,25)" rx="2" ry="2" />
<text  x="55.63" y="1407.5" ></text>
</g>
<g >
<title>exc_page_fault (43,000,000 samples, 0.04%)</title><rect x="101.1" y="1525" width="0.4" height="15.0" fill="rgb(242,51,16)" rx="2" ry="2" />
<text  x="104.09" y="1535.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (343,250,000 samples, 0.29%)</title><rect x="1186.4" y="1269" width="3.5" height="15.0" fill="rgb(244,87,17)" rx="2" ry="2" />
<text  x="1189.42" y="1279.5" ></text>
</g>
<g >
<title>call_cpuidle (14,604,500,000 samples, 12.37%)</title><rect x="1043.9" y="1413" width="146.0" height="15.0" fill="rgb(211,44,20)" rx="2" ry="2" />
<text  x="1046.88" y="1423.5" >call_cpuidle</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (17,250,000 samples, 0.01%)</title><rect x="12.8" y="453" width="0.1" height="15.0" fill="rgb(223,63,41)" rx="2" ry="2" />
<text  x="15.77" y="463.5" ></text>
</g>
<g >
<title>pg_encoding_mblen (432,750,000 samples, 0.37%)</title><rect x="61.3" y="1557" width="4.3" height="15.0" fill="rgb(215,65,6)" rx="2" ry="2" />
<text  x="64.26" y="1567.5" ></text>
</g>
<g >
<title>node (321,000,000 samples, 0.27%)</title><rect x="10.8" y="1573" width="3.2" height="15.0" fill="rgb(206,12,48)" rx="2" ry="2" />
<text  x="13.81" y="1583.5" ></text>
</g>
<g >
<title>[perf-2123.map] (34,750,000 samples, 0.03%)</title><rect x="11.3" y="1141" width="0.4" height="15.0" fill="rgb(243,120,46)" rx="2" ry="2" />
<text  x="14.35" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21,000,000 samples, 0.02%)</title><rect x="12.8" y="565" width="0.2" height="15.0" fill="rgb(206,158,18)" rx="2" ry="2" />
<text  x="15.76" y="575.5" ></text>
</g>
<g >
<title>__x64_sys_poll (43,250,000 samples, 0.04%)</title><rect x="53.9" y="1509" width="0.5" height="15.0" fill="rgb(228,110,48)" rx="2" ry="2" />
<text  x="56.93" y="1519.5" ></text>
</g>
<g >
<title>remove_vma (10,750,000 samples, 0.01%)</title><rect x="49.9" y="1445" width="0.1" height="15.0" fill="rgb(215,54,33)" rx="2" ry="2" />
<text  x="52.89" y="1455.5" ></text>
</g>
<g >
<title>pqParseInput3 (66,000,000 samples, 0.06%)</title><rect x="99.5" y="1557" width="0.7" height="15.0" fill="rgb(220,120,16)" rx="2" ry="2" />
<text  x="102.52" y="1567.5" ></text>
</g>
<g >
<title>print_aligned_text (332,750,000 samples, 0.28%)</title><rect x="101.5" y="1557" width="3.4" height="15.0" fill="rgb(229,95,36)" rx="2" ry="2" />
<text  x="104.52" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="12.8" y="149" width="0.1" height="15.0" fill="rgb(250,114,38)" rx="2" ry="2" />
<text  x="15.79" y="159.5" ></text>
</g>
<g >
<title>[perf-2123.map] (33,250,000 samples, 0.03%)</title><rect x="11.4" y="1077" width="0.3" height="15.0" fill="rgb(212,95,47)" rx="2" ry="2" />
<text  x="14.36" y="1087.5" ></text>
</g>
<g >
<title>__handle_mm_fault (11,000,000 samples, 0.01%)</title><rect x="51.5" y="1461" width="0.1" height="15.0" fill="rgb(228,166,23)" rx="2" ry="2" />
<text  x="54.49" y="1471.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (63,500,000 samples, 0.05%)</title><rect x="12.6" y="1557" width="0.7" height="15.0" fill="rgb(229,101,42)" rx="2" ry="2" />
<text  x="15.62" y="1567.5" ></text>
</g>
<g >
<title>worker (11,250,000 samples, 0.01%)</title><rect x="12.5" y="1541" width="0.1" height="15.0" fill="rgb(249,136,50)" rx="2" ry="2" />
<text  x="15.51" y="1551.5" ></text>
</g>
<g >
<title>PQgetvalue (13,000,000 samples, 0.01%)</title><rect x="48.6" y="1541" width="0.1" height="15.0" fill="rgb(236,58,3)" rx="2" ry="2" />
<text  x="51.59" y="1551.5" ></text>
</g>
<g >
<title>start_kernel (14,629,250,000 samples, 12.39%)</title><rect x="1043.7" y="1509" width="146.3" height="15.0" fill="rgb(211,51,31)" rx="2" ry="2" />
<text  x="1046.71" y="1519.5" >start_kernel</text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Backend::run (59,250,000 samples, 0.05%)</title><rect x="12.6" y="1541" width="0.6" height="15.0" fill="rgb(219,201,40)" rx="2" ry="2" />
<text  x="15.64" y="1551.5" ></text>
</g>
<g >
<title>pqRowProcessor (26,500,000 samples, 0.02%)</title><rect x="51.7" y="1541" width="0.3" height="15.0" fill="rgb(207,66,31)" rx="2" ry="2" />
<text  x="54.73" y="1551.5" ></text>
</g>
<g >
<title>uv_run (154,000,000 samples, 0.13%)</title><rect x="11.0" y="1493" width="1.5" height="15.0" fill="rgb(210,5,20)" rx="2" ry="2" />
<text  x="13.97" y="1503.5" ></text>
</g>
<g >
<title>Builtins_RunMicrotasks (41,000,000 samples, 0.03%)</title><rect x="11.3" y="1253" width="0.4" height="15.0" fill="rgb(219,90,17)" rx="2" ry="2" />
<text  x="14.30" y="1263.5" ></text>
</g>
<g >
<title>pg_encoding_dsplen (414,250,000 samples, 0.35%)</title><rect x="57.1" y="1557" width="4.2" height="15.0" fill="rgb(217,202,9)" rx="2" ry="2" />
<text  x="60.12" y="1567.5" ></text>
</g>
<g >
<title>kmem_cache_alloc (11,250,000 samples, 0.01%)</title><rect x="49.7" y="1413" width="0.1" height="15.0" fill="rgb(248,6,30)" rx="2" ry="2" />
<text  x="52.69" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,750,000 samples, 0.01%)</title><rect x="12.8" y="245" width="0.1" height="15.0" fill="rgb(245,82,24)" rx="2" ry="2" />
<text  x="15.79" y="255.5" ></text>
</g>
<g >
<title>utf8_to_unicode (393,750,000 samples, 0.33%)</title><rect x="104.9" y="1557" width="3.9" height="15.0" fill="rgb(243,190,35)" rx="2" ry="2" />
<text  x="107.85" y="1567.5" ></text>
</g>
<g >
<title>anon_vma_clone (12,500,000 samples, 0.01%)</title><rect x="49.5" y="1429" width="0.1" height="15.0" fill="rgb(227,215,40)" rx="2" ry="2" />
<text  x="52.45" y="1439.5" ></text>
</g>
<g >
<title>load_balance (200,000,000 samples, 0.17%)</title><rect x="1186.9" y="1221" width="2.0" height="15.0" fill="rgb(218,138,28)" rx="2" ry="2" />
<text  x="1189.93" y="1231.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (22,500,000 samples, 0.02%)</title><rect x="54.0" y="1461" width="0.2" height="15.0" fill="rgb(250,10,23)" rx="2" ry="2" />
<text  x="57.02" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;,  (41,750,000 samples, 0.04%)</title><rect x="12.7" y="1429" width="0.4" height="15.0" fill="rgb(244,70,25)" rx="2" ry="2" />
<text  x="15.67" y="1439.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (155,250,000 samples, 0.13%)</title><rect x="39.7" y="1541" width="1.6" height="15.0" fill="rgb(228,27,6)" rx="2" ry="2" />
<text  x="42.74" y="1551.5" ></text>
</g>
<g >
<title>[unknown] (19,750,000 samples, 0.02%)</title><rect x="10.4" y="1557" width="0.2" height="15.0" fill="rgb(251,22,43)" rx="2" ry="2" />
<text  x="13.41" y="1567.5" ></text>
</g>
<g >
<title>ExecScan (13,250,000 samples, 0.01%)</title><rect x="17.2" y="1541" width="0.1" height="15.0" fill="rgb(218,171,54)" rx="2" ry="2" />
<text  x="20.19" y="1551.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (55,250,000 samples, 0.05%)</title><rect x="28.9" y="1461" width="0.5" height="15.0" fill="rgb(228,185,9)" rx="2" ry="2" />
<text  x="31.86" y="1471.5" ></text>
</g>
<g >
<title>printTableAddCell (14,250,000 samples, 0.01%)</title><rect x="52.4" y="1541" width="0.1" height="15.0" fill="rgb(213,193,5)" rx="2" ry="2" />
<text  x="55.35" y="1551.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (59,500,000 samples, 0.05%)</title><rect x="53.1" y="1397" width="0.6" height="15.0" fill="rgb(252,21,30)" rx="2" ry="2" />
<text  x="56.11" y="1407.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (37,000,000 samples, 0.03%)</title><rect x="28.9" y="1413" width="0.4" height="15.0" fill="rgb(242,17,7)" rx="2" ry="2" />
<text  x="31.91" y="1423.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (13,250,000 samples, 0.01%)</title><rect x="11.9" y="1253" width="0.1" height="15.0" fill="rgb(248,173,10)" rx="2" ry="2" />
<text  x="14.90" y="1263.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (11,250,000 samples, 0.01%)</title><rect x="11.2" y="1285" width="0.1" height="15.0" fill="rgb(210,35,14)" rx="2" ry="2" />
<text  x="14.19" y="1295.5" ></text>
</g>
<g >
<title>generic_perform_write (47,250,000 samples, 0.04%)</title><rect x="14.1" y="1285" width="0.4" height="15.0" fill="rgb(246,12,1)" rx="2" ry="2" />
<text  x="17.08" y="1295.5" ></text>
</g>
<g >
<title>all (118,036,000,000 samples, 100%)</title><rect x="10.0" y="1589" width="1180.0" height="15.0" fill="rgb(242,193,32)" rx="2" ry="2" />
<text  x="13.00" y="1599.5" ></text>
</g>
<g >
<title>vfs_read (57,000,000 samples, 0.05%)</title><rect x="28.9" y="1493" width="0.5" height="15.0" fill="rgb(217,109,29)" rx="2" ry="2" />
<text  x="31.85" y="1503.5" ></text>
</g>
<g >
<title>[psql] (630,250,000 samples, 0.53%)</title><rect x="41.3" y="1557" width="6.3" height="15.0" fill="rgb(237,136,29)" rx="2" ry="2" />
<text  x="44.30" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11,250,000 samples, 0.01%)</title><rect x="12.8" y="85" width="0.1" height="15.0" fill="rgb(213,157,42)" rx="2" ry="2" />
<text  x="15.80" y="95.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (23,250,000 samples, 0.02%)</title><rect x="12.7" y="709" width="0.3" height="15.0" fill="rgb(230,130,34)" rx="2" ry="2" />
<text  x="15.75" y="719.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (12,250,000 samples, 0.01%)</title><rect x="29.9" y="1381" width="0.1" height="15.0" fill="rgb(245,12,17)" rx="2" ry="2" />
<text  x="32.87" y="1391.5" ></text>
</g>
<g >
<title>zap_pte_range (15,750,000 samples, 0.01%)</title><rect x="50.9" y="1365" width="0.2" height="15.0" fill="rgb(227,60,52)" rx="2" ry="2" />
<text  x="53.91" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="12.8" y="117" width="0.1" height="15.0" fill="rgb(248,123,37)" rx="2" ry="2" />
<text  x="15.80" y="127.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (16,500,000 samples, 0.01%)</title><rect x="1189.6" y="1157" width="0.2" height="15.0" fill="rgb(226,52,7)" rx="2" ry="2" />
<text  x="1192.62" y="1167.5" ></text>
</g>
<g >
<title>__schedule (18,750,000 samples, 0.02%)</title><rect x="54.1" y="1413" width="0.1" height="15.0" fill="rgb(244,0,26)" rx="2" ry="2" />
<text  x="57.06" y="1423.5" ></text>
</g>
<g >
<title>Glob::isIgnored (42,000,000 samples, 0.04%)</title><rect x="12.7" y="1445" width="0.4" height="15.0" fill="rgb(208,100,30)" rx="2" ry="2" />
<text  x="15.67" y="1455.5" ></text>
</g>
<g >
<title>record__pushfn (51,000,000 samples, 0.04%)</title><rect x="14.0" y="1445" width="0.6" height="15.0" fill="rgb(235,102,30)" rx="2" ry="2" />
<text  x="17.04" y="1455.5" ></text>
</g>
<g >
<title>node::SpinEventLoop (154,000,000 samples, 0.13%)</title><rect x="11.0" y="1509" width="1.5" height="15.0" fill="rgb(231,123,31)" rx="2" ry="2" />
<text  x="13.97" y="1519.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (118,000,000 samples, 0.10%)</title><rect x="52.5" y="1493" width="1.2" height="15.0" fill="rgb(207,24,16)" rx="2" ry="2" />
<text  x="55.54" y="1503.5" ></text>
</g>
<g >
<title>[unknown] (17,000,000 samples, 0.01%)</title><rect x="13.3" y="1557" width="0.1" height="15.0" fill="rgb(210,117,4)" rx="2" ry="2" />
<text  x="16.26" y="1567.5" ></text>
</g>
<g >
<title>__mod_timer (18,000,000 samples, 0.02%)</title><rect x="1189.6" y="1173" width="0.2" height="15.0" fill="rgb(244,125,12)" rx="2" ry="2" />
<text  x="1192.61" y="1183.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (30,250,000 samples, 0.03%)</title><rect x="12.7" y="1061" width="0.3" height="15.0" fill="rgb(241,69,35)" rx="2" ry="2" />
<text  x="15.72" y="1071.5" ></text>
</g>
<g >
<title>Watcher::isIgnored (42,500,000 samples, 0.04%)</title><rect x="12.7" y="1461" width="0.4" height="15.0" fill="rgb(246,227,52)" rx="2" ry="2" />
<text  x="15.66" y="1471.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (13,250,000 samples, 0.01%)</title><rect x="11.9" y="1269" width="0.1" height="15.0" fill="rgb(226,177,28)" rx="2" ry="2" />
<text  x="14.90" y="1279.5" ></text>
</g>
<g >
<title>recv (122,750,000 samples, 0.10%)</title><rect x="52.5" y="1541" width="1.2" height="15.0" fill="rgb(220,102,47)" rx="2" ry="2" />
<text  x="55.49" y="1551.5" ></text>
</g>
<g >
<title>free_compound_page (10,750,000 samples, 0.01%)</title><rect x="52.8" y="1365" width="0.1" height="15.0" fill="rgb(240,88,54)" rx="2" ry="2" />
<text  x="55.75" y="1375.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (23,000,000 samples, 0.02%)</title><rect x="50.2" y="1413" width="0.2" height="15.0" fill="rgb(216,23,23)" rx="2" ry="2" />
<text  x="53.17" y="1423.5" ></text>
</g>
<g >
<title>OutputFunctionCall (25,500,000 samples, 0.02%)</title><rect x="24.6" y="1525" width="0.3" height="15.0" fill="rgb(246,78,11)" rx="2" ry="2" />
<text  x="27.62" y="1535.5" ></text>
</g>
<g >
<title>double_to_shortest_decimal_buf (10,500,000 samples, 0.01%)</title><rect x="26.4" y="1525" width="0.1" height="15.0" fill="rgb(229,138,53)" rx="2" ry="2" />
<text  x="29.42" y="1535.5" ></text>
</g>
<g >
<title>PQgetisnull (69,750,000 samples, 0.06%)</title><rect x="47.9" y="1541" width="0.7" height="15.0" fill="rgb(212,214,22)" rx="2" ry="2" />
<text  x="50.89" y="1551.5" ></text>
</g>
<g >
<title>consume_skb (44,500,000 samples, 0.04%)</title><rect x="52.6" y="1413" width="0.5" height="15.0" fill="rgb(250,54,7)" rx="2" ry="2" />
<text  x="55.63" y="1423.5" ></text>
</g>
<g >
<title>do_syscall_64 (118,500,000 samples, 0.10%)</title><rect x="52.5" y="1509" width="1.2" height="15.0" fill="rgb(248,178,41)" rx="2" ry="2" />
<text  x="55.53" y="1519.5" ></text>
</g>
<g >
<title>__filemap_add_folio (11,250,000 samples, 0.01%)</title><rect x="14.2" y="1189" width="0.1" height="15.0" fill="rgb(228,180,43)" rx="2" ry="2" />
<text  x="17.23" y="1199.5" ></text>
</g>
<g >
<title>heapgettup_pagemode (66,500,000 samples, 0.06%)</title><rect x="23.0" y="1541" width="0.6" height="15.0" fill="rgb(216,126,53)" rx="2" ry="2" />
<text  x="25.97" y="1551.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (108,099,000,000 samples, 91.58%)</title><rect x="109.3" y="1557" width="1080.7" height="15.0" fill="rgb(240,35,10)" rx="2" ry="2" />
<text  x="112.30" y="1567.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>__handle_mm_fault (31,250,000 samples, 0.03%)</title><rect x="101.2" y="1477" width="0.3" height="15.0" fill="rgb(239,75,52)" rx="2" ry="2" />
<text  x="104.20" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24,250,000 samples, 0.02%)</title><rect x="12.7" y="789" width="0.3" height="15.0" fill="rgb(234,104,2)" rx="2" ry="2" />
<text  x="15.74" y="799.5" ></text>
</g>
<g >
<title>[perf-2123.map] (23,750,000 samples, 0.02%)</title><rect x="11.5" y="949" width="0.2" height="15.0" fill="rgb(217,204,13)" rx="2" ry="2" />
<text  x="14.45" y="959.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,250,000 samples, 0.02%)</title><rect x="12.7" y="917" width="0.3" height="15.0" fill="rgb(217,125,27)" rx="2" ry="2" />
<text  x="15.74" y="927.5" ></text>
</g>
<g >
<title>palloc (16,750,000 samples, 0.01%)</title><rect x="36.6" y="1557" width="0.2" height="15.0" fill="rgb(232,183,14)" rx="2" ry="2" />
<text  x="39.60" y="1567.5" ></text>
</g>
<g >
<title>AllocSetReset (34,000,000 samples, 0.03%)</title><rect x="14.6" y="1557" width="0.4" height="15.0" fill="rgb(235,60,43)" rx="2" ry="2" />
<text  x="17.63" y="1567.5" ></text>
</g>
<g >
<title>alloc_skb_with_frags (95,250,000 samples, 0.08%)</title><rect x="29.8" y="1429" width="1.0" height="15.0" fill="rgb(215,19,50)" rx="2" ry="2" />
<text  x="32.81" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (32,250,000 samples, 0.03%)</title><rect x="12.7" y="1109" width="0.3" height="15.0" fill="rgb(247,47,21)" rx="2" ry="2" />
<text  x="15.72" y="1119.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (21,750,000 samples, 0.02%)</title><rect x="11.9" y="1349" width="0.2" height="15.0" fill="rgb(245,35,6)" rx="2" ry="2" />
<text  x="14.90" y="1359.5" ></text>
</g>
<g >
<title>vm_area_free (10,500,000 samples, 0.01%)</title><rect x="49.9" y="1429" width="0.1" height="15.0" fill="rgb(224,0,51)" rx="2" ry="2" />
<text  x="52.90" y="1439.5" ></text>
</g>
<g >
<title>internal_putbytes (40,500,000 samples, 0.03%)</title><rect x="36.2" y="1557" width="0.4" height="15.0" fill="rgb(241,136,50)" rx="2" ry="2" />
<text  x="39.20" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24,250,000 samples, 0.02%)</title><rect x="12.7" y="773" width="0.3" height="15.0" fill="rgb(221,163,1)" rx="2" ry="2" />
<text  x="15.74" y="783.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15,000,000 samples, 0.01%)</title><rect x="12.8" y="341" width="0.1" height="15.0" fill="rgb(225,27,32)" rx="2" ry="2" />
<text  x="15.78" y="351.5" ></text>
</g>
<g >
<title>run_timer_softirq (52,500,000 samples, 0.04%)</title><rect x="1189.3" y="1253" width="0.5" height="15.0" fill="rgb(219,97,32)" rx="2" ry="2" />
<text  x="1192.32" y="1263.5" ></text>
</g>
<g >
<title>[perf-2123.map] (34,750,000 samples, 0.03%)</title><rect x="11.3" y="1157" width="0.4" height="15.0" fill="rgb(247,189,18)" rx="2" ry="2" />
<text  x="14.35" y="1167.5" ></text>
</g>
<g >
<title>cat (29,500,000 samples, 0.02%)</title><rect x="10.0" y="1573" width="0.3" height="15.0" fill="rgb(211,108,3)" rx="2" ry="2" />
<text  x="13.00" y="1583.5" ></text>
</g>
<g >
<title>[libc.so.6] (339,000,000 samples, 0.29%)</title><rect x="37.9" y="1557" width="3.4" height="15.0" fill="rgb(205,211,22)" rx="2" ry="2" />
<text  x="40.91" y="1567.5" ></text>
</g>
<g >
<title>get_page_from_freelist (39,250,000 samples, 0.03%)</title><rect x="30.3" y="1381" width="0.4" height="15.0" fill="rgb(247,70,0)" rx="2" ry="2" />
<text  x="33.27" y="1391.5" ></text>
</g>
<g >
<title>rest_init (14,629,250,000 samples, 12.39%)</title><rect x="1043.7" y="1477" width="146.3" height="15.0" fill="rgb(209,208,14)" rx="2" ry="2" />
<text  x="1046.71" y="1487.5" >rest_init</text>
</g>
<g >
<title>schedule_idle (21,250,000 samples, 0.02%)</title><rect x="1043.5" y="1493" width="0.2" height="15.0" fill="rgb(220,133,35)" rx="2" ry="2" />
<text  x="1046.47" y="1503.5" ></text>
</g>
<g >
<title>pmd_page_vaddr (17,500,000 samples, 0.01%)</title><rect x="41.1" y="1445" width="0.1" height="15.0" fill="rgb(247,96,27)" rx="2" ry="2" />
<text  x="44.07" y="1455.5" ></text>
</g>
<g >
<title>node::EmitToJSStreamListener::OnStreamRead (23,000,000 samples, 0.02%)</title><rect x="11.9" y="1397" width="0.2" height="15.0" fill="rgb(225,141,46)" rx="2" ry="2" />
<text  x="14.90" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,750,000 samples, 0.02%)</title><rect x="12.7" y="869" width="0.3" height="15.0" fill="rgb(210,125,23)" rx="2" ry="2" />
<text  x="15.74" y="879.5" ></text>
</g>
<g >
<title>double_to_shortest_decimal_bufn (298,750,000 samples, 0.25%)</title><rect x="32.6" y="1557" width="3.0" height="15.0" fill="rgb(216,100,14)" rx="2" ry="2" />
<text  x="35.57" y="1567.5" ></text>
</g>
<g >
<title>[perf-2123.map] (12,750,000 samples, 0.01%)</title><rect x="11.6" y="869" width="0.1" height="15.0" fill="rgb(249,184,10)" rx="2" ry="2" />
<text  x="14.55" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21,250,000 samples, 0.02%)</title><rect x="12.8" y="613" width="0.2" height="15.0" fill="rgb(248,143,2)" rx="2" ry="2" />
<text  x="15.76" y="623.5" ></text>
</g>
<g >
<title>PQmblen (20,250,000 samples, 0.02%)</title><rect x="37.7" y="1557" width="0.2" height="15.0" fill="rgb(249,164,48)" rx="2" ry="2" />
<text  x="40.70" y="1567.5" ></text>
</g>
<g >
<title>generic_write_end (10,500,000 samples, 0.01%)</title><rect x="14.4" y="1253" width="0.1" height="15.0" fill="rgb(207,47,8)" rx="2" ry="2" />
<text  x="17.42" y="1263.5" ></text>
</g>
<g >
<title>[perf-2123.map] (32,500,000 samples, 0.03%)</title><rect x="11.4" y="1029" width="0.3" height="15.0" fill="rgb(217,147,51)" rx="2" ry="2" />
<text  x="14.37" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22,500,000 samples, 0.02%)</title><rect x="12.8" y="661" width="0.2" height="15.0" fill="rgb(222,143,3)" rx="2" ry="2" />
<text  x="15.75" y="671.5" ></text>
</g>
<g >
<title>__poll (58,500,000 samples, 0.05%)</title><rect x="53.9" y="1557" width="0.5" height="15.0" fill="rgb(245,105,38)" rx="2" ry="2" />
<text  x="56.86" y="1567.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (41,000,000 samples, 0.03%)</title><rect x="11.3" y="1301" width="0.4" height="15.0" fill="rgb(219,123,29)" rx="2" ry="2" />
<text  x="14.30" y="1311.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (13,250,000 samples, 0.01%)</title><rect x="11.9" y="1285" width="0.1" height="15.0" fill="rgb(242,15,1)" rx="2" ry="2" />
<text  x="14.90" y="1295.5" ></text>
</g>
<g >
<title>node::ThreadPoolWork::ScheduleWork (58,500,000 samples, 0.05%)</title><rect x="11.2" y="1429" width="0.6" height="15.0" fill="rgb(224,94,12)" rx="2" ry="2" />
<text  x="14.18" y="1439.5" ></text>
</g>
<g >
<title>brk (207,250,000 samples, 0.18%)</title><rect x="49.2" y="1541" width="2.1" height="15.0" fill="rgb(238,152,20)" rx="2" ry="2" />
<text  x="52.21" y="1551.5" ></text>
</g>
<g >
<title>generic_file_read_iter (54,750,000 samples, 0.05%)</title><rect x="28.9" y="1445" width="0.5" height="15.0" fill="rgb(209,47,0)" rx="2" ry="2" />
<text  x="31.87" y="1455.5" ></text>
</g>
<g >
<title>[perf-2123.map] (32,500,000 samples, 0.03%)</title><rect x="11.4" y="1045" width="0.3" height="15.0" fill="rgb(236,187,7)" rx="2" ry="2" />
<text  x="14.37" y="1055.5" ></text>
</g>
<g >
<title>double_to_shortest_decimal_bufn (53,500,000 samples, 0.05%)</title><rect x="26.5" y="1525" width="0.6" height="15.0" fill="rgb(221,46,24)" rx="2" ry="2" />
<text  x="29.53" y="1535.5" ></text>
</g>
<g >
<title>unmap_single_vma (25,250,000 samples, 0.02%)</title><rect x="50.8" y="1413" width="0.3" height="15.0" fill="rgb(243,145,14)" rx="2" ry="2" />
<text  x="53.83" y="1423.5" ></text>
</g>
<g >
<title>ExecScanFetch (11,000,000 samples, 0.01%)</title><rect x="17.3" y="1541" width="0.1" height="15.0" fill="rgb(208,144,44)" rx="2" ry="2" />
<text  x="20.33" y="1551.5" ></text>
</g>
<g >
<title>handle_mm_fault (32,750,000 samples, 0.03%)</title><rect x="101.2" y="1493" width="0.3" height="15.0" fill="rgb(223,77,14)" rx="2" ry="2" />
<text  x="104.19" y="1503.5" ></text>
</g>
<g >
<title>do_syscall_64 (196,750,000 samples, 0.17%)</title><rect x="49.3" y="1509" width="2.0" height="15.0" fill="rgb(240,178,17)" rx="2" ry="2" />
<text  x="52.32" y="1519.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (115,750,000 samples, 0.10%)</title><rect x="52.5" y="1445" width="1.2" height="15.0" fill="rgb(222,5,5)" rx="2" ry="2" />
<text  x="55.55" y="1455.5" ></text>
</g>
<g >
<title>rcu_report_qs_rdp (11,000,000 samples, 0.01%)</title><rect x="1186.6" y="1221" width="0.1" height="15.0" fill="rgb(231,181,48)" rx="2" ry="2" />
<text  x="1189.62" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (39,250,000 samples, 0.03%)</title><rect x="12.7" y="1381" width="0.4" height="15.0" fill="rgb(224,122,10)" rx="2" ry="2" />
<text  x="15.69" y="1391.5" ></text>
</g>
<g >
<title>unmap_region (108,250,000 samples, 0.09%)</title><rect x="50.0" y="1445" width="1.1" height="15.0" fill="rgb(232,46,30)" rx="2" ry="2" />
<text  x="53.00" y="1455.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (21,500,000 samples, 0.02%)</title><rect x="40.3" y="1429" width="0.3" height="15.0" fill="rgb(214,59,35)" rx="2" ry="2" />
<text  x="43.35" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (28,500,000 samples, 0.02%)</title><rect x="12.7" y="997" width="0.3" height="15.0" fill="rgb(246,126,50)" rx="2" ry="2" />
<text  x="15.73" y="1007.5" ></text>
</g>
<g >
<title>unix_destruct_scm (11,250,000 samples, 0.01%)</title><rect x="53.0" y="1381" width="0.1" height="15.0" fill="rgb(215,186,28)" rx="2" ry="2" />
<text  x="55.96" y="1391.5" ></text>
</g>
<g >
<title>do_anonymous_page (82,250,000 samples, 0.07%)</title><rect x="40.2" y="1445" width="0.9" height="15.0" fill="rgb(243,175,4)" rx="2" ry="2" />
<text  x="43.25" y="1455.5" ></text>
</g>
<g >
<title>__schedule (20,500,000 samples, 0.02%)</title><rect x="1043.5" y="1477" width="0.2" height="15.0" fill="rgb(226,137,33)" rx="2" ry="2" />
<text  x="1046.48" y="1487.5" ></text>
</g>
<g >
<title>kmem_cache_free (11,500,000 samples, 0.01%)</title><rect x="52.6" y="1381" width="0.1" height="15.0" fill="rgb(217,19,42)" rx="2" ry="2" />
<text  x="55.63" y="1391.5" ></text>
</g>
<g >
<title>simple_copy_to_iter (56,000,000 samples, 0.05%)</title><rect x="53.1" y="1365" width="0.6" height="15.0" fill="rgb(242,146,26)" rx="2" ry="2" />
<text  x="56.14" y="1375.5" ></text>
</g>
<g >
<title>handle_pte_fault (10,750,000 samples, 0.01%)</title><rect x="51.5" y="1445" width="0.1" height="15.0" fill="rgb(224,127,3)" rx="2" ry="2" />
<text  x="54.50" y="1455.5" ></text>
</g>
<g >
<title>run_rebalance_domains (258,500,000 samples, 0.22%)</title><rect x="1186.7" y="1253" width="2.6" height="15.0" fill="rgb(212,103,12)" rx="2" ry="2" />
<text  x="1189.74" y="1263.5" ></text>
</g>
<g >
<title>arch_call_rest_init (14,629,250,000 samples, 12.39%)</title><rect x="1043.7" y="1493" width="146.3" height="15.0" fill="rgb(251,72,35)" rx="2" ry="2" />
<text  x="1046.71" y="1503.5" >arch_call_rest_init</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="12.8" y="133" width="0.1" height="15.0" fill="rgb(243,23,3)" rx="2" ry="2" />
<text  x="15.80" y="143.5" ></text>
</g>
<g >
<title>[perf-2123.map] (34,500,000 samples, 0.03%)</title><rect x="11.3" y="1125" width="0.4" height="15.0" fill="rgb(234,207,12)" rx="2" ry="2" />
<text  x="14.35" y="1135.5" ></text>
</g>
<g >
<title>charge_memcg (19,250,000 samples, 0.02%)</title><rect x="40.3" y="1413" width="0.2" height="15.0" fill="rgb(247,143,41)" rx="2" ry="2" />
<text  x="43.35" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,250,000 samples, 0.01%)</title><rect x="12.8" y="229" width="0.1" height="15.0" fill="rgb(251,16,9)" rx="2" ry="2" />
<text  x="15.79" y="239.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (66,000,000 samples, 0.06%)</title><rect x="50.1" y="1429" width="0.7" height="15.0" fill="rgb(240,171,52)" rx="2" ry="2" />
<text  x="53.13" y="1439.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (27,250,000 samples, 0.02%)</title><rect x="12.2" y="1397" width="0.3" height="15.0" fill="rgb(253,134,26)" rx="2" ry="2" />
<text  x="15.23" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,250,000 samples, 0.01%)</title><rect x="12.8" y="293" width="0.1" height="15.0" fill="rgb(248,210,19)" rx="2" ry="2" />
<text  x="15.79" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (296,750,000 samples, 0.25%)</title><rect x="29.5" y="1509" width="3.0" height="15.0" fill="rgb(229,210,41)" rx="2" ry="2" />
<text  x="32.49" y="1519.5" ></text>
</g>
<g >
<title>__irq_exit_rcu (346,000,000 samples, 0.29%)</title><rect x="1186.4" y="1285" width="3.5" height="15.0" fill="rgb(217,11,5)" rx="2" ry="2" />
<text  x="1189.42" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22,500,000 samples, 0.02%)</title><rect x="12.8" y="677" width="0.2" height="15.0" fill="rgb(244,40,44)" rx="2" ry="2" />
<text  x="15.75" y="687.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (58,000,000 samples, 0.05%)</title><rect x="28.9" y="1541" width="0.5" height="15.0" fill="rgb(239,7,28)" rx="2" ry="2" />
<text  x="31.85" y="1551.5" ></text>
</g>
<g >
<title>uv__async_io.part.1 (77,000,000 samples, 0.07%)</title><rect x="11.1" y="1461" width="0.7" height="15.0" fill="rgb(237,141,9)" rx="2" ry="2" />
<text  x="14.06" y="1471.5" ></text>
</g>
<g >
<title>printQuery (33,750,000 samples, 0.03%)</title><rect x="52.0" y="1541" width="0.4" height="15.0" fill="rgb(228,9,5)" rx="2" ry="2" />
<text  x="55.01" y="1551.5" ></text>
</g>
<g >
<title>heap_getnextslot (12,250,000 samples, 0.01%)</title><rect x="22.8" y="1541" width="0.2" height="15.0" fill="rgb(252,10,39)" rx="2" ry="2" />
<text  x="25.84" y="1551.5" ></text>
</g>
<g >
<title>tcp_orphan_update (24,750,000 samples, 0.02%)</title><rect x="1189.5" y="1205" width="0.3" height="15.0" fill="rgb(228,33,5)" rx="2" ry="2" />
<text  x="1192.54" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,750,000 samples, 0.03%)</title><rect x="12.7" y="1317" width="0.4" height="15.0" fill="rgb(251,0,6)" rx="2" ry="2" />
<text  x="15.71" y="1327.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (59,000,000 samples, 0.05%)</title><rect x="53.1" y="1381" width="0.6" height="15.0" fill="rgb(249,172,44)" rx="2" ry="2" />
<text  x="56.11" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (39,750,000 samples, 0.03%)</title><rect x="12.7" y="1397" width="0.4" height="15.0" fill="rgb(238,61,26)" rx="2" ry="2" />
<text  x="15.69" y="1407.5" ></text>
</g>
<g >
<title>[ssm-agent-worker] (11,250,000 samples, 0.01%)</title><rect x="109.1" y="1493" width="0.1" height="15.0" fill="rgb(234,216,0)" rx="2" ry="2" />
<text  x="112.10" y="1503.5" ></text>
</g>
<g >
<title>[perf-2123.map] (35,250,000 samples, 0.03%)</title><rect x="11.3" y="1173" width="0.4" height="15.0" fill="rgb(223,23,28)" rx="2" ry="2" />
<text  x="14.34" y="1183.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (164,000,000 samples, 0.14%)</title><rect x="30.8" y="1413" width="1.6" height="15.0" fill="rgb(238,181,37)" rx="2" ry="2" />
<text  x="33.81" y="1423.5" ></text>
</g>
<g >
<title>pg_utf_mblen (952,250,000 samples, 0.81%)</title><rect x="75.2" y="1557" width="9.5" height="15.0" fill="rgb(248,98,29)" rx="2" ry="2" />
<text  x="78.21" y="1567.5" ></text>
</g>
<g >
<title>[perf-2123.map] (15,000,000 samples, 0.01%)</title><rect x="11.5" y="901" width="0.2" height="15.0" fill="rgb(217,187,11)" rx="2" ry="2" />
<text  x="14.53" y="911.5" ></text>
</g>
<g >
<title>do_user_addr_fault (16,250,000 samples, 0.01%)</title><rect x="51.4" y="1493" width="0.2" height="15.0" fill="rgb(206,93,20)" rx="2" ry="2" />
<text  x="54.44" y="1503.5" ></text>
</g>
<g >
<title>pqAddTuple (30,500,000 samples, 0.03%)</title><rect x="51.3" y="1541" width="0.3" height="15.0" fill="rgb(216,153,25)" rx="2" ry="2" />
<text  x="54.30" y="1551.5" ></text>
</g>
<g >
<title>pq_sendcountedtext (18,250,000 samples, 0.02%)</title><rect x="27.6" y="1525" width="0.2" height="15.0" fill="rgb(238,58,10)" rx="2" ry="2" />
<text  x="30.62" y="1535.5" ></text>
</g>
<g >
<title>palloc (10,750,000 samples, 0.01%)</title><rect x="27.4" y="1525" width="0.1" height="15.0" fill="rgb(240,11,35)" rx="2" ry="2" />
<text  x="30.41" y="1535.5" ></text>
</g>
<g >
<title>acpi_idle_enter (14,559,500,000 samples, 12.33%)</title><rect x="1044.3" y="1365" width="145.6" height="15.0" fill="rgb(244,122,37)" rx="2" ry="2" />
<text  x="1047.33" y="1375.5" >acpi_idle_enter</text>
</g>
<g >
<title>do_idle (93,467,750,000 samples, 79.19%)</title><rect x="109.3" y="1509" width="934.4" height="15.0" fill="rgb(236,160,16)" rx="2" ry="2" />
<text  x="112.31" y="1519.5" >do_idle</text>
</g>
<g >
<title>cmd_record (54,000,000 samples, 0.05%)</title><rect x="14.0" y="1509" width="0.6" height="15.0" fill="rgb(237,156,28)" rx="2" ry="2" />
<text  x="17.02" y="1519.5" ></text>
</g>
<g >
<title>[perf-1052.map] (10,500,000 samples, 0.01%)</title><rect x="11.9" y="1237" width="0.1" height="15.0" fill="rgb(215,175,24)" rx="2" ry="2" />
<text  x="14.90" y="1247.5" ></text>
</g>
<g >
<title>alloc_pages (66,000,000 samples, 0.06%)</title><rect x="30.1" y="1413" width="0.7" height="15.0" fill="rgb(254,4,22)" rx="2" ry="2" />
<text  x="33.10" y="1423.5" ></text>
</g>
<g >
<title>socket_putmessage (11,000,000 samples, 0.01%)</title><rect x="36.9" y="1557" width="0.1" height="15.0" fill="rgb(214,121,48)" rx="2" ry="2" />
<text  x="39.86" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11,250,000 samples, 0.01%)</title><rect x="12.8" y="101" width="0.1" height="15.0" fill="rgb(244,111,52)" rx="2" ry="2" />
<text  x="15.80" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (11,250,000 samples, 0.01%)</title><rect x="12.8" y="69" width="0.1" height="15.0" fill="rgb(217,123,44)" rx="2" ry="2" />
<text  x="15.80" y="79.5" ></text>
</g>
<g >
<title>find_busiest_group (172,000,000 samples, 0.15%)</title><rect x="1187.2" y="1205" width="1.7" height="15.0" fill="rgb(225,2,54)" rx="2" ry="2" />
<text  x="1190.20" y="1215.5" ></text>
</g>
<g >
<title>standard_ExecutorRun (12,000,000 samples, 0.01%)</title><rect x="28.7" y="1541" width="0.1" height="15.0" fill="rgb(231,71,51)" rx="2" ry="2" />
<text  x="31.70" y="1551.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (28,000,000 samples, 0.02%)</title><rect x="12.2" y="1413" width="0.3" height="15.0" fill="rgb(218,37,21)" rx="2" ry="2" />
<text  x="15.23" y="1423.5" ></text>
</g>
<g >
<title>rebalance_domains (216,750,000 samples, 0.18%)</title><rect x="1186.8" y="1237" width="2.1" height="15.0" fill="rgb(246,128,42)" rx="2" ry="2" />
<text  x="1189.77" y="1247.5" ></text>
</g>
<g >
<title>[libc.so.6] (20,500,000 samples, 0.02%)</title><rect x="48.7" y="1541" width="0.2" height="15.0" fill="rgb(243,60,51)" rx="2" ry="2" />
<text  x="51.72" y="1551.5" ></text>
</g>
<g >
<title>call_cpuidle (93,441,000,000 samples, 79.16%)</title><rect x="109.3" y="1477" width="934.2" height="15.0" fill="rgb(226,71,25)" rx="2" ry="2" />
<text  x="112.33" y="1487.5" >call_cpuidle</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,000,000 samples, 0.01%)</title><rect x="12.8" y="213" width="0.1" height="15.0" fill="rgb(230,52,39)" rx="2" ry="2" />
<text  x="15.79" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (119,000,000 samples, 0.10%)</title><rect x="52.5" y="1525" width="1.2" height="15.0" fill="rgb(237,84,40)" rx="2" ry="2" />
<text  x="55.53" y="1535.5" ></text>
</g>
<g >
<title>pqGetInt (52,750,000 samples, 0.04%)</title><rect x="98.9" y="1557" width="0.5" height="15.0" fill="rgb(207,61,52)" rx="2" ry="2" />
<text  x="101.85" y="1567.5" ></text>
</g>
<g >
<title>[perf-2123.map] (32,500,000 samples, 0.03%)</title><rect x="11.4" y="1061" width="0.3" height="15.0" fill="rgb(240,38,7)" rx="2" ry="2" />
<text  x="14.37" y="1071.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (11,250,000 samples, 0.01%)</title><rect x="11.2" y="1333" width="0.1" height="15.0" fill="rgb(222,24,40)" rx="2" ry="2" />
<text  x="14.19" y="1343.5" ></text>
</g>
<g >
<title>do_syscall_64 (58,000,000 samples, 0.05%)</title><rect x="28.9" y="1525" width="0.5" height="15.0" fill="rgb(238,155,8)" rx="2" ry="2" />
<text  x="31.85" y="1535.5" ></text>
</g>
<g >
<title>[ssm-agent-worker] (11,500,000 samples, 0.01%)</title><rect x="109.1" y="1525" width="0.1" height="15.0" fill="rgb(241,68,28)" rx="2" ry="2" />
<text  x="112.10" y="1535.5" ></text>
</g>
<g >
<title>pqGetc (14,000,000 samples, 0.01%)</title><rect x="99.4" y="1557" width="0.1" height="15.0" fill="rgb(227,74,22)" rx="2" ry="2" />
<text  x="102.38" y="1567.5" ></text>
</g>
<g >
<title>node::LibuvStreamWrap::OnUvRead (23,000,000 samples, 0.02%)</title><rect x="11.9" y="1413" width="0.2" height="15.0" fill="rgb(208,223,14)" rx="2" ry="2" />
<text  x="14.90" y="1423.5" ></text>
</g>
<g >
<title>sock_alloc_send_pskb (97,000,000 samples, 0.08%)</title><rect x="29.8" y="1445" width="1.0" height="15.0" fill="rgb(221,59,40)" rx="2" ry="2" />
<text  x="32.80" y="1455.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (196,750,000 samples, 0.17%)</title><rect x="49.3" y="1525" width="2.0" height="15.0" fill="rgb(226,228,23)" rx="2" ry="2" />
<text  x="52.32" y="1535.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::RunMicrotasks (41,000,000 samples, 0.03%)</title><rect x="11.3" y="1333" width="0.4" height="15.0" fill="rgb(221,98,37)" rx="2" ry="2" />
<text  x="14.30" y="1343.5" ></text>
</g>
<g >
<title>uv__stream_io (23,750,000 samples, 0.02%)</title><rect x="11.9" y="1461" width="0.2" height="15.0" fill="rgb(209,33,10)" rx="2" ry="2" />
<text  x="14.89" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (26,000,000 samples, 0.02%)</title><rect x="12.7" y="901" width="0.3" height="15.0" fill="rgb(244,73,43)" rx="2" ry="2" />
<text  x="15.74" y="911.5" ></text>
</g>
<g >
<title>v8::Function::Call (29,250,000 samples, 0.02%)</title><rect x="12.2" y="1445" width="0.3" height="15.0" fill="rgb(236,194,42)" rx="2" ry="2" />
<text  x="15.22" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,500,000 samples, 0.02%)</title><rect x="12.7" y="853" width="0.3" height="15.0" fill="rgb(227,225,45)" rx="2" ry="2" />
<text  x="15.74" y="863.5" ></text>
</g>
<g >
<title>pqResultAlloc (11,500,000 samples, 0.01%)</title><rect x="51.6" y="1541" width="0.1" height="15.0" fill="rgb(242,195,53)" rx="2" ry="2" />
<text  x="54.61" y="1551.5" ></text>
</g>
<g >
<title>__split_vma (43,500,000 samples, 0.04%)</title><rect x="49.4" y="1445" width="0.4" height="15.0" fill="rgb(245,50,40)" rx="2" ry="2" />
<text  x="52.38" y="1455.5" ></text>
</g>
<g >
<title>[ssm-agent-worker] (11,500,000 samples, 0.01%)</title><rect x="109.1" y="1541" width="0.1" height="15.0" fill="rgb(236,164,47)" rx="2" ry="2" />
<text  x="112.10" y="1551.5" ></text>
</g>
<g >
<title>_Fork (10,250,000 samples, 0.01%)</title><rect x="13.4" y="1557" width="0.1" height="15.0" fill="rgb(243,56,14)" rx="2" ry="2" />
<text  x="16.43" y="1567.5" ></text>
</g>
<g >
<title>uv__read (23,000,000 samples, 0.02%)</title><rect x="11.9" y="1445" width="0.2" height="15.0" fill="rgb(248,139,54)" rx="2" ry="2" />
<text  x="14.90" y="1455.5" ></text>
</g>
<g >
<title>pqResultAlloc (24,500,000 samples, 0.02%)</title><rect x="100.2" y="1557" width="0.2" height="15.0" fill="rgb(224,122,25)" rx="2" ry="2" />
<text  x="103.18" y="1567.5" ></text>
</g>
<g >
<title>run_builtin (54,000,000 samples, 0.05%)</title><rect x="14.0" y="1525" width="0.6" height="15.0" fill="rgb(234,185,30)" rx="2" ry="2" />
<text  x="17.02" y="1535.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (14,629,250,000 samples, 12.39%)</title><rect x="1043.7" y="1525" width="146.3" height="15.0" fill="rgb(206,107,18)" rx="2" ry="2" />
<text  x="1046.71" y="1535.5" >x86_64_start_reser..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,000,000 samples, 0.02%)</title><rect x="12.7" y="821" width="0.3" height="15.0" fill="rgb(249,137,52)" rx="2" ry="2" />
<text  x="15.74" y="831.5" ></text>
</g>
<g >
<title>uv__run_timers (31,000,000 samples, 0.03%)</title><rect x="12.2" y="1477" width="0.3" height="15.0" fill="rgb(221,106,35)" rx="2" ry="2" />
<text  x="15.20" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,500,000 samples, 0.01%)</title><rect x="12.8" y="421" width="0.1" height="15.0" fill="rgb(210,67,44)" rx="2" ry="2" />
<text  x="15.78" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (39,750,000 samples, 0.03%)</title><rect x="12.7" y="1413" width="0.4" height="15.0" fill="rgb(208,2,49)" rx="2" ry="2" />
<text  x="15.69" y="1423.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (14,629,250,000 samples, 12.39%)</title><rect x="1043.7" y="1541" width="146.3" height="15.0" fill="rgb(208,64,38)" rx="2" ry="2" />
<text  x="1046.71" y="1551.5" >x86_64_start_kernel</text>
</g>
<g >
<title>__cmd_record.constprop.0 (54,000,000 samples, 0.05%)</title><rect x="14.0" y="1493" width="0.6" height="15.0" fill="rgb(217,138,21)" rx="2" ry="2" />
<text  x="17.02" y="1503.5" ></text>
</g>
<g >
<title>__x64_sys_write (50,750,000 samples, 0.04%)</title><rect x="14.0" y="1381" width="0.6" height="15.0" fill="rgb(247,130,53)" rx="2" ry="2" />
<text  x="17.04" y="1391.5" ></text>
</g>
<g >
<title>handle_pte_fault (30,000,000 samples, 0.03%)</title><rect x="101.2" y="1461" width="0.3" height="15.0" fill="rgb(229,13,12)" rx="2" ry="2" />
<text  x="104.21" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21,000,000 samples, 0.02%)</title><rect x="12.8" y="597" width="0.2" height="15.0" fill="rgb(213,164,12)" rx="2" ry="2" />
<text  x="15.76" y="607.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (346,000,000 samples, 0.29%)</title><rect x="1186.4" y="1333" width="3.5" height="15.0" fill="rgb(226,133,34)" rx="2" ry="2" />
<text  x="1189.42" y="1343.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (16,250,000 samples, 0.01%)</title><rect x="51.4" y="1525" width="0.2" height="15.0" fill="rgb(238,42,31)" rx="2" ry="2" />
<text  x="54.44" y="1535.5" ></text>
</g>
<g >
<title>tts_buffer_heap_getsomeattrs (51,000,000 samples, 0.04%)</title><rect x="37.0" y="1557" width="0.5" height="15.0" fill="rgb(232,16,10)" rx="2" ry="2" />
<text  x="39.97" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18,250,000 samples, 0.02%)</title><rect x="12.8" y="501" width="0.2" height="15.0" fill="rgb(250,32,10)" rx="2" ry="2" />
<text  x="15.77" y="511.5" ></text>
</g>
<g >
<title>pqSkipnchar (14,750,000 samples, 0.01%)</title><rect x="100.5" y="1557" width="0.1" height="15.0" fill="rgb(218,179,48)" rx="2" ry="2" />
<text  x="103.49" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (32,500,000 samples, 0.03%)</title><rect x="12.7" y="1141" width="0.3" height="15.0" fill="rgb(222,118,44)" rx="2" ry="2" />
<text  x="15.72" y="1151.5" ></text>
</g>
<g >
<title>float8out (27,000,000 samples, 0.02%)</title><rect x="27.1" y="1525" width="0.3" height="15.0" fill="rgb(211,93,27)" rx="2" ry="2" />
<text  x="30.14" y="1535.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (37,000,000 samples, 0.03%)</title><rect x="50.4" y="1397" width="0.4" height="15.0" fill="rgb(244,35,20)" rx="2" ry="2" />
<text  x="53.41" y="1407.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::CompressionStream&lt;node::(anonymous namespace)::ZlibContext&gt;::AfterThreadPoolWork (58,500,000 samples, 0.05%)</title><rect x="11.2" y="1413" width="0.6" height="15.0" fill="rgb(205,27,54)" rx="2" ry="2" />
<text  x="14.18" y="1423.5" ></text>
</g>
<g >
<title>pg_utf_dsplen (962,000,000 samples, 0.82%)</title><rect x="65.6" y="1557" width="9.6" height="15.0" fill="rgb(236,44,8)" rx="2" ry="2" />
<text  x="68.59" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (29,500,000 samples, 0.02%)</title><rect x="12.7" y="1029" width="0.3" height="15.0" fill="rgb(216,94,11)" rx="2" ry="2" />
<text  x="15.73" y="1039.5" ></text>
</g>
<g >
<title>v8::internal::Execution::TryRunMicrotasks (41,000,000 samples, 0.03%)</title><rect x="11.3" y="1317" width="0.4" height="15.0" fill="rgb(241,60,40)" rx="2" ry="2" />
<text  x="14.30" y="1327.5" ></text>
</g>
</g>
</svg>
