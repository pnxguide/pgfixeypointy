<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2118" onload="init(evt)" viewBox="0 0 1200 2118" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2118.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2101" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2101" > </text>
<g id="frames">
<g >
<title>cpu_startup_entry (103,911,750,000 samples, 79.74%)</title><rect x="102.8" y="2005" width="940.8" height="15.0" fill="rgb(206,26,33)" rx="2" ry="2" />
<text  x="105.76" y="2015.5" >cpu_startup_entry</text>
</g>
<g >
<title>[perf-2123.map] (27,250,000 samples, 0.02%)</title><rect x="11.9" y="1461" width="0.2" height="15.0" fill="rgb(252,37,35)" rx="2" ry="2" />
<text  x="14.89" y="1471.5" ></text>
</g>
<g >
<title>do_user_addr_fault (15,250,000 samples, 0.01%)</title><rect x="54.2" y="1973" width="0.1" height="15.0" fill="rgb(228,78,3)" rx="2" ry="2" />
<text  x="57.18" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1445" width="0.2" height="15.0" fill="rgb(240,42,14)" rx="2" ry="2" />
<text  x="17.44" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1461" width="0.2" height="15.0" fill="rgb(214,213,54)" rx="2" ry="2" />
<text  x="17.44" y="1471.5" ></text>
</g>
<g >
<title>__filemap_get_folio (18,250,000 samples, 0.01%)</title><rect x="14.8" y="1701" width="0.2" height="15.0" fill="rgb(230,36,30)" rx="2" ry="2" />
<text  x="17.81" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="245" width="0.2" height="15.0" fill="rgb(239,83,22)" rx="2" ry="2" />
<text  x="17.44" y="255.5" ></text>
</g>
<g >
<title>exc_page_fault (45,000,000 samples, 0.03%)</title><rect x="95.6" y="2005" width="0.4" height="15.0" fill="rgb(216,117,35)" rx="2" ry="2" />
<text  x="98.63" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="293" width="0.2" height="15.0" fill="rgb(251,136,22)" rx="2" ry="2" />
<text  x="17.44" y="303.5" ></text>
</g>
<g >
<title>__alloc_skb (25,750,000 samples, 0.02%)</title><rect x="31.9" y="1893" width="0.3" height="15.0" fill="rgb(230,99,54)" rx="2" ry="2" />
<text  x="34.93" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20,000,000 samples, 0.02%)</title><rect x="13.2" y="1013" width="0.1" height="15.0" fill="rgb(245,143,25)" rx="2" ry="2" />
<text  x="16.16" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1893" width="0.2" height="15.0" fill="rgb(205,183,6)" rx="2" ry="2" />
<text  x="17.44" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="965" width="0.2" height="15.0" fill="rgb(221,140,19)" rx="2" ry="2" />
<text  x="17.44" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,500,000 samples, 0.03%)</title><rect x="13.1" y="1685" width="0.3" height="15.0" fill="rgb(252,163,1)" rx="2" ry="2" />
<text  x="16.09" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="405" width="0.2" height="15.0" fill="rgb(249,10,20)" rx="2" ry="2" />
<text  x="17.44" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="469" width="0.2" height="15.0" fill="rgb(223,116,13)" rx="2" ry="2" />
<text  x="17.44" y="479.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (115,750,000 samples, 0.09%)</title><rect x="55.2" y="2005" width="1.0" height="15.0" fill="rgb(220,181,14)" rx="2" ry="2" />
<text  x="58.18" y="2015.5" ></text>
</g>
<g >
<title>pg_encoding_dsplen (372,500,000 samples, 0.29%)</title><rect x="58.6" y="2037" width="3.3" height="15.0" fill="rgb(210,43,7)" rx="2" ry="2" />
<text  x="61.56" y="2047.5" ></text>
</g>
<g >
<title>__x64_sys_poll (40,750,000 samples, 0.03%)</title><rect x="56.4" y="1989" width="0.4" height="15.0" fill="rgb(235,90,32)" rx="2" ry="2" />
<text  x="59.42" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="261" width="0.2" height="15.0" fill="rgb(217,41,5)" rx="2" ry="2" />
<text  x="17.44" y="271.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (16,154,000,000 samples, 12.40%)</title><rect x="1043.7" y="1861" width="146.2" height="15.0" fill="rgb(230,155,31)" rx="2" ry="2" />
<text  x="1046.65" y="1871.5" >cpuidle_enter_state</text>
</g>
<g >
<title>native_safe_halt (103,865,000,000 samples, 79.70%)</title><rect x="102.9" y="1893" width="940.4" height="15.0" fill="rgb(216,41,5)" rx="2" ry="2" />
<text  x="105.87" y="1903.5" >native_safe_halt</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1157" width="0.2" height="15.0" fill="rgb(245,137,18)" rx="2" ry="2" />
<text  x="17.44" y="1167.5" ></text>
</g>
<g >
<title>vma_alloc_folio (18,000,000 samples, 0.01%)</title><rect x="45.0" y="1909" width="0.2" height="15.0" fill="rgb(241,168,15)" rx="2" ry="2" />
<text  x="48.02" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="53" width="0.2" height="15.0" fill="rgb(215,196,46)" rx="2" ry="2" />
<text  x="17.44" y="63.5" ></text>
</g>
<g >
<title>do_syscall_64 (82,500,000 samples, 0.06%)</title><rect x="30.8" y="2005" width="0.8" height="15.0" fill="rgb(253,175,6)" rx="2" ry="2" />
<text  x="33.85" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1909" width="0.2" height="15.0" fill="rgb(210,36,11)" rx="2" ry="2" />
<text  x="17.44" y="1919.5" ></text>
</g>
<g >
<title>consume_skb (41,750,000 samples, 0.03%)</title><rect x="55.3" y="1893" width="0.3" height="15.0" fill="rgb(245,196,25)" rx="2" ry="2" />
<text  x="58.26" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="341" width="0.2" height="15.0" fill="rgb(254,70,44)" rx="2" ry="2" />
<text  x="17.44" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="725" width="0.2" height="15.0" fill="rgb(221,36,8)" rx="2" ry="2" />
<text  x="17.44" y="735.5" ></text>
</g>
<g >
<title>printQuery (31,000,000 samples, 0.02%)</title><rect x="54.7" y="2021" width="0.3" height="15.0" fill="rgb(239,203,26)" rx="2" ry="2" />
<text  x="57.74" y="2031.5" ></text>
</g>
<g >
<title>node::StreamBase::CallJSOnreadMethod (20,500,000 samples, 0.02%)</title><rect x="12.3" y="1861" width="0.2" height="15.0" fill="rgb(243,128,33)" rx="2" ry="2" />
<text  x="15.35" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="789" width="0.2" height="15.0" fill="rgb(221,55,21)" rx="2" ry="2" />
<text  x="17.44" y="799.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,250,000 samples, 0.02%)</title><rect x="13.1" y="1157" width="0.3" height="15.0" fill="rgb(251,167,6)" rx="2" ry="2" />
<text  x="16.14" y="1167.5" ></text>
</g>
<g >
<title>exc_page_fault (15,500,000 samples, 0.01%)</title><rect x="54.2" y="1989" width="0.1" height="15.0" fill="rgb(253,109,41)" rx="2" ry="2" />
<text  x="57.18" y="1999.5" ></text>
</g>
<g >
<title>__x64_sys_clone (14,250,000 samples, 0.01%)</title><rect x="13.8" y="1989" width="0.2" height="15.0" fill="rgb(221,36,32)" rx="2" ry="2" />
<text  x="16.83" y="1999.5" ></text>
</g>
<g >
<title>utf8_to_unicode (349,750,000 samples, 0.27%)</title><rect x="99.2" y="2037" width="3.2" height="15.0" fill="rgb(219,145,19)" rx="2" ry="2" />
<text  x="102.19" y="2047.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (50,750,000 samples, 0.04%)</title><rect x="55.7" y="1829" width="0.5" height="15.0" fill="rgb(227,119,9)" rx="2" ry="2" />
<text  x="58.74" y="1839.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (19,000,000 samples, 0.01%)</title><rect x="14.8" y="1733" width="0.2" height="15.0" fill="rgb(207,4,14)" rx="2" ry="2" />
<text  x="17.81" y="1743.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (61,000,000 samples, 0.05%)</title><rect x="14.6" y="1957" width="0.5" height="15.0" fill="rgb(215,227,27)" rx="2" ry="2" />
<text  x="17.58" y="1967.5" ></text>
</g>
<g >
<title>get_page_from_freelist (14,000,000 samples, 0.01%)</title><rect x="45.1" y="1861" width="0.1" height="15.0" fill="rgb(205,136,19)" rx="2" ry="2" />
<text  x="48.05" y="1871.5" ></text>
</g>
<g >
<title>vfs_write (58,000,000 samples, 0.04%)</title><rect x="14.6" y="1829" width="0.5" height="15.0" fill="rgb(215,97,30)" rx="2" ry="2" />
<text  x="17.60" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1733" width="0.2" height="15.0" fill="rgb(239,59,30)" rx="2" ry="2" />
<text  x="17.44" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="581" width="0.2" height="15.0" fill="rgb(247,188,11)" rx="2" ry="2" />
<text  x="17.44" y="591.5" ></text>
</g>
<g >
<title>[libc.so.6] (340,000,000 samples, 0.26%)</title><rect x="42.3" y="2037" width="3.1" height="15.0" fill="rgb(232,104,16)" rx="2" ry="2" />
<text  x="45.32" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1749" width="0.2" height="15.0" fill="rgb(207,73,37)" rx="2" ry="2" />
<text  x="17.44" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="2037" width="0.2" height="15.0" fill="rgb(233,124,34)" rx="2" ry="2" />
<text  x="17.44" y="2047.5" ></text>
</g>
<g >
<title>filemap_read (74,250,000 samples, 0.06%)</title><rect x="30.9" y="1909" width="0.7" height="15.0" fill="rgb(211,70,46)" rx="2" ry="2" />
<text  x="33.88" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1093" width="0.2" height="15.0" fill="rgb(206,188,13)" rx="2" ry="2" />
<text  x="17.44" y="1103.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24,250,000 samples, 0.02%)</title><rect x="13.1" y="1173" width="0.3" height="15.0" fill="rgb(248,97,51)" rx="2" ry="2" />
<text  x="16.14" y="1183.5" ></text>
</g>
<g >
<title>InotifyBackend::handleSubscription (46,000,000 samples, 0.04%)</title><rect x="13.0" y="1957" width="0.5" height="15.0" fill="rgb(249,69,9)" rx="2" ry="2" />
<text  x="16.04" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1861" width="0.2" height="15.0" fill="rgb(211,20,20)" rx="2" ry="2" />
<text  x="17.44" y="1871.5" ></text>
</g>
<g >
<title>dup_mmap (13,500,000 samples, 0.01%)</title><rect x="13.8" y="1909" width="0.2" height="15.0" fill="rgb(209,180,52)" rx="2" ry="2" />
<text  x="16.83" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="85" width="0.2" height="15.0" fill="rgb(224,176,54)" rx="2" ry="2" />
<text  x="17.44" y="95.5" ></text>
</g>
<g >
<title>do_sys_poll (39,000,000 samples, 0.03%)</title><rect x="56.4" y="1973" width="0.4" height="15.0" fill="rgb(252,160,18)" rx="2" ry="2" />
<text  x="59.43" y="1983.5" ></text>
</g>
<g >
<title>unmap_single_vma (26,500,000 samples, 0.02%)</title><rect x="53.6" y="1893" width="0.3" height="15.0" fill="rgb(234,11,7)" rx="2" ry="2" />
<text  x="56.62" y="1903.5" ></text>
</g>
<g >
<title>hash_search_with_hash_value (13,500,000 samples, 0.01%)</title><rect x="39.7" y="2037" width="0.1" height="15.0" fill="rgb(215,1,42)" rx="2" ry="2" />
<text  x="42.67" y="2047.5" ></text>
</g>
<g >
<title>[perf-2123.map] (23,250,000 samples, 0.02%)</title><rect x="11.9" y="1413" width="0.2" height="15.0" fill="rgb(216,194,54)" rx="2" ry="2" />
<text  x="14.93" y="1423.5" ></text>
</g>
<g >
<title>__put_page (13,250,000 samples, 0.01%)</title><rect x="55.4" y="1861" width="0.1" height="15.0" fill="rgb(237,68,18)" rx="2" ry="2" />
<text  x="58.36" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,500,000 samples, 0.03%)</title><rect x="13.1" y="1781" width="0.3" height="15.0" fill="rgb(238,213,2)" rx="2" ry="2" />
<text  x="16.08" y="1791.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (21,500,000 samples, 0.02%)</title><rect x="53.7" y="1861" width="0.2" height="15.0" fill="rgb(229,160,39)" rx="2" ry="2" />
<text  x="56.67" y="1871.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (51,000,000 samples, 0.04%)</title><rect x="14.7" y="1781" width="0.4" height="15.0" fill="rgb(251,202,28)" rx="2" ry="2" />
<text  x="17.66" y="1791.5" ></text>
</g>
<g >
<title>[perf-2123.map] (32,500,000 samples, 0.02%)</title><rect x="11.8" y="1685" width="0.3" height="15.0" fill="rgb(238,142,28)" rx="2" ry="2" />
<text  x="14.85" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="389" width="0.2" height="15.0" fill="rgb(221,87,46)" rx="2" ry="2" />
<text  x="17.44" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (12,250,000 samples, 0.01%)</title><rect x="14.0" y="2005" width="0.1" height="15.0" fill="rgb(216,124,13)" rx="2" ry="2" />
<text  x="16.98" y="2015.5" ></text>
</g>
<g >
<title>__x64_sys_pread64 (80,250,000 samples, 0.06%)</title><rect x="30.8" y="1989" width="0.8" height="15.0" fill="rgb(227,41,6)" rx="2" ry="2" />
<text  x="33.85" y="1999.5" ></text>
</g>
<g >
<title>heapgetpage (21,000,000 samples, 0.02%)</title><rect x="39.9" y="2037" width="0.2" height="15.0" fill="rgb(237,215,1)" rx="2" ry="2" />
<text  x="42.93" y="2047.5" ></text>
</g>
<g >
<title>malloc (15,250,000 samples, 0.01%)</title><rect x="14.1" y="2037" width="0.1" height="15.0" fill="rgb(241,199,13)" rx="2" ry="2" />
<text  x="17.09" y="2047.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (11,750,000 samples, 0.01%)</title><rect x="12.4" y="1781" width="0.1" height="15.0" fill="rgb(212,102,5)" rx="2" ry="2" />
<text  x="15.35" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1973" width="0.2" height="15.0" fill="rgb(223,61,26)" rx="2" ry="2" />
<text  x="17.44" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="869" width="0.2" height="15.0" fill="rgb(246,211,54)" rx="2" ry="2" />
<text  x="17.44" y="879.5" ></text>
</g>
<g >
<title>uv__read (23,750,000 samples, 0.02%)</title><rect x="12.3" y="1925" width="0.3" height="15.0" fill="rgb(237,70,22)" rx="2" ry="2" />
<text  x="15.34" y="1935.5" ></text>
</g>
<g >
<title>do_anonymous_page (82,250,000 samples, 0.06%)</title><rect x="44.4" y="1925" width="0.8" height="15.0" fill="rgb(238,0,7)" rx="2" ry="2" />
<text  x="47.44" y="1935.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (141,000,000 samples, 0.11%)</title><rect x="32.7" y="1909" width="1.3" height="15.0" fill="rgb(246,59,6)" rx="2" ry="2" />
<text  x="35.69" y="1919.5" ></text>
</g>
<g >
<title>get_str_from_var (605,750,000 samples, 0.46%)</title><rect x="34.2" y="2037" width="5.5" height="15.0" fill="rgb(229,134,1)" rx="2" ry="2" />
<text  x="37.18" y="2047.5" ></text>
</g>
<g >
<title>__alloc_pages (53,750,000 samples, 0.04%)</title><rect x="32.2" y="1877" width="0.5" height="15.0" fill="rgb(244,46,51)" rx="2" ry="2" />
<text  x="35.16" y="1887.5" ></text>
</g>
<g >
<title>cpuUsage.sh (67,750,000 samples, 0.05%)</title><rect x="10.5" y="2053" width="0.6" height="15.0" fill="rgb(206,136,31)" rx="2" ry="2" />
<text  x="13.48" y="2063.5" ></text>
</g>
<g >
<title>[libc.so.6] (40,250,000 samples, 0.03%)</title><rect x="16.7" y="2037" width="0.3" height="15.0" fill="rgb(246,78,40)" rx="2" ry="2" />
<text  x="19.67" y="2047.5" ></text>
</g>
<g >
<title>OutputFunctionCall (25,500,000 samples, 0.02%)</title><rect x="26.4" y="2005" width="0.2" height="15.0" fill="rgb(231,115,26)" rx="2" ry="2" />
<text  x="29.40" y="2015.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::Close (49,000,000 samples, 0.04%)</title><rect x="11.7" y="1845" width="0.4" height="15.0" fill="rgb(242,9,19)" rx="2" ry="2" />
<text  x="14.70" y="1855.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (11,750,000 samples, 0.01%)</title><rect x="12.4" y="1765" width="0.1" height="15.0" fill="rgb(253,96,48)" rx="2" ry="2" />
<text  x="15.35" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24,250,000 samples, 0.02%)</title><rect x="13.1" y="1221" width="0.3" height="15.0" fill="rgb(206,43,8)" rx="2" ry="2" />
<text  x="16.14" y="1231.5" ></text>
</g>
<g >
<title>rest_init (16,159,750,000 samples, 12.40%)</title><rect x="1043.6" y="1957" width="146.4" height="15.0" fill="rgb(233,71,14)" rx="2" ry="2" />
<text  x="1046.65" y="1967.5" >rest_init</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="117" width="0.2" height="15.0" fill="rgb(242,18,7)" rx="2" ry="2" />
<text  x="17.44" y="127.5" ></text>
</g>
<g >
<title>schedule (19,750,000 samples, 0.02%)</title><rect x="56.5" y="1909" width="0.2" height="15.0" fill="rgb(253,192,50)" rx="2" ry="2" />
<text  x="59.51" y="1919.5" ></text>
</g>
<g >
<title>dup_mm (13,500,000 samples, 0.01%)</title><rect x="13.8" y="1925" width="0.2" height="15.0" fill="rgb(210,55,30)" rx="2" ry="2" />
<text  x="16.83" y="1935.5" ></text>
</g>
<g >
<title>acpi_idle_enter (16,154,000,000 samples, 12.40%)</title><rect x="1043.7" y="1845" width="146.2" height="15.0" fill="rgb(206,5,21)" rx="2" ry="2" />
<text  x="1046.65" y="1855.5" >acpi_idle_enter</text>
</g>
<g >
<title>postgres (2,948,000,000 samples, 2.26%)</title><rect x="15.1" y="2053" width="26.7" height="15.0" fill="rgb(219,228,40)" rx="2" ry="2" />
<text  x="18.14" y="2063.5" >p..</text>
</g>
<g >
<title>__x64_sys_sendto (258,500,000 samples, 0.20%)</title><rect x="31.6" y="1989" width="2.4" height="15.0" fill="rgb(206,26,49)" rx="2" ry="2" />
<text  x="34.63" y="1999.5" ></text>
</g>
<g >
<title>pagecache_get_page (19,000,000 samples, 0.01%)</title><rect x="14.8" y="1717" width="0.2" height="15.0" fill="rgb(251,222,18)" rx="2" ry="2" />
<text  x="17.81" y="1727.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (15,500,000 samples, 0.01%)</title><rect x="54.2" y="2005" width="0.1" height="15.0" fill="rgb(250,205,13)" rx="2" ry="2" />
<text  x="57.18" y="2015.5" ></text>
</g>
<g >
<title>pqResultAlloc (12,500,000 samples, 0.01%)</title><rect x="54.3" y="2021" width="0.2" height="15.0" fill="rgb(230,152,21)" rx="2" ry="2" />
<text  x="57.35" y="2031.5" ></text>
</g>
<g >
<title>pg_utf_dsplen (902,250,000 samples, 0.69%)</title><rect x="65.5" y="2037" width="8.2" height="15.0" fill="rgb(207,121,9)" rx="2" ry="2" />
<text  x="68.49" y="2047.5" ></text>
</g>
<g >
<title>_Fork (14,250,000 samples, 0.01%)</title><rect x="13.8" y="2037" width="0.2" height="15.0" fill="rgb(232,182,30)" rx="2" ry="2" />
<text  x="16.83" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (32,750,000 samples, 0.03%)</title><rect x="13.1" y="1573" width="0.3" height="15.0" fill="rgb(229,137,42)" rx="2" ry="2" />
<text  x="16.11" y="1583.5" ></text>
</g>
<g >
<title>PQgetvalue (16,000,000 samples, 0.01%)</title><rect x="51.5" y="2021" width="0.1" height="15.0" fill="rgb(206,77,54)" rx="2" ry="2" />
<text  x="54.48" y="2031.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (103,874,250,000 samples, 79.71%)</title><rect x="102.8" y="1973" width="940.5" height="15.0" fill="rgb(238,222,23)" rx="2" ry="2" />
<text  x="105.79" y="1983.5" >cpuidle_idle_call</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,000,000 samples, 0.02%)</title><rect x="13.1" y="1141" width="0.3" height="15.0" fill="rgb(244,20,30)" rx="2" ry="2" />
<text  x="16.14" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41,500,000 samples, 0.03%)</title><rect x="13.1" y="1861" width="0.3" height="15.0" fill="rgb(222,147,49)" rx="2" ry="2" />
<text  x="16.07" y="1871.5" ></text>
</g>
<g >
<title>node::LibuvStreamWrap::ReadStart (22,750,000 samples, 0.02%)</title><rect x="12.3" y="1909" width="0.2" height="15.0" fill="rgb(254,35,6)" rx="2" ry="2" />
<text  x="15.34" y="1919.5" ></text>
</g>
<g >
<title>release_pages (36,500,000 samples, 0.03%)</title><rect x="53.3" y="1861" width="0.3" height="15.0" fill="rgb(222,15,26)" rx="2" ry="2" />
<text  x="56.25" y="1871.5" ></text>
</g>
<g >
<title>ExecStoreBufferHeapTuple (46,750,000 samples, 0.04%)</title><rect x="15.8" y="2037" width="0.4" height="15.0" fill="rgb(244,22,17)" rx="2" ry="2" />
<text  x="18.80" y="2047.5" ></text>
</g>
<g >
<title>[libc.so.6] (18,500,000 samples, 0.01%)</title><rect x="13.6" y="2021" width="0.2" height="15.0" fill="rgb(239,5,26)" rx="2" ry="2" />
<text  x="16.62" y="2031.5" ></text>
</g>
<g >
<title>recv (118,750,000 samples, 0.09%)</title><rect x="55.2" y="2021" width="1.0" height="15.0" fill="rgb(212,211,1)" rx="2" ry="2" />
<text  x="58.16" y="2031.5" ></text>
</g>
<g >
<title>__alloc_pages (16,750,000 samples, 0.01%)</title><rect x="45.0" y="1877" width="0.2" height="15.0" fill="rgb(206,175,52)" rx="2" ry="2" />
<text  x="48.03" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1189" width="0.2" height="15.0" fill="rgb(228,83,23)" rx="2" ry="2" />
<text  x="17.44" y="1199.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (59,500,000 samples, 0.05%)</title><rect x="55.7" y="1877" width="0.5" height="15.0" fill="rgb(219,143,48)" rx="2" ry="2" />
<text  x="58.66" y="1887.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (38,750,000 samples, 0.03%)</title><rect x="11.8" y="1765" width="0.3" height="15.0" fill="rgb(227,197,28)" rx="2" ry="2" />
<text  x="14.80" y="1775.5" ></text>
</g>
<g >
<title>do_idle (16,158,750,000 samples, 12.40%)</title><rect x="1043.7" y="1925" width="146.3" height="15.0" fill="rgb(213,53,34)" rx="2" ry="2" />
<text  x="1046.65" y="1935.5" >do_idle</text>
</g>
<g >
<title>node::ThreadPoolWork::ScheduleWork (56,000,000 samples, 0.04%)</title><rect x="11.7" y="1909" width="0.5" height="15.0" fill="rgb(246,97,12)" rx="2" ry="2" />
<text  x="14.70" y="1919.5" ></text>
</g>
<g >
<title>do_syscall_64 (259,500,000 samples, 0.20%)</title><rect x="31.6" y="2005" width="2.4" height="15.0" fill="rgb(222,172,43)" rx="2" ry="2" />
<text  x="34.63" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1653" width="0.2" height="15.0" fill="rgb(249,128,25)" rx="2" ry="2" />
<text  x="17.44" y="1663.5" ></text>
</g>
<g >
<title>ExecScanFetch (14,250,000 samples, 0.01%)</title><rect x="18.6" y="2021" width="0.1" height="15.0" fill="rgb(223,129,22)" rx="2" ry="2" />
<text  x="21.59" y="2031.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (203,750,000 samples, 0.16%)</title><rect x="52.2" y="2005" width="1.8" height="15.0" fill="rgb(234,16,6)" rx="2" ry="2" />
<text  x="55.18" y="2015.5" ></text>
</g>
<g >
<title>PQclear (19,750,000 samples, 0.02%)</title><rect x="50.7" y="2021" width="0.2" height="15.0" fill="rgb(241,19,42)" rx="2" ry="2" />
<text  x="53.68" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1765" width="0.2" height="15.0" fill="rgb(217,159,44)" rx="2" ry="2" />
<text  x="17.44" y="1775.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (32,750,000 samples, 0.03%)</title><rect x="56.5" y="1957" width="0.3" height="15.0" fill="rgb(212,35,21)" rx="2" ry="2" />
<text  x="59.45" y="1967.5" ></text>
</g>
<g >
<title>pg_detoast_datum (20,750,000 samples, 0.02%)</title><rect x="29.6" y="2005" width="0.2" height="15.0" fill="rgb(212,151,24)" rx="2" ry="2" />
<text  x="32.57" y="2015.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (163,750,000 samples, 0.13%)</title><rect x="43.9" y="2021" width="1.5" height="15.0" fill="rgb(214,137,33)" rx="2" ry="2" />
<text  x="46.91" y="2031.5" ></text>
</g>
<g >
<title>handle_mm_fault (30,500,000 samples, 0.02%)</title><rect x="95.8" y="1973" width="0.2" height="15.0" fill="rgb(240,52,16)" rx="2" ry="2" />
<text  x="98.75" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1413" width="0.2" height="15.0" fill="rgb(248,41,54)" rx="2" ry="2" />
<text  x="17.44" y="1423.5" ></text>
</g>
<g >
<title>Builtins_RunMicrotasks (38,750,000 samples, 0.03%)</title><rect x="11.8" y="1733" width="0.3" height="15.0" fill="rgb(249,138,36)" rx="2" ry="2" />
<text  x="14.80" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (28,750,000 samples, 0.02%)</title><rect x="13.1" y="1429" width="0.3" height="15.0" fill="rgb(214,116,12)" rx="2" ry="2" />
<text  x="16.13" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;,  (44,000,000 samples, 0.03%)</title><rect x="13.0" y="1909" width="0.4" height="15.0" fill="rgb(210,137,2)" rx="2" ry="2" />
<text  x="16.05" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1669" width="0.2" height="15.0" fill="rgb(238,208,25)" rx="2" ry="2" />
<text  x="17.44" y="1679.5" ></text>
</g>
<g >
<title>printTableAddCell (80,500,000 samples, 0.06%)</title><rect x="95.3" y="2037" width="0.7" height="15.0" fill="rgb(222,171,50)" rx="2" ry="2" />
<text  x="98.30" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (13,750,000 samples, 0.01%)</title><rect x="13.2" y="741" width="0.1" height="15.0" fill="rgb(230,226,29)" rx="2" ry="2" />
<text  x="16.19" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (30,750,000 samples, 0.02%)</title><rect x="13.1" y="1493" width="0.3" height="15.0" fill="rgb(221,113,15)" rx="2" ry="2" />
<text  x="16.12" y="1503.5" ></text>
</g>
<g >
<title>__x64_sys_execve (12,250,000 samples, 0.01%)</title><rect x="14.0" y="1989" width="0.1" height="15.0" fill="rgb(206,131,1)" rx="2" ry="2" />
<text  x="16.98" y="1999.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (27,500,000 samples, 0.02%)</title><rect x="12.6" y="1893" width="0.3" height="15.0" fill="rgb(243,199,43)" rx="2" ry="2" />
<text  x="15.63" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,250,000 samples, 0.02%)</title><rect x="13.1" y="1269" width="0.3" height="15.0" fill="rgb(207,219,24)" rx="2" ry="2" />
<text  x="16.14" y="1279.5" ></text>
</g>
<g >
<title>InotifyBackend::handleEvents (53,750,000 samples, 0.04%)</title><rect x="13.0" y="1989" width="0.5" height="15.0" fill="rgb(233,57,11)" rx="2" ry="2" />
<text  x="16.04" y="1999.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,500,000 samples, 0.02%)</title><rect x="11.9" y="1605" width="0.2" height="15.0" fill="rgb(254,160,50)" rx="2" ry="2" />
<text  x="14.86" y="1615.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::RunMicrotasks (38,750,000 samples, 0.03%)</title><rect x="11.8" y="1813" width="0.3" height="15.0" fill="rgb(213,91,31)" rx="2" ry="2" />
<text  x="14.80" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20,000,000 samples, 0.02%)</title><rect x="13.2" y="981" width="0.1" height="15.0" fill="rgb(252,47,2)" rx="2" ry="2" />
<text  x="16.16" y="991.5" ></text>
</g>
<g >
<title>ps (35,500,000 samples, 0.03%)</title><rect x="41.8" y="2053" width="0.4" height="15.0" fill="rgb(215,202,54)" rx="2" ry="2" />
<text  x="44.83" y="2063.5" ></text>
</g>
<g >
<title>zap_pte_range (15,250,000 samples, 0.01%)</title><rect x="53.7" y="1845" width="0.2" height="15.0" fill="rgb(217,130,4)" rx="2" ry="2" />
<text  x="56.72" y="1855.5" ></text>
</g>
<g >
<title>pqGetc (17,000,000 samples, 0.01%)</title><rect x="94.1" y="2037" width="0.2" height="15.0" fill="rgb(241,221,32)" rx="2" ry="2" />
<text  x="97.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,000,000 samples, 0.01%)</title><rect x="13.2" y="597" width="0.1" height="15.0" fill="rgb(206,188,48)" rx="2" ry="2" />
<text  x="16.20" y="607.5" ></text>
</g>
<g >
<title>pqRowProcessor (28,750,000 samples, 0.02%)</title><rect x="54.5" y="2021" width="0.2" height="15.0" fill="rgb(251,65,52)" rx="2" ry="2" />
<text  x="57.46" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,000,000 samples, 0.03%)</title><rect x="13.1" y="1749" width="0.3" height="15.0" fill="rgb(224,112,39)" rx="2" ry="2" />
<text  x="16.09" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="805" width="0.2" height="15.0" fill="rgb(206,151,40)" rx="2" ry="2" />
<text  x="17.44" y="815.5" ></text>
</g>
<g >
<title>[unknown] (22,250,000 samples, 0.02%)</title><rect x="13.6" y="2037" width="0.2" height="15.0" fill="rgb(236,2,30)" rx="2" ry="2" />
<text  x="16.62" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1509" width="0.2" height="15.0" fill="rgb(240,72,51)" rx="2" ry="2" />
<text  x="17.44" y="1519.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (27,250,000 samples, 0.02%)</title><rect x="12.6" y="1877" width="0.3" height="15.0" fill="rgb(243,109,16)" rx="2" ry="2" />
<text  x="15.63" y="1887.5" ></text>
</g>
<g >
<title>uv__async_io.part.1 (73,250,000 samples, 0.06%)</title><rect x="11.6" y="1941" width="0.7" height="15.0" fill="rgb(254,197,49)" rx="2" ry="2" />
<text  x="14.60" y="1951.5" ></text>
</g>
<g >
<title>call_cpuidle (16,154,000,000 samples, 12.40%)</title><rect x="1043.7" y="1893" width="146.2" height="15.0" fill="rgb(248,75,11)" rx="2" ry="2" />
<text  x="1046.65" y="1903.5" >call_cpuidle</text>
</g>
<g >
<title>ext4_file_write_iter (51,250,000 samples, 0.04%)</title><rect x="14.7" y="1797" width="0.4" height="15.0" fill="rgb(224,182,54)" rx="2" ry="2" />
<text  x="17.66" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1317" width="0.2" height="15.0" fill="rgb(225,66,18)" rx="2" ry="2" />
<text  x="17.44" y="1327.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (48,750,000 samples, 0.04%)</title><rect x="56.4" y="2021" width="0.4" height="15.0" fill="rgb(247,217,20)" rx="2" ry="2" />
<text  x="59.41" y="2031.5" ></text>
</g>
<g >
<title>Builtins_JSRunMicrotasksEntry (38,750,000 samples, 0.03%)</title><rect x="11.8" y="1749" width="0.3" height="15.0" fill="rgb(230,84,29)" rx="2" ry="2" />
<text  x="14.80" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (15,500,000 samples, 0.01%)</title><rect x="13.2" y="805" width="0.1" height="15.0" fill="rgb(214,167,16)" rx="2" ry="2" />
<text  x="16.18" y="815.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22,250,000 samples, 0.02%)</title><rect x="13.1" y="1093" width="0.2" height="15.0" fill="rgb(209,59,42)" rx="2" ry="2" />
<text  x="16.14" y="1103.5" ></text>
</g>
<g >
<title>MemoryContextReset (14,000,000 samples, 0.01%)</title><rect x="26.3" y="2005" width="0.1" height="15.0" fill="rgb(221,74,21)" rx="2" ry="2" />
<text  x="29.28" y="2015.5" ></text>
</g>
<g >
<title>search_binary_handler (12,250,000 samples, 0.01%)</title><rect x="14.0" y="1909" width="0.1" height="15.0" fill="rgb(247,132,34)" rx="2" ry="2" />
<text  x="16.98" y="1919.5" ></text>
</g>
<g >
<title>vm_area_dup (16,250,000 samples, 0.01%)</title><rect x="52.5" y="1909" width="0.1" height="15.0" fill="rgb(229,63,23)" rx="2" ry="2" />
<text  x="55.46" y="1919.5" ></text>
</g>
<g >
<title>get_page_from_freelist (34,750,000 samples, 0.03%)</title><rect x="32.3" y="1861" width="0.3" height="15.0" fill="rgb(229,121,41)" rx="2" ry="2" />
<text  x="35.29" y="1871.5" ></text>
</g>
<g >
<title>handle_pte_fault (103,750,000 samples, 0.08%)</title><rect x="44.4" y="1941" width="1.0" height="15.0" fill="rgb(233,179,34)" rx="2" ry="2" />
<text  x="47.41" y="1951.5" ></text>
</g>
<g >
<title>AllocSetReset (30,000,000 samples, 0.02%)</title><rect x="15.5" y="2037" width="0.3" height="15.0" fill="rgb(236,18,52)" rx="2" ry="2" />
<text  x="18.50" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1477" width="0.2" height="15.0" fill="rgb(240,44,35)" rx="2" ry="2" />
<text  x="17.44" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (32,750,000 samples, 0.03%)</title><rect x="13.1" y="1589" width="0.3" height="15.0" fill="rgb(213,83,16)" rx="2" ry="2" />
<text  x="16.11" y="1599.5" ></text>
</g>
<g >
<title>pqResultAlloc (25,250,000 samples, 0.02%)</title><rect x="94.9" y="2037" width="0.2" height="15.0" fill="rgb(242,179,24)" rx="2" ry="2" />
<text  x="97.86" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="373" width="0.2" height="15.0" fill="rgb(242,218,21)" rx="2" ry="2" />
<text  x="17.44" y="383.5" ></text>
</g>
<g >
<title>unmap_region (115,000,000 samples, 0.09%)</title><rect x="52.8" y="1925" width="1.1" height="15.0" fill="rgb(243,151,51)" rx="2" ry="2" />
<text  x="55.82" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1365" width="0.2" height="15.0" fill="rgb(236,206,52)" rx="2" ry="2" />
<text  x="17.44" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (37,000,000 samples, 0.03%)</title><rect x="13.1" y="1733" width="0.3" height="15.0" fill="rgb(237,98,51)" rx="2" ry="2" />
<text  x="16.09" y="1743.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (140,000,000 samples, 0.11%)</title><rect x="32.7" y="1877" width="1.3" height="15.0" fill="rgb(246,80,12)" rx="2" ry="2" />
<text  x="35.70" y="1887.5" ></text>
</g>
<g >
<title>write (58,750,000 samples, 0.05%)</title><rect x="14.6" y="1909" width="0.5" height="15.0" fill="rgb(229,111,22)" rx="2" ry="2" />
<text  x="17.59" y="1919.5" ></text>
</g>
<g >
<title>bprm_execve (12,250,000 samples, 0.01%)</title><rect x="14.0" y="1957" width="0.1" height="15.0" fill="rgb(245,1,43)" rx="2" ry="2" />
<text  x="16.98" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1397" width="0.2" height="15.0" fill="rgb(241,69,41)" rx="2" ry="2" />
<text  x="17.44" y="1407.5" ></text>
</g>
<g >
<title>schedule_idle (30,500,000 samples, 0.02%)</title><rect x="1043.3" y="1973" width="0.3" height="15.0" fill="rgb(252,51,25)" rx="2" ry="2" />
<text  x="1046.34" y="1983.5" ></text>
</g>
<g >
<title>printtup (14,250,000 samples, 0.01%)</title><rect x="25.4" y="2021" width="0.1" height="15.0" fill="rgb(244,6,5)" rx="2" ry="2" />
<text  x="28.40" y="2031.5" ></text>
</g>
<g >
<title>do_user_addr_fault (44,500,000 samples, 0.03%)</title><rect x="95.6" y="1989" width="0.4" height="15.0" fill="rgb(254,149,14)" rx="2" ry="2" />
<text  x="98.63" y="1999.5" ></text>
</g>
<g >
<title>handle_pte_fault (29,000,000 samples, 0.02%)</title><rect x="95.8" y="1941" width="0.2" height="15.0" fill="rgb(223,171,42)" rx="2" ry="2" />
<text  x="98.76" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,750,000 samples, 0.01%)</title><rect x="13.2" y="677" width="0.1" height="15.0" fill="rgb(214,38,24)" rx="2" ry="2" />
<text  x="16.20" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1109" width="0.2" height="15.0" fill="rgb(247,222,50)" rx="2" ry="2" />
<text  x="17.44" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,250,000 samples, 0.02%)</title><rect x="13.1" y="1285" width="0.3" height="15.0" fill="rgb(251,124,46)" rx="2" ry="2" />
<text  x="16.14" y="1295.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (69,250,000 samples, 0.05%)</title><rect x="53.0" y="1909" width="0.6" height="15.0" fill="rgb(245,180,33)" rx="2" ry="2" />
<text  x="55.97" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="933" width="0.2" height="15.0" fill="rgb(214,148,10)" rx="2" ry="2" />
<text  x="17.44" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18,000,000 samples, 0.01%)</title><rect x="13.2" y="885" width="0.1" height="15.0" fill="rgb(233,159,31)" rx="2" ry="2" />
<text  x="16.17" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="517" width="0.2" height="15.0" fill="rgb(235,151,16)" rx="2" ry="2" />
<text  x="17.44" y="527.5" ></text>
</g>
<g >
<title>[perf-2123.map] (20,250,000 samples, 0.02%)</title><rect x="12.0" y="1397" width="0.1" height="15.0" fill="rgb(210,98,19)" rx="2" ry="2" />
<text  x="14.95" y="1407.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (260,000,000 samples, 0.20%)</title><rect x="31.6" y="2021" width="2.4" height="15.0" fill="rgb(224,196,11)" rx="2" ry="2" />
<text  x="34.63" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,250,000 samples, 0.02%)</title><rect x="13.1" y="1237" width="0.3" height="15.0" fill="rgb(244,222,19)" rx="2" ry="2" />
<text  x="16.14" y="1247.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (18,000,000 samples, 0.01%)</title><rect x="56.5" y="1877" width="0.2" height="15.0" fill="rgb(252,142,17)" rx="2" ry="2" />
<text  x="59.52" y="1887.5" ></text>
</g>
<g >
<title>node::EmitToJSStreamListener::OnStreamRead (21,500,000 samples, 0.02%)</title><rect x="12.3" y="1877" width="0.2" height="15.0" fill="rgb(238,218,35)" rx="2" ry="2" />
<text  x="15.35" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="885" width="0.2" height="15.0" fill="rgb(243,149,13)" rx="2" ry="2" />
<text  x="17.44" y="895.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (113,500,000 samples, 0.09%)</title><rect x="55.2" y="1973" width="1.0" height="15.0" fill="rgb(216,28,3)" rx="2" ry="2" />
<text  x="58.18" y="1983.5" ></text>
</g>
<g >
<title>tts_buffer_heap_getsomeattrs (67,750,000 samples, 0.05%)</title><rect x="41.2" y="2037" width="0.6" height="15.0" fill="rgb(221,154,7)" rx="2" ry="2" />
<text  x="44.22" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="325" width="0.2" height="15.0" fill="rgb(224,78,47)" rx="2" ry="2" />
<text  x="17.44" y="335.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (27,500,000 samples, 0.02%)</title><rect x="12.6" y="1909" width="0.3" height="15.0" fill="rgb(234,135,26)" rx="2" ry="2" />
<text  x="15.63" y="1919.5" ></text>
</g>
<g >
<title>exit_mmap (11,500,000 samples, 0.01%)</title><rect x="14.0" y="1829" width="0.1" height="15.0" fill="rgb(220,91,36)" rx="2" ry="2" />
<text  x="16.99" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (15,250,000 samples, 0.01%)</title><rect x="13.2" y="789" width="0.1" height="15.0" fill="rgb(211,32,42)" rx="2" ry="2" />
<text  x="16.18" y="799.5" ></text>
</g>
<g >
<title>do_idle (103,911,250,000 samples, 79.74%)</title><rect x="102.8" y="1989" width="940.8" height="15.0" fill="rgb(215,184,2)" rx="2" ry="2" />
<text  x="105.76" y="1999.5" >do_idle</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1221" width="0.2" height="15.0" fill="rgb(249,174,52)" rx="2" ry="2" />
<text  x="17.44" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1173" width="0.2" height="15.0" fill="rgb(251,207,45)" rx="2" ry="2" />
<text  x="17.44" y="1183.5" ></text>
</g>
<g >
<title>skb_release_data (25,750,000 samples, 0.02%)</title><rect x="55.4" y="1877" width="0.2" height="15.0" fill="rgb(206,209,33)" rx="2" ry="2" />
<text  x="58.36" y="1887.5" ></text>
</g>
<g >
<title>[psql] (18,750,000 samples, 0.01%)</title><rect x="51.9" y="2021" width="0.2" height="15.0" fill="rgb(246,135,41)" rx="2" ry="2" />
<text  x="54.90" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="949" width="0.2" height="15.0" fill="rgb(235,94,32)" rx="2" ry="2" />
<text  x="17.44" y="959.5" ></text>
</g>
<g >
<title>init_var_from_num (87,750,000 samples, 0.07%)</title><rect x="28.5" y="2005" width="0.8" height="15.0" fill="rgb(222,83,49)" rx="2" ry="2" />
<text  x="31.48" y="2015.5" ></text>
</g>
<g >
<title>execve (12,250,000 samples, 0.01%)</title><rect x="14.0" y="2037" width="0.1" height="15.0" fill="rgb(228,134,22)" rx="2" ry="2" />
<text  x="16.98" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="757" width="0.2" height="15.0" fill="rgb(205,23,11)" rx="2" ry="2" />
<text  x="17.44" y="767.5" ></text>
</g>
<g >
<title>InotifyBackend::handleEvent (53,000,000 samples, 0.04%)</title><rect x="13.0" y="1973" width="0.5" height="15.0" fill="rgb(217,156,1)" rx="2" ry="2" />
<text  x="16.04" y="1983.5" ></text>
</g>
<g >
<title>AllocSetAlloc (124,750,000 samples, 0.10%)</title><rect x="17.3" y="2021" width="1.2" height="15.0" fill="rgb(210,79,51)" rx="2" ry="2" />
<text  x="20.35" y="2031.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (42,000,000 samples, 0.03%)</title><rect x="53.2" y="1893" width="0.4" height="15.0" fill="rgb(223,174,5)" rx="2" ry="2" />
<text  x="56.22" y="1903.5" ></text>
</g>
<g >
<title>charge_memcg (11,750,000 samples, 0.01%)</title><rect x="44.8" y="1909" width="0.1" height="15.0" fill="rgb(218,151,3)" rx="2" ry="2" />
<text  x="47.80" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="629" width="0.2" height="15.0" fill="rgb(212,98,40)" rx="2" ry="2" />
<text  x="17.44" y="639.5" ></text>
</g>
<g >
<title>handle_mm_fault (113,250,000 samples, 0.09%)</title><rect x="44.4" y="1973" width="1.0" height="15.0" fill="rgb(209,205,27)" rx="2" ry="2" />
<text  x="47.36" y="1983.5" ></text>
</g>
<g >
<title>node::Start (154,750,000 samples, 0.12%)</title><rect x="11.5" y="2021" width="1.4" height="15.0" fill="rgb(222,215,10)" rx="2" ry="2" />
<text  x="14.48" y="2031.5" ></text>
</g>
<g >
<title>__handle_mm_fault (107,000,000 samples, 0.08%)</title><rect x="44.4" y="1957" width="1.0" height="15.0" fill="rgb(221,100,10)" rx="2" ry="2" />
<text  x="47.38" y="1967.5" ></text>
</g>
<g >
<title>new_sync_read (75,750,000 samples, 0.06%)</title><rect x="30.9" y="1957" width="0.7" height="15.0" fill="rgb(213,56,34)" rx="2" ry="2" />
<text  x="33.87" y="1967.5" ></text>
</g>
<g >
<title>uv__work_done (61,750,000 samples, 0.05%)</title><rect x="11.7" y="1925" width="0.6" height="15.0" fill="rgb(244,199,44)" rx="2" ry="2" />
<text  x="14.70" y="1935.5" ></text>
</g>
<g >
<title>start_kernel (16,159,750,000 samples, 12.40%)</title><rect x="1043.6" y="1989" width="146.4" height="15.0" fill="rgb(235,88,0)" rx="2" ry="2" />
<text  x="1046.65" y="1999.5" >start_kernel</text>
</g>
<g >
<title>sock_recvmsg (112,000,000 samples, 0.09%)</title><rect x="55.2" y="1941" width="1.0" height="15.0" fill="rgb(212,44,6)" rx="2" ry="2" />
<text  x="58.19" y="1951.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,750,000 samples, 0.02%)</title><rect x="11.9" y="1653" width="0.2" height="15.0" fill="rgb(225,130,6)" rx="2" ry="2" />
<text  x="14.85" y="1663.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="821" width="0.2" height="15.0" fill="rgb(221,92,0)" rx="2" ry="2" />
<text  x="17.44" y="831.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,000,000 samples, 0.01%)</title><rect x="13.2" y="821" width="0.1" height="15.0" fill="rgb(241,107,2)" rx="2" ry="2" />
<text  x="16.18" y="831.5" ></text>
</g>
<g >
<title>printtup_startup (570,000,000 samples, 0.44%)</title><rect x="25.5" y="2021" width="5.2" height="15.0" fill="rgb(235,161,45)" rx="2" ry="2" />
<text  x="28.52" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1877" width="0.2" height="15.0" fill="rgb(225,75,40)" rx="2" ry="2" />
<text  x="17.44" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="357" width="0.2" height="15.0" fill="rgb(253,76,48)" rx="2" ry="2" />
<text  x="17.44" y="367.5" ></text>
</g>
<g >
<title>pmd_page_vaddr (17,500,000 samples, 0.01%)</title><rect x="45.2" y="1925" width="0.1" height="15.0" fill="rgb(238,55,20)" rx="2" ry="2" />
<text  x="48.19" y="1935.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Backend::run (61,750,000 samples, 0.05%)</title><rect x="13.0" y="2021" width="0.6" height="15.0" fill="rgb(250,165,42)" rx="2" ry="2" />
<text  x="16.04" y="2031.5" ></text>
</g>
<g >
<title>pg_utf_mblen (862,750,000 samples, 0.66%)</title><rect x="73.7" y="2037" width="7.8" height="15.0" fill="rgb(243,123,40)" rx="2" ry="2" />
<text  x="76.66" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1717" width="0.2" height="15.0" fill="rgb(248,166,30)" rx="2" ry="2" />
<text  x="17.44" y="1727.5" ></text>
</g>
<g >
<title>__cmd_record.constprop.0 (64,250,000 samples, 0.05%)</title><rect x="14.6" y="1973" width="0.5" height="15.0" fill="rgb(212,185,36)" rx="2" ry="2" />
<text  x="17.55" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (21,500,000 samples, 0.02%)</title><rect x="13.2" y="1045" width="0.1" height="15.0" fill="rgb(251,210,53)" rx="2" ry="2" />
<text  x="16.15" y="1055.5" ></text>
</g>
<g >
<title>pqSkipnchar (14,500,000 samples, 0.01%)</title><rect x="95.2" y="2037" width="0.1" height="15.0" fill="rgb(206,112,41)" rx="2" ry="2" />
<text  x="98.17" y="2047.5" ></text>
</g>
<g >
<title>heapgettup_pagemode (80,500,000 samples, 0.06%)</title><rect x="24.6" y="2021" width="0.7" height="15.0" fill="rgb(217,140,5)" rx="2" ry="2" />
<text  x="27.57" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="501" width="0.2" height="15.0" fill="rgb(247,199,38)" rx="2" ry="2" />
<text  x="17.44" y="511.5" ></text>
</g>
<g >
<title>remove_vma (12,250,000 samples, 0.01%)</title><rect x="52.7" y="1925" width="0.1" height="15.0" fill="rgb(245,51,36)" rx="2" ry="2" />
<text  x="55.71" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="837" width="0.2" height="15.0" fill="rgb(218,17,12)" rx="2" ry="2" />
<text  x="17.44" y="847.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (11,500,000 samples, 0.01%)</title><rect x="12.4" y="1733" width="0.1" height="15.0" fill="rgb(250,160,11)" rx="2" ry="2" />
<text  x="15.35" y="1743.5" ></text>
</g>
<g >
<title>AllocSetAlloc (39,500,000 samples, 0.03%)</title><rect x="15.1" y="2037" width="0.4" height="15.0" fill="rgb(226,17,48)" rx="2" ry="2" />
<text  x="18.14" y="2047.5" ></text>
</g>
<g >
<title>begin_new_exec (12,250,000 samples, 0.01%)</title><rect x="14.0" y="1877" width="0.1" height="15.0" fill="rgb(221,180,0)" rx="2" ry="2" />
<text  x="16.98" y="1887.5" ></text>
</g>
<g >
<title>__sys_sendto (258,000,000 samples, 0.20%)</title><rect x="31.6" y="1973" width="2.4" height="15.0" fill="rgb(211,97,51)" rx="2" ry="2" />
<text  x="34.63" y="1983.5" ></text>
</g>
<g >
<title>main (64,500,000 samples, 0.05%)</title><rect x="14.6" y="2021" width="0.5" height="15.0" fill="rgb(231,147,38)" rx="2" ry="2" />
<text  x="17.55" y="2031.5" ></text>
</g>
<g >
<title>__sys_recvfrom (113,500,000 samples, 0.09%)</title><rect x="55.2" y="1957" width="1.0" height="15.0" fill="rgb(236,225,50)" rx="2" ry="2" />
<text  x="58.18" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1205" width="0.2" height="15.0" fill="rgb(221,45,30)" rx="2" ry="2" />
<text  x="17.44" y="1215.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1125" width="0.2" height="15.0" fill="rgb(226,195,16)" rx="2" ry="2" />
<text  x="17.44" y="1135.5" ></text>
</g>
<g >
<title>Watcher::isIgnored (45,000,000 samples, 0.03%)</title><rect x="13.0" y="1941" width="0.5" height="15.0" fill="rgb(205,23,53)" rx="2" ry="2" />
<text  x="16.04" y="1951.5" ></text>
</g>
<g >
<title>sock_sendmsg (255,750,000 samples, 0.20%)</title><rect x="31.6" y="1957" width="2.4" height="15.0" fill="rgb(237,116,18)" rx="2" ry="2" />
<text  x="34.65" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="213" width="0.2" height="15.0" fill="rgb(243,174,22)" rx="2" ry="2" />
<text  x="17.44" y="223.5" ></text>
</g>
<g >
<title>node (361,500,000 samples, 0.28%)</title><rect x="11.3" y="2053" width="3.3" height="15.0" fill="rgb(213,218,5)" rx="2" ry="2" />
<text  x="14.28" y="2063.5" ></text>
</g>
<g >
<title>[libc.so.6] (23,250,000 samples, 0.02%)</title><rect x="51.6" y="2021" width="0.2" height="15.0" fill="rgb(242,184,16)" rx="2" ry="2" />
<text  x="54.62" y="2031.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (20,750,000 samples, 0.02%)</title><rect x="56.5" y="1925" width="0.2" height="15.0" fill="rgb(250,179,35)" rx="2" ry="2" />
<text  x="59.50" y="1935.5" ></text>
</g>
<g >
<title>generic_write_end (12,750,000 samples, 0.01%)</title><rect x="15.0" y="1733" width="0.1" height="15.0" fill="rgb(231,169,45)" rx="2" ry="2" />
<text  x="17.99" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1253" width="0.2" height="15.0" fill="rgb(239,162,32)" rx="2" ry="2" />
<text  x="17.44" y="1263.5" ></text>
</g>
<g >
<title>pq_sendcountedtext (19,500,000 samples, 0.01%)</title><rect x="29.9" y="2005" width="0.1" height="15.0" fill="rgb(205,161,18)" rx="2" ry="2" />
<text  x="32.87" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,250,000 samples, 0.01%)</title><rect x="13.2" y="837" width="0.1" height="15.0" fill="rgb(239,190,20)" rx="2" ry="2" />
<text  x="16.18" y="847.5" ></text>
</g>
<g >
<title>arch_call_rest_init (16,159,750,000 samples, 12.40%)</title><rect x="1043.6" y="1973" width="146.4" height="15.0" fill="rgb(214,198,47)" rx="2" ry="2" />
<text  x="1046.65" y="1983.5" >arch_call_rest_init</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,500,000 samples, 0.02%)</title><rect x="13.1" y="1333" width="0.3" height="15.0" fill="rgb(221,101,38)" rx="2" ry="2" />
<text  x="16.13" y="1343.5" ></text>
</g>
<g >
<title>unix_stream_sendmsg (251,000,000 samples, 0.19%)</title><rect x="31.7" y="1941" width="2.3" height="15.0" fill="rgb(222,35,54)" rx="2" ry="2" />
<text  x="34.69" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (612,750,000 samples, 0.47%)</title><rect x="50.7" y="2037" width="5.5" height="15.0" fill="rgb(228,80,31)" rx="2" ry="2" />
<text  x="53.68" y="2047.5" ></text>
</g>
<g >
<title>internal_putbytes (46,750,000 samples, 0.04%)</title><rect x="40.1" y="2037" width="0.5" height="15.0" fill="rgb(235,34,30)" rx="2" ry="2" />
<text  x="43.15" y="2047.5" ></text>
</g>
<g >
<title>ext4_da_write_end (12,750,000 samples, 0.01%)</title><rect x="15.0" y="1749" width="0.1" height="15.0" fill="rgb(220,73,3)" rx="2" ry="2" />
<text  x="17.99" y="1759.5" ></text>
</g>
<g >
<title>numeric_out (33,500,000 samples, 0.03%)</title><rect x="29.3" y="2005" width="0.3" height="15.0" fill="rgb(231,145,34)" rx="2" ry="2" />
<text  x="32.27" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="981" width="0.2" height="15.0" fill="rgb(224,160,49)" rx="2" ry="2" />
<text  x="17.44" y="991.5" ></text>
</g>
<g >
<title>unix_stream_read_actor (59,500,000 samples, 0.05%)</title><rect x="55.7" y="1893" width="0.5" height="15.0" fill="rgb(230,51,12)" rx="2" ry="2" />
<text  x="58.66" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="693" width="0.2" height="15.0" fill="rgb(210,50,53)" rx="2" ry="2" />
<text  x="17.44" y="703.5" ></text>
</g>
<g >
<title>free_pages_and_swap_cache (39,750,000 samples, 0.03%)</title><rect x="53.2" y="1877" width="0.4" height="15.0" fill="rgb(240,102,35)" rx="2" ry="2" />
<text  x="56.22" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1957" width="0.2" height="15.0" fill="rgb(221,101,29)" rx="2" ry="2" />
<text  x="17.44" y="1967.5" ></text>
</g>
<g >
<title>ExecScan (12,500,000 samples, 0.01%)</title><rect x="18.5" y="2021" width="0.1" height="15.0" fill="rgb(229,122,28)" rx="2" ry="2" />
<text  x="21.48" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1781" width="0.2" height="15.0" fill="rgb(222,84,16)" rx="2" ry="2" />
<text  x="17.44" y="1791.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (110,000,000 samples, 0.08%)</title><rect x="55.2" y="1909" width="1.0" height="15.0" fill="rgb(226,207,21)" rx="2" ry="2" />
<text  x="58.21" y="1919.5" ></text>
</g>
<g >
<title>exec_mmap (12,000,000 samples, 0.01%)</title><rect x="14.0" y="1861" width="0.1" height="15.0" fill="rgb(209,173,29)" rx="2" ry="2" />
<text  x="16.99" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1925" width="0.2" height="15.0" fill="rgb(219,217,52)" rx="2" ry="2" />
<text  x="17.44" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (33,000,000 samples, 0.03%)</title><rect x="13.1" y="1605" width="0.3" height="15.0" fill="rgb(249,149,52)" rx="2" ry="2" />
<text  x="16.11" y="1615.5" ></text>
</g>
<g >
<title>__handle_mm_fault (29,750,000 samples, 0.02%)</title><rect x="95.8" y="1957" width="0.2" height="15.0" fill="rgb(246,21,14)" rx="2" ry="2" />
<text  x="98.75" y="1967.5" ></text>
</g>
<g >
<title>[perf-2123.map] (28,250,000 samples, 0.02%)</title><rect x="11.9" y="1477" width="0.2" height="15.0" fill="rgb(230,66,33)" rx="2" ry="2" />
<text  x="14.89" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="13.2" y="645" width="0.1" height="15.0" fill="rgb(208,1,30)" rx="2" ry="2" />
<text  x="16.20" y="655.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (20,000,000 samples, 0.02%)</title><rect x="12.4" y="1829" width="0.1" height="15.0" fill="rgb(220,178,10)" rx="2" ry="2" />
<text  x="15.35" y="1839.5" ></text>
</g>
<g >
<title>uv_run (154,750,000 samples, 0.12%)</title><rect x="11.5" y="1973" width="1.4" height="15.0" fill="rgb(215,13,15)" rx="2" ry="2" />
<text  x="14.48" y="1983.5" ></text>
</g>
<g >
<title>__do_munmap (186,000,000 samples, 0.14%)</title><rect x="52.2" y="1941" width="1.7" height="15.0" fill="rgb(231,92,34)" rx="2" ry="2" />
<text  x="55.19" y="1951.5" ></text>
</g>
<g >
<title>heap_getnextslot (15,500,000 samples, 0.01%)</title><rect x="39.8" y="2037" width="0.1" height="15.0" fill="rgb(231,159,15)" rx="2" ry="2" />
<text  x="42.79" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1013" width="0.2" height="15.0" fill="rgb(212,16,47)" rx="2" ry="2" />
<text  x="17.44" y="1023.5" ></text>
</g>
<g >
<title>[unknown] (1,486,500,000 samples, 1.14%)</title><rect x="17.3" y="2037" width="13.5" height="15.0" fill="rgb(245,90,48)" rx="2" ry="2" />
<text  x="20.35" y="2047.5" ></text>
</g>
<g >
<title>mmput (12,000,000 samples, 0.01%)</title><rect x="14.0" y="1845" width="0.1" height="15.0" fill="rgb(253,6,19)" rx="2" ry="2" />
<text  x="16.99" y="1855.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,500,000 samples, 0.02%)</title><rect x="11.9" y="1541" width="0.2" height="15.0" fill="rgb(247,111,53)" rx="2" ry="2" />
<text  x="14.86" y="1551.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1301" width="0.2" height="15.0" fill="rgb(206,140,1)" rx="2" ry="2" />
<text  x="17.44" y="1311.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (36,500,000 samples, 0.03%)</title><rect x="13.1" y="1701" width="0.3" height="15.0" fill="rgb(245,72,21)" rx="2" ry="2" />
<text  x="16.09" y="1711.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,500,000 samples, 0.02%)</title><rect x="11.9" y="1525" width="0.2" height="15.0" fill="rgb(231,3,48)" rx="2" ry="2" />
<text  x="14.86" y="1535.5" ></text>
</g>
<g >
<title>get_str_from_var (26,000,000 samples, 0.02%)</title><rect x="28.2" y="2005" width="0.3" height="15.0" fill="rgb(222,99,0)" rx="2" ry="2" />
<text  x="31.24" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27,750,000 samples, 0.02%)</title><rect x="13.1" y="1413" width="0.3" height="15.0" fill="rgb(208,204,42)" rx="2" ry="2" />
<text  x="16.13" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22,000,000 samples, 0.02%)</title><rect x="13.1" y="1077" width="0.2" height="15.0" fill="rgb(219,54,27)" rx="2" ry="2" />
<text  x="16.15" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,250,000 samples, 0.02%)</title><rect x="13.1" y="1509" width="0.3" height="15.0" fill="rgb(223,222,18)" rx="2" ry="2" />
<text  x="16.11" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="437" width="0.2" height="15.0" fill="rgb(205,23,22)" rx="2" ry="2" />
<text  x="17.44" y="447.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,500,000 samples, 0.02%)</title><rect x="11.9" y="1573" width="0.2" height="15.0" fill="rgb(246,90,17)" rx="2" ry="2" />
<text  x="14.86" y="1583.5" ></text>
</g>
<g >
<title>__folio_alloc (17,000,000 samples, 0.01%)</title><rect x="45.0" y="1893" width="0.2" height="15.0" fill="rgb(248,60,33)" rx="2" ry="2" />
<text  x="48.03" y="1903.5" ></text>
</g>
<g >
<title>Builtins_PromiseFulfillReactionJob (38,500,000 samples, 0.03%)</title><rect x="11.8" y="1717" width="0.3" height="15.0" fill="rgb(209,83,19)" rx="2" ry="2" />
<text  x="14.80" y="1727.5" ></text>
</g>
<g >
<title>Glob::isIgnored (44,750,000 samples, 0.03%)</title><rect x="13.0" y="1925" width="0.4" height="15.0" fill="rgb(237,115,25)" rx="2" ry="2" />
<text  x="16.04" y="1935.5" ></text>
</g>
<g >
<title>node::Environment::RunTimers (29,750,000 samples, 0.02%)</title><rect x="12.6" y="1941" width="0.3" height="15.0" fill="rgb(241,139,40)" rx="2" ry="2" />
<text  x="15.61" y="1951.5" ></text>
</g>
<g >
<title>free_compound_page (13,000,000 samples, 0.01%)</title><rect x="55.4" y="1845" width="0.1" height="15.0" fill="rgb(220,89,46)" rx="2" ry="2" />
<text  x="58.36" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="165" width="0.2" height="15.0" fill="rgb(206,98,25)" rx="2" ry="2" />
<text  x="17.44" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1941" width="0.2" height="15.0" fill="rgb(210,2,49)" rx="2" ry="2" />
<text  x="17.44" y="1951.5" ></text>
</g>
<g >
<title>sock_alloc_send_pskb (90,000,000 samples, 0.07%)</title><rect x="31.9" y="1925" width="0.8" height="15.0" fill="rgb(217,185,17)" rx="2" ry="2" />
<text  x="34.86" y="1935.5" ></text>
</g>
<g >
<title>clear_page_erms (19,750,000 samples, 0.02%)</title><rect x="32.4" y="1845" width="0.2" height="15.0" fill="rgb(222,86,35)" rx="2" ry="2" />
<text  x="35.39" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1349" width="0.2" height="15.0" fill="rgb(254,228,23)" rx="2" ry="2" />
<text  x="17.44" y="1359.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1493" width="0.2" height="15.0" fill="rgb(206,131,51)" rx="2" ry="2" />
<text  x="17.44" y="1503.5" ></text>
</g>
<g >
<title>[postgres] (34,750,000 samples, 0.03%)</title><rect x="17.0" y="2037" width="0.3" height="15.0" fill="rgb(223,129,23)" rx="2" ry="2" />
<text  x="20.03" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (24,250,000 samples, 0.02%)</title><rect x="13.1" y="1189" width="0.3" height="15.0" fill="rgb(207,227,15)" rx="2" ry="2" />
<text  x="16.14" y="1199.5" ></text>
</g>
<g >
<title>cpu_startup_entry (16,159,250,000 samples, 12.40%)</title><rect x="1043.6" y="1941" width="146.4" height="15.0" fill="rgb(230,220,41)" rx="2" ry="2" />
<text  x="1046.65" y="1951.5" >cpu_startup_entry</text>
</g>
<g >
<title>ext4_file_read_iter (75,250,000 samples, 0.06%)</title><rect x="30.9" y="1941" width="0.7" height="15.0" fill="rgb(242,125,22)" rx="2" ry="2" />
<text  x="33.87" y="1951.5" ></text>
</g>
<g >
<title>palloc (54,500,000 samples, 0.04%)</title><rect x="40.6" y="2037" width="0.5" height="15.0" fill="rgb(215,157,54)" rx="2" ry="2" />
<text  x="43.57" y="2047.5" ></text>
</g>
<g >
<title>free_pgtables (11,250,000 samples, 0.01%)</title><rect x="52.8" y="1909" width="0.1" height="15.0" fill="rgb(238,214,10)" rx="2" ry="2" />
<text  x="55.84" y="1919.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,500,000 samples, 0.02%)</title><rect x="11.9" y="1557" width="0.2" height="15.0" fill="rgb(248,209,12)" rx="2" ry="2" />
<text  x="14.86" y="1567.5" ></text>
</g>
<g >
<title>enlargeStringInfo (11,500,000 samples, 0.01%)</title><rect x="34.1" y="2037" width="0.1" height="15.0" fill="rgb(249,222,30)" rx="2" ry="2" />
<text  x="37.06" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1637" width="0.2" height="15.0" fill="rgb(229,135,13)" rx="2" ry="2" />
<text  x="17.44" y="1647.5" ></text>
</g>
<g >
<title>simple_copy_to_iter (55,500,000 samples, 0.04%)</title><rect x="55.7" y="1845" width="0.5" height="15.0" fill="rgb(205,107,15)" rx="2" ry="2" />
<text  x="58.70" y="1855.5" ></text>
</g>
<g >
<title>all (130,320,000,000 samples, 100%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(222,124,17)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,250,000 samples, 0.02%)</title><rect x="11.9" y="1509" width="0.2" height="15.0" fill="rgb(238,127,35)" rx="2" ry="2" />
<text  x="14.86" y="1519.5" ></text>
</g>
<g >
<title>PQgetisnull (66,000,000 samples, 0.05%)</title><rect x="50.9" y="2021" width="0.6" height="15.0" fill="rgb(219,110,24)" rx="2" ry="2" />
<text  x="53.88" y="2031.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (103,871,500,000 samples, 79.70%)</title><rect x="102.8" y="1925" width="940.5" height="15.0" fill="rgb(233,176,25)" rx="2" ry="2" />
<text  x="105.81" y="1935.5" >cpuidle_enter_state</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,750,000 samples, 0.01%)</title><rect x="13.2" y="661" width="0.1" height="15.0" fill="rgb(238,48,7)" rx="2" ry="2" />
<text  x="16.20" y="671.5" ></text>
</g>
<g >
<title>do_syscall_64 (14,250,000 samples, 0.01%)</title><rect x="13.8" y="2005" width="0.2" height="15.0" fill="rgb(212,68,31)" rx="2" ry="2" />
<text  x="16.83" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1045" width="0.2" height="15.0" fill="rgb(246,168,16)" rx="2" ry="2" />
<text  x="17.44" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1429" width="0.2" height="15.0" fill="rgb(242,90,46)" rx="2" ry="2" />
<text  x="17.44" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (38,500,000 samples, 0.03%)</title><rect x="13.1" y="1797" width="0.3" height="15.0" fill="rgb(232,23,11)" rx="2" ry="2" />
<text  x="16.08" y="1807.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (56,000,000 samples, 0.04%)</title><rect x="11.7" y="1861" width="0.5" height="15.0" fill="rgb(247,63,50)" rx="2" ry="2" />
<text  x="14.70" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1269" width="0.2" height="15.0" fill="rgb(219,31,22)" rx="2" ry="2" />
<text  x="17.44" y="1279.5" ></text>
</g>
<g >
<title>__x64_sys_brk (197,500,000 samples, 0.15%)</title><rect x="52.2" y="1973" width="1.8" height="15.0" fill="rgb(249,100,25)" rx="2" ry="2" />
<text  x="55.19" y="1983.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (24,000,000 samples, 0.02%)</title><rect x="53.0" y="1893" width="0.2" height="15.0" fill="rgb(219,84,49)" rx="2" ry="2" />
<text  x="56.00" y="1903.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (65,500,000 samples, 0.05%)</title><rect x="13.0" y="2037" width="0.6" height="15.0" fill="rgb(243,130,45)" rx="2" ry="2" />
<text  x="16.03" y="2047.5" ></text>
</g>
<g >
<title>anon_vma_clone (14,500,000 samples, 0.01%)</title><rect x="52.3" y="1909" width="0.1" height="15.0" fill="rgb(212,123,35)" rx="2" ry="2" />
<text  x="55.30" y="1919.5" ></text>
</g>
<g >
<title>sh (11,250,000 samples, 0.01%)</title><rect x="102.5" y="2053" width="0.1" height="15.0" fill="rgb(228,203,49)" rx="2" ry="2" />
<text  x="105.47" y="2063.5" ></text>
</g>
<g >
<title>kernel_clone (14,250,000 samples, 0.01%)</title><rect x="13.8" y="1957" width="0.2" height="15.0" fill="rgb(216,170,51)" rx="2" ry="2" />
<text  x="16.83" y="1967.5" ></text>
</g>
<g >
<title>__send (263,250,000 samples, 0.20%)</title><rect x="31.6" y="2037" width="2.4" height="15.0" fill="rgb(250,226,2)" rx="2" ry="2" />
<text  x="34.60" y="2047.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (82,750,000 samples, 0.06%)</title><rect x="30.8" y="2021" width="0.8" height="15.0" fill="rgb(236,138,29)" rx="2" ry="2" />
<text  x="33.85" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20,250,000 samples, 0.02%)</title><rect x="13.2" y="1029" width="0.1" height="15.0" fill="rgb(227,180,35)" rx="2" ry="2" />
<text  x="16.15" y="1039.5" ></text>
</g>
<g >
<title>__split_vma (41,000,000 samples, 0.03%)</title><rect x="52.2" y="1925" width="0.4" height="15.0" fill="rgb(217,165,39)" rx="2" ry="2" />
<text  x="55.24" y="1935.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (20,000,000 samples, 0.02%)</title><rect x="12.4" y="1845" width="0.1" height="15.0" fill="rgb(236,124,49)" rx="2" ry="2" />
<text  x="15.35" y="1855.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (120,071,750,000 samples, 92.14%)</title><rect x="102.8" y="2037" width="1087.2" height="15.0" fill="rgb(237,78,42)" rx="2" ry="2" />
<text  x="105.76" y="2047.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>node::LibuvStreamWrap::OnUvRead (21,500,000 samples, 0.02%)</title><rect x="12.3" y="1893" width="0.2" height="15.0" fill="rgb(223,74,29)" rx="2" ry="2" />
<text  x="15.35" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1989" width="0.2" height="15.0" fill="rgb(238,71,2)" rx="2" ry="2" />
<text  x="17.44" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="101" width="0.2" height="15.0" fill="rgb(227,108,18)" rx="2" ry="2" />
<text  x="17.44" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1605" width="0.2" height="15.0" fill="rgb(233,210,52)" rx="2" ry="2" />
<text  x="17.44" y="1615.5" ></text>
</g>
<g >
<title>[perf-2123.map] (15,250,000 samples, 0.01%)</title><rect x="12.0" y="1349" width="0.1" height="15.0" fill="rgb(235,167,38)" rx="2" ry="2" />
<text  x="15.00" y="1359.5" ></text>
</g>
<g >
<title>uv__run_timers (30,250,000 samples, 0.02%)</title><rect x="12.6" y="1957" width="0.3" height="15.0" fill="rgb(212,16,0)" rx="2" ry="2" />
<text  x="15.61" y="1967.5" ></text>
</g>
<g >
<title>AllocSetReset (83,250,000 samples, 0.06%)</title><rect x="25.5" y="2005" width="0.8" height="15.0" fill="rgb(246,113,43)" rx="2" ry="2" />
<text  x="28.52" y="2015.5" ></text>
</g>
<g >
<title>__schedule (18,250,000 samples, 0.01%)</title><rect x="56.5" y="1893" width="0.2" height="15.0" fill="rgb(254,43,24)" rx="2" ry="2" />
<text  x="59.52" y="1903.5" ></text>
</g>
<g >
<title>__do_sys_brk (193,000,000 samples, 0.15%)</title><rect x="52.2" y="1957" width="1.7" height="15.0" fill="rgb(210,213,48)" rx="2" ry="2" />
<text  x="55.19" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (17,500,000 samples, 0.01%)</title><rect x="13.2" y="853" width="0.1" height="15.0" fill="rgb(222,111,3)" rx="2" ry="2" />
<text  x="16.17" y="863.5" ></text>
</g>
<g >
<title>detoast_attr (487,500,000 samples, 0.37%)</title><rect x="20.0" y="2021" width="4.5" height="15.0" fill="rgb(209,92,41)" rx="2" ry="2" />
<text  x="23.04" y="2031.5" ></text>
</g>
<g >
<title>pg_wcssize (1,348,500,000 samples, 1.03%)</title><rect x="81.5" y="2037" width="12.2" height="15.0" fill="rgb(234,205,2)" rx="2" ry="2" />
<text  x="84.47" y="2047.5" ></text>
</g>
<g >
<title>run_builtin (64,500,000 samples, 0.05%)</title><rect x="14.6" y="2005" width="0.5" height="15.0" fill="rgb(240,67,8)" rx="2" ry="2" />
<text  x="17.55" y="2015.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,750,000 samples, 0.02%)</title><rect x="11.9" y="1621" width="0.2" height="15.0" fill="rgb(250,154,6)" rx="2" ry="2" />
<text  x="14.85" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1589" width="0.2" height="15.0" fill="rgb(238,94,52)" rx="2" ry="2" />
<text  x="17.44" y="1599.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (24,250,000 samples, 0.02%)</title><rect x="13.1" y="1205" width="0.3" height="15.0" fill="rgb(214,219,0)" rx="2" ry="2" />
<text  x="16.14" y="1215.5" ></text>
</g>
<g >
<title>[perf-2123.map] (25,250,000 samples, 0.02%)</title><rect x="11.9" y="1429" width="0.2" height="15.0" fill="rgb(241,82,11)" rx="2" ry="2" />
<text  x="14.91" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1573" width="0.2" height="15.0" fill="rgb(209,13,16)" rx="2" ry="2" />
<text  x="17.44" y="1583.5" ></text>
</g>
<g >
<title>start_secondary (103,912,000,000 samples, 79.74%)</title><rect x="102.8" y="2021" width="940.8" height="15.0" fill="rgb(227,179,11)" rx="2" ry="2" />
<text  x="105.76" y="2031.5" >start_secondary</text>
</g>
<g >
<title>do_syscall_64 (203,750,000 samples, 0.16%)</title><rect x="52.2" y="1989" width="1.8" height="15.0" fill="rgb(236,72,8)" rx="2" ry="2" />
<text  x="55.18" y="1999.5" ></text>
</g>
<g >
<title>sed (11,250,000 samples, 0.01%)</title><rect x="102.4" y="2053" width="0.1" height="15.0" fill="rgb(214,79,14)" rx="2" ry="2" />
<text  x="105.37" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="69" width="0.2" height="15.0" fill="rgb(205,129,32)" rx="2" ry="2" />
<text  x="17.44" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (29,000,000 samples, 0.02%)</title><rect x="13.1" y="1461" width="0.3" height="15.0" fill="rgb(223,20,5)" rx="2" ry="2" />
<text  x="16.13" y="1471.5" ></text>
</g>
<g >
<title>sock_def_readable (141,750,000 samples, 0.11%)</title><rect x="32.7" y="1925" width="1.3" height="15.0" fill="rgb(223,90,29)" rx="2" ry="2" />
<text  x="35.68" y="1935.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::PerformCheckpoint (38,750,000 samples, 0.03%)</title><rect x="11.8" y="1829" width="0.3" height="15.0" fill="rgb(246,69,53)" rx="2" ry="2" />
<text  x="14.80" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,250,000 samples, 0.02%)</title><rect x="13.1" y="1525" width="0.3" height="15.0" fill="rgb(241,80,22)" rx="2" ry="2" />
<text  x="16.11" y="1535.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (26,750,000 samples, 0.02%)</title><rect x="14.7" y="1749" width="0.3" height="15.0" fill="rgb(213,158,21)" rx="2" ry="2" />
<text  x="17.75" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1381" width="0.2" height="15.0" fill="rgb(216,78,45)" rx="2" ry="2" />
<text  x="17.44" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="645" width="0.2" height="15.0" fill="rgb(247,87,29)" rx="2" ry="2" />
<text  x="17.44" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1685" width="0.2" height="15.0" fill="rgb(228,53,37)" rx="2" ry="2" />
<text  x="17.44" y="1695.5" ></text>
</g>
<g >
<title>psql (6,649,000,000 samples, 5.10%)</title><rect x="42.2" y="2053" width="60.2" height="15.0" fill="rgb(239,189,0)" rx="2" ry="2" />
<text  x="45.15" y="2063.5" >psql</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (55,250,000 samples, 0.04%)</title><rect x="30.9" y="1893" width="0.5" height="15.0" fill="rgb(248,136,46)" rx="2" ry="2" />
<text  x="33.93" y="1903.5" ></text>
</g>
<g >
<title>[perf-2123.map] (19,000,000 samples, 0.01%)</title><rect x="12.0" y="1381" width="0.1" height="15.0" fill="rgb(231,22,9)" rx="2" ry="2" />
<text  x="14.96" y="1391.5" ></text>
</g>
<g >
<title>Builtins_AsyncFunctionAwaitResolveClosure (38,000,000 samples, 0.03%)</title><rect x="11.8" y="1701" width="0.3" height="15.0" fill="rgb(215,76,48)" rx="2" ry="2" />
<text  x="14.80" y="1711.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (16,154,000,000 samples, 12.40%)</title><rect x="1043.7" y="1909" width="146.2" height="15.0" fill="rgb(251,225,51)" rx="2" ry="2" />
<text  x="1046.65" y="1919.5" >cpuidle_idle_call</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1797" width="0.2" height="15.0" fill="rgb(208,177,49)" rx="2" ry="2" />
<text  x="17.44" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="613" width="0.2" height="15.0" fill="rgb(226,199,4)" rx="2" ry="2" />
<text  x="17.44" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1285" width="0.2" height="15.0" fill="rgb(254,116,25)" rx="2" ry="2" />
<text  x="17.44" y="1295.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="2021" width="0.2" height="15.0" fill="rgb(224,204,28)" rx="2" ry="2" />
<text  x="17.44" y="2031.5" ></text>
</g>
<g >
<title>[perf-2123.map] (26,750,000 samples, 0.02%)</title><rect x="11.9" y="1445" width="0.2" height="15.0" fill="rgb(247,136,42)" rx="2" ry="2" />
<text  x="14.90" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="997" width="0.2" height="15.0" fill="rgb(235,211,10)" rx="2" ry="2" />
<text  x="17.44" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1333" width="0.2" height="15.0" fill="rgb(237,222,22)" rx="2" ry="2" />
<text  x="17.44" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="773" width="0.2" height="15.0" fill="rgb(245,173,47)" rx="2" ry="2" />
<text  x="17.44" y="783.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::CompressionStream&lt;node::(anonymous namespace)::ZlibContext&gt;::AfterThreadPoolWork (56,000,000 samples, 0.04%)</title><rect x="11.7" y="1893" width="0.5" height="15.0" fill="rgb(249,128,1)" rx="2" ry="2" />
<text  x="14.70" y="1903.5" ></text>
</g>
<g >
<title>kmalloc_reserve (14,250,000 samples, 0.01%)</title><rect x="31.9" y="1877" width="0.2" height="15.0" fill="rgb(238,51,18)" rx="2" ry="2" />
<text  x="34.93" y="1887.5" ></text>
</g>
<g >
<title>[perf-2123.map] (12,500,000 samples, 0.01%)</title><rect x="12.0" y="1317" width="0.1" height="15.0" fill="rgb(207,11,8)" rx="2" ry="2" />
<text  x="15.02" y="1327.5" ></text>
</g>
<g >
<title>__kmalloc_node_track_caller (11,250,000 samples, 0.01%)</title><rect x="31.9" y="1861" width="0.1" height="15.0" fill="rgb(239,101,41)" rx="2" ry="2" />
<text  x="34.93" y="1871.5" ></text>
</g>
<g >
<title>cmd_record (64,500,000 samples, 0.05%)</title><rect x="14.6" y="1989" width="0.5" height="15.0" fill="rgb(243,106,23)" rx="2" ry="2" />
<text  x="17.55" y="1999.5" ></text>
</g>
<g >
<title>[perf-2123.map] (14,000,000 samples, 0.01%)</title><rect x="12.0" y="1333" width="0.1" height="15.0" fill="rgb(246,227,15)" rx="2" ry="2" />
<text  x="15.01" y="1343.5" ></text>
</g>
<g >
<title>brk (214,500,000 samples, 0.16%)</title><rect x="52.1" y="2021" width="1.9" height="15.0" fill="rgb(208,52,10)" rx="2" ry="2" />
<text  x="55.08" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,000,000 samples, 0.02%)</title><rect x="13.1" y="1109" width="0.3" height="15.0" fill="rgb(235,4,30)" rx="2" ry="2" />
<text  x="16.14" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,250,000 samples, 0.02%)</title><rect x="13.1" y="1541" width="0.3" height="15.0" fill="rgb(232,166,47)" rx="2" ry="2" />
<text  x="16.11" y="1551.5" ></text>
</g>
<g >
<title>exc_page_fault (163,750,000 samples, 0.13%)</title><rect x="43.9" y="2005" width="1.5" height="15.0" fill="rgb(253,80,20)" rx="2" ry="2" />
<text  x="46.91" y="2015.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (58,500,000 samples, 0.04%)</title><rect x="14.6" y="1893" width="0.5" height="15.0" fill="rgb(253,83,37)" rx="2" ry="2" />
<text  x="17.59" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18,250,000 samples, 0.01%)</title><rect x="13.2" y="901" width="0.1" height="15.0" fill="rgb(238,51,36)" rx="2" ry="2" />
<text  x="16.16" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1237" width="0.2" height="15.0" fill="rgb(242,85,15)" rx="2" ry="2" />
<text  x="17.44" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1141" width="0.2" height="15.0" fill="rgb(207,61,38)" rx="2" ry="2" />
<text  x="17.44" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1829" width="0.2" height="15.0" fill="rgb(211,141,35)" rx="2" ry="2" />
<text  x="17.44" y="1839.5" ></text>
</g>
<g >
<title>do_anonymous_page (25,000,000 samples, 0.02%)</title><rect x="95.8" y="1925" width="0.2" height="15.0" fill="rgb(216,98,25)" rx="2" ry="2" />
<text  x="98.77" y="1935.5" ></text>
</g>
<g >
<title>cat (47,250,000 samples, 0.04%)</title><rect x="10.0" y="2053" width="0.4" height="15.0" fill="rgb(205,156,50)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" ></text>
</g>
<g >
<title>enlargeStringInfo (43,250,000 samples, 0.03%)</title><rect x="19.1" y="2005" width="0.4" height="15.0" fill="rgb(206,192,22)" rx="2" ry="2" />
<text  x="22.08" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (38,250,000 samples, 0.03%)</title><rect x="13.1" y="1765" width="0.3" height="15.0" fill="rgb(248,206,47)" rx="2" ry="2" />
<text  x="16.09" y="1775.5" ></text>
</g>
<g >
<title>worker (16,000,000 samples, 0.01%)</title><rect x="12.9" y="2021" width="0.1" height="15.0" fill="rgb(230,1,23)" rx="2" ry="2" />
<text  x="15.89" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,250,000 samples, 0.01%)</title><rect x="13.2" y="693" width="0.1" height="15.0" fill="rgb(229,173,28)" rx="2" ry="2" />
<text  x="16.19" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1061" width="0.2" height="15.0" fill="rgb(249,189,10)" rx="2" ry="2" />
<text  x="17.44" y="1071.5" ></text>
</g>
<g >
<title>uv__io_poll (108,250,000 samples, 0.08%)</title><rect x="11.6" y="1957" width="1.0" height="15.0" fill="rgb(207,121,41)" rx="2" ry="2" />
<text  x="14.57" y="1967.5" ></text>
</g>
<g >
<title>cpuidle_enter (16,154,000,000 samples, 12.40%)</title><rect x="1043.7" y="1877" width="146.2" height="15.0" fill="rgb(252,138,34)" rx="2" ry="2" />
<text  x="1046.65" y="1887.5" >cpuidle_enter</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="677" width="0.2" height="15.0" fill="rgb(241,128,45)" rx="2" ry="2" />
<text  x="17.44" y="687.5" ></text>
</g>
<g >
<title>standard_ExecutorRun (13,500,000 samples, 0.01%)</title><rect x="30.7" y="2021" width="0.1" height="15.0" fill="rgb(214,143,7)" rx="2" ry="2" />
<text  x="33.69" y="2031.5" ></text>
</g>
<g >
<title>bprm_execve.part.0 (12,250,000 samples, 0.01%)</title><rect x="14.0" y="1941" width="0.1" height="15.0" fill="rgb(219,224,3)" rx="2" ry="2" />
<text  x="16.98" y="1951.5" ></text>
</g>
<g >
<title>[libc.so.6] (149,250,000 samples, 0.11%)</title><rect x="26.6" y="2005" width="1.4" height="15.0" fill="rgb(253,149,42)" rx="2" ry="2" />
<text  x="29.64" y="2015.5" ></text>
</g>
<g >
<title>__do_sys_clone (14,250,000 samples, 0.01%)</title><rect x="13.8" y="1973" width="0.2" height="15.0" fill="rgb(205,178,26)" rx="2" ry="2" />
<text  x="16.83" y="1983.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,000,000 samples, 0.02%)</title><rect x="11.9" y="1493" width="0.2" height="15.0" fill="rgb(242,160,15)" rx="2" ry="2" />
<text  x="14.86" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="277" width="0.2" height="15.0" fill="rgb(218,100,28)" rx="2" ry="2" />
<text  x="17.44" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41,500,000 samples, 0.03%)</title><rect x="13.1" y="1877" width="0.3" height="15.0" fill="rgb(229,78,50)" rx="2" ry="2" />
<text  x="16.07" y="1887.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (12,250,000 samples, 0.01%)</title><rect x="14.0" y="1973" width="0.1" height="15.0" fill="rgb(216,197,18)" rx="2" ry="2" />
<text  x="16.98" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18,750,000 samples, 0.01%)</title><rect x="13.2" y="917" width="0.1" height="15.0" fill="rgb(210,150,51)" rx="2" ry="2" />
<text  x="16.16" y="927.5" ></text>
</g>
<g >
<title>__poll (56,250,000 samples, 0.04%)</title><rect x="56.3" y="2037" width="0.5" height="15.0" fill="rgb(250,70,35)" rx="2" ry="2" />
<text  x="59.34" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (22,000,000 samples, 0.02%)</title><rect x="13.1" y="1061" width="0.2" height="15.0" fill="rgb(242,109,12)" rx="2" ry="2" />
<text  x="16.15" y="1071.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,250,000 samples, 0.01%)</title><rect x="13.2" y="773" width="0.1" height="15.0" fill="rgb(207,175,8)" rx="2" ry="2" />
<text  x="16.18" y="783.5" ></text>
</g>
<g >
<title>InotifyBackend::start (58,000,000 samples, 0.04%)</title><rect x="13.0" y="2005" width="0.6" height="15.0" fill="rgb(247,114,14)" rx="2" ry="2" />
<text  x="16.04" y="2015.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (21,500,000 samples, 0.02%)</title><rect x="56.5" y="1941" width="0.2" height="15.0" fill="rgb(210,210,20)" rx="2" ry="2" />
<text  x="59.49" y="1951.5" ></text>
</g>
<g >
<title>record__pushfn (58,750,000 samples, 0.05%)</title><rect x="14.6" y="1925" width="0.5" height="15.0" fill="rgb(234,170,42)" rx="2" ry="2" />
<text  x="17.59" y="1935.5" ></text>
</g>
<g >
<title>kmem_cache_free (11,250,000 samples, 0.01%)</title><rect x="52.7" y="1893" width="0.1" height="15.0" fill="rgb(248,107,5)" rx="2" ry="2" />
<text  x="55.72" y="1903.5" ></text>
</g>
<g >
<title>perf (64,500,000 samples, 0.05%)</title><rect x="14.6" y="2053" width="0.5" height="15.0" fill="rgb(231,108,36)" rx="2" ry="2" />
<text  x="17.55" y="2063.5" ></text>
</g>
<g >
<title>do_syscall_64 (48,500,000 samples, 0.04%)</title><rect x="56.4" y="2005" width="0.4" height="15.0" fill="rgb(249,108,40)" rx="2" ry="2" />
<text  x="59.41" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="741" width="0.2" height="15.0" fill="rgb(209,153,39)" rx="2" ry="2" />
<text  x="17.44" y="751.5" ></text>
</g>
<g >
<title>alloc_skb_with_frags (88,250,000 samples, 0.07%)</title><rect x="31.9" y="1909" width="0.8" height="15.0" fill="rgb(251,94,8)" rx="2" ry="2" />
<text  x="34.87" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (34,250,000 samples, 0.03%)</title><rect x="13.1" y="1621" width="0.3" height="15.0" fill="rgb(216,78,35)" rx="2" ry="2" />
<text  x="16.10" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (17,500,000 samples, 0.01%)</title><rect x="13.2" y="869" width="0.1" height="15.0" fill="rgb(228,134,1)" rx="2" ry="2" />
<text  x="16.17" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="229" width="0.2" height="15.0" fill="rgb(211,68,18)" rx="2" ry="2" />
<text  x="17.44" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="917" width="0.2" height="15.0" fill="rgb(232,142,5)" rx="2" ry="2" />
<text  x="17.44" y="927.5" ></text>
</g>
<g >
<title>__x64_sys_write (58,500,000 samples, 0.04%)</title><rect x="14.6" y="1861" width="0.5" height="15.0" fill="rgb(237,34,27)" rx="2" ry="2" />
<text  x="17.59" y="1871.5" ></text>
</g>
<g >
<title>generic_perform_write (50,750,000 samples, 0.04%)</title><rect x="14.7" y="1765" width="0.4" height="15.0" fill="rgb(252,41,39)" rx="2" ry="2" />
<text  x="17.66" y="1775.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (45,000,000 samples, 0.03%)</title><rect x="95.6" y="2021" width="0.4" height="15.0" fill="rgb(229,115,19)" rx="2" ry="2" />
<text  x="98.63" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="533" width="0.2" height="15.0" fill="rgb(230,219,14)" rx="2" ry="2" />
<text  x="17.44" y="543.5" ></text>
</g>
<g >
<title>vm_area_free (11,500,000 samples, 0.01%)</title><rect x="52.7" y="1909" width="0.1" height="15.0" fill="rgb(215,180,27)" rx="2" ry="2" />
<text  x="55.71" y="1919.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (14,250,000 samples, 0.01%)</title><rect x="13.8" y="2021" width="0.2" height="15.0" fill="rgb(209,142,1)" rx="2" ry="2" />
<text  x="16.83" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (20,000,000 samples, 0.02%)</title><rect x="10.2" y="2037" width="0.1" height="15.0" fill="rgb(227,210,50)" rx="2" ry="2" />
<text  x="13.16" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27,500,000 samples, 0.02%)</title><rect x="13.1" y="1365" width="0.3" height="15.0" fill="rgb(235,224,17)" rx="2" ry="2" />
<text  x="16.13" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (34,500,000 samples, 0.03%)</title><rect x="13.1" y="1653" width="0.3" height="15.0" fill="rgb(218,8,17)" rx="2" ry="2" />
<text  x="16.10" y="1663.5" ></text>
</g>
<g >
<title>new_sync_write (51,250,000 samples, 0.04%)</title><rect x="14.7" y="1813" width="0.4" height="15.0" fill="rgb(215,47,36)" rx="2" ry="2" />
<text  x="17.66" y="1823.5" ></text>
</g>
<g >
<title>[perf-2123.map] (32,500,000 samples, 0.02%)</title><rect x="11.8" y="1669" width="0.3" height="15.0" fill="rgb(217,100,52)" rx="2" ry="2" />
<text  x="14.85" y="1679.5" ></text>
</g>
<g >
<title>swapper (120,071,750,000 samples, 92.14%)</title><rect x="102.8" y="2053" width="1087.2" height="15.0" fill="rgb(215,106,41)" rx="2" ry="2" />
<text  x="105.76" y="2063.5" >swapper</text>
</g>
<g >
<title>unix_stream_recvmsg (111,750,000 samples, 0.09%)</title><rect x="55.2" y="1925" width="1.0" height="15.0" fill="rgb(236,111,8)" rx="2" ry="2" />
<text  x="58.19" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41,000,000 samples, 0.03%)</title><rect x="13.1" y="1845" width="0.3" height="15.0" fill="rgb(238,167,40)" rx="2" ry="2" />
<text  x="16.07" y="1855.5" ></text>
</g>
<g >
<title>charge_memcg (24,500,000 samples, 0.02%)</title><rect x="44.5" y="1893" width="0.3" height="15.0" fill="rgb(244,225,29)" rx="2" ry="2" />
<text  x="47.54" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42,750,000 samples, 0.03%)</title><rect x="13.1" y="1893" width="0.3" height="15.0" fill="rgb(224,149,45)" rx="2" ry="2" />
<text  x="16.06" y="1903.5" ></text>
</g>
<g >
<title>PQmblen (17,750,000 samples, 0.01%)</title><rect x="42.2" y="2037" width="0.1" height="15.0" fill="rgb(237,214,25)" rx="2" ry="2" />
<text  x="45.16" y="2047.5" ></text>
</g>
<g >
<title>copy_process (14,250,000 samples, 0.01%)</title><rect x="13.8" y="1941" width="0.2" height="15.0" fill="rgb(210,178,5)" rx="2" ry="2" />
<text  x="16.83" y="1951.5" ></text>
</g>
<g >
<title>pg_server_to_client (22,750,000 samples, 0.02%)</title><rect x="19.5" y="2005" width="0.2" height="15.0" fill="rgb(214,41,37)" rx="2" ry="2" />
<text  x="22.47" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,250,000 samples, 0.01%)</title><rect x="13.2" y="709" width="0.1" height="15.0" fill="rgb(247,199,42)" rx="2" ry="2" />
<text  x="16.19" y="719.5" ></text>
</g>
<g >
<title>load_elf_binary (12,250,000 samples, 0.01%)</title><rect x="14.0" y="1893" width="0.1" height="15.0" fill="rgb(222,20,11)" rx="2" ry="2" />
<text  x="16.98" y="1903.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (59,250,000 samples, 0.05%)</title><rect x="55.7" y="1861" width="0.5" height="15.0" fill="rgb(231,173,28)" rx="2" ry="2" />
<text  x="58.66" y="1871.5" ></text>
</g>
<g >
<title>pqParseInput3 (63,000,000 samples, 0.05%)</title><rect x="94.3" y="2037" width="0.6" height="15.0" fill="rgb(243,183,0)" rx="2" ry="2" />
<text  x="97.29" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1077" width="0.2" height="15.0" fill="rgb(215,87,15)" rx="2" ry="2" />
<text  x="17.44" y="1087.5" ></text>
</g>
<g >
<title>alloc_pages (55,500,000 samples, 0.04%)</title><rect x="32.2" y="1893" width="0.5" height="15.0" fill="rgb(216,11,12)" rx="2" ry="2" />
<text  x="35.16" y="1903.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (27,250,000 samples, 0.02%)</title><rect x="12.6" y="1861" width="0.3" height="15.0" fill="rgb(216,149,29)" rx="2" ry="2" />
<text  x="15.63" y="1871.5" ></text>
</g>
<g >
<title>SeqNext (31,250,000 samples, 0.02%)</title><rect x="16.4" y="2037" width="0.3" height="15.0" fill="rgb(251,128,20)" rx="2" ry="2" />
<text  x="19.38" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18,750,000 samples, 0.01%)</title><rect x="13.2" y="949" width="0.1" height="15.0" fill="rgb(209,42,46)" rx="2" ry="2" />
<text  x="16.16" y="959.5" ></text>
</g>
<g >
<title>pg_encoding_mblen (393,000,000 samples, 0.30%)</title><rect x="61.9" y="2037" width="3.6" height="15.0" fill="rgb(218,123,11)" rx="2" ry="2" />
<text  x="64.93" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1557" width="0.2" height="15.0" fill="rgb(234,160,8)" rx="2" ry="2" />
<text  x="17.44" y="1567.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (12,250,000 samples, 0.01%)</title><rect x="14.0" y="2021" width="0.1" height="15.0" fill="rgb(251,223,29)" rx="2" ry="2" />
<text  x="16.98" y="2031.5" ></text>
</g>
<g >
<title>copy_page_range (12,000,000 samples, 0.01%)</title><rect x="13.8" y="1893" width="0.1" height="15.0" fill="rgb(239,166,2)" rx="2" ry="2" />
<text  x="16.83" y="1903.5" ></text>
</g>
<g >
<title>print_aligned_text (348,750,000 samples, 0.27%)</title><rect x="96.0" y="2037" width="3.2" height="15.0" fill="rgb(235,10,41)" rx="2" ry="2" />
<text  x="99.03" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1029" width="0.2" height="15.0" fill="rgb(231,128,29)" rx="2" ry="2" />
<text  x="17.44" y="1039.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (20,000,000 samples, 0.02%)</title><rect x="13.2" y="997" width="0.1" height="15.0" fill="rgb(212,17,36)" rx="2" ry="2" />
<text  x="16.16" y="1007.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="565" width="0.2" height="15.0" fill="rgb(214,187,42)" rx="2" ry="2" />
<text  x="17.44" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (34,500,000 samples, 0.03%)</title><rect x="13.1" y="1637" width="0.3" height="15.0" fill="rgb(246,114,32)" rx="2" ry="2" />
<text  x="16.10" y="1647.5" ></text>
</g>
<g >
<title>do_syscall_64 (115,500,000 samples, 0.09%)</title><rect x="55.2" y="1989" width="1.0" height="15.0" fill="rgb(222,120,19)" rx="2" ry="2" />
<text  x="58.18" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (40,000,000 samples, 0.03%)</title><rect x="13.1" y="1829" width="0.3" height="15.0" fill="rgb(249,160,36)" rx="2" ry="2" />
<text  x="16.08" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="661" width="0.2" height="15.0" fill="rgb(215,103,35)" rx="2" ry="2" />
<text  x="17.44" y="671.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (11,500,000 samples, 0.01%)</title><rect x="12.4" y="1749" width="0.1" height="15.0" fill="rgb(226,154,43)" rx="2" ry="2" />
<text  x="15.35" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (29,500,000 samples, 0.02%)</title><rect x="13.1" y="1477" width="0.3" height="15.0" fill="rgb(243,99,13)" rx="2" ry="2" />
<text  x="16.12" y="1487.5" ></text>
</g>
<g >
<title>generic_file_read_iter (75,000,000 samples, 0.06%)</title><rect x="30.9" y="1925" width="0.7" height="15.0" fill="rgb(212,228,53)" rx="2" ry="2" />
<text  x="33.88" y="1935.5" ></text>
</g>
<g >
<title>copy_p4d_range (12,000,000 samples, 0.01%)</title><rect x="13.8" y="1877" width="0.1" height="15.0" fill="rgb(237,112,21)" rx="2" ry="2" />
<text  x="16.83" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (25,250,000 samples, 0.02%)</title><rect x="13.1" y="1253" width="0.3" height="15.0" fill="rgb(211,4,52)" rx="2" ry="2" />
<text  x="16.14" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="181" width="0.2" height="15.0" fill="rgb(213,66,21)" rx="2" ry="2" />
<text  x="17.44" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (35,000,000 samples, 0.03%)</title><rect x="13.1" y="1669" width="0.3" height="15.0" fill="rgb(241,105,7)" rx="2" ry="2" />
<text  x="16.10" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1813" width="0.2" height="15.0" fill="rgb(220,196,11)" rx="2" ry="2" />
<text  x="17.44" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="421" width="0.2" height="15.0" fill="rgb(229,88,28)" rx="2" ry="2" />
<text  x="17.44" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="2005" width="0.2" height="15.0" fill="rgb(224,181,4)" rx="2" ry="2" />
<text  x="17.44" y="2015.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (140,750,000 samples, 0.11%)</title><rect x="32.7" y="1893" width="1.3" height="15.0" fill="rgb(234,1,14)" rx="2" ry="2" />
<text  x="35.69" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="37" width="0.2" height="15.0" fill="rgb(216,206,54)" rx="2" ry="2" />
<text  x="17.44" y="47.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="133" width="0.2" height="15.0" fill="rgb(246,140,27)" rx="2" ry="2" />
<text  x="17.44" y="143.5" ></text>
</g>
<g >
<title>[unknown] (16,250,000 samples, 0.01%)</title><rect x="41.9" y="2037" width="0.1" height="15.0" fill="rgb(213,33,31)" rx="2" ry="2" />
<text  x="44.88" y="2047.5" ></text>
</g>
<g >
<title>sshd (16,500,000 samples, 0.01%)</title><rect x="102.6" y="2053" width="0.2" height="15.0" fill="rgb(221,24,21)" rx="2" ry="2" />
<text  x="105.61" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27,750,000 samples, 0.02%)</title><rect x="13.1" y="1397" width="0.3" height="15.0" fill="rgb(217,18,31)" rx="2" ry="2" />
<text  x="16.13" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,500,000 samples, 0.03%)</title><rect x="13.1" y="1717" width="0.3" height="15.0" fill="rgb(213,9,49)" rx="2" ry="2" />
<text  x="16.09" y="1727.5" ></text>
</g>
<g >
<title>pqAddTuple (31,250,000 samples, 0.02%)</title><rect x="54.0" y="2021" width="0.3" height="15.0" fill="rgb(228,214,10)" rx="2" ry="2" />
<text  x="57.03" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="13.2" y="613" width="0.1" height="15.0" fill="rgb(250,181,53)" rx="2" ry="2" />
<text  x="16.20" y="623.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (12,250,000 samples, 0.01%)</title><rect x="32.2" y="1861" width="0.1" height="15.0" fill="rgb(237,156,10)" rx="2" ry="2" />
<text  x="35.17" y="1871.5" ></text>
</g>
<g >
<title>pqGetInt (50,750,000 samples, 0.04%)</title><rect x="93.7" y="2037" width="0.4" height="15.0" fill="rgb(236,41,14)" rx="2" ry="2" />
<text  x="96.68" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="149" width="0.2" height="15.0" fill="rgb(229,92,22)" rx="2" ry="2" />
<text  x="17.44" y="159.5" ></text>
</g>
<g >
<title>ksys_write (58,500,000 samples, 0.04%)</title><rect x="14.6" y="1845" width="0.5" height="15.0" fill="rgb(246,14,29)" rx="2" ry="2" />
<text  x="17.59" y="1855.5" ></text>
</g>
<g >
<title>[unknown] (31,500,000 samples, 0.02%)</title><rect x="10.5" y="2037" width="0.3" height="15.0" fill="rgb(235,210,21)" rx="2" ry="2" />
<text  x="13.54" y="2047.5" ></text>
</g>
<g >
<title>[ld-linux-x86-64.so.2] (12,500,000 samples, 0.01%)</title><rect x="10.0" y="2037" width="0.1" height="15.0" fill="rgb(236,102,16)" rx="2" ry="2" />
<text  x="13.00" y="2047.5" ></text>
</g>
<g >
<title>exec_binprm (12,250,000 samples, 0.01%)</title><rect x="14.0" y="1925" width="0.1" height="15.0" fill="rgb(205,186,39)" rx="2" ry="2" />
<text  x="16.98" y="1935.5" ></text>
</g>
<g >
<title>unmap_page_range (25,500,000 samples, 0.02%)</title><rect x="53.6" y="1877" width="0.3" height="15.0" fill="rgb(218,16,40)" rx="2" ry="2" />
<text  x="56.63" y="1887.5" ></text>
</g>
<g >
<title>[perf-2123.map] (16,750,000 samples, 0.01%)</title><rect x="12.0" y="1365" width="0.1" height="15.0" fill="rgb(247,169,39)" rx="2" ry="2" />
<text  x="14.99" y="1375.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="485" width="0.2" height="15.0" fill="rgb(248,209,38)" rx="2" ry="2" />
<text  x="17.44" y="495.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,500,000 samples, 0.02%)</title><rect x="11.9" y="1589" width="0.2" height="15.0" fill="rgb(209,31,28)" rx="2" ry="2" />
<text  x="14.86" y="1599.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::Close (11,750,000 samples, 0.01%)</title><rect x="12.4" y="1813" width="0.1" height="15.0" fill="rgb(239,14,51)" rx="2" ry="2" />
<text  x="15.35" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,750,000 samples, 0.01%)</title><rect x="13.2" y="725" width="0.1" height="15.0" fill="rgb(231,183,42)" rx="2" ry="2" />
<text  x="16.19" y="735.5" ></text>
</g>
<g >
<title>do_user_addr_fault (163,000,000 samples, 0.13%)</title><rect x="43.9" y="1989" width="1.5" height="15.0" fill="rgb(207,194,23)" rx="2" ry="2" />
<text  x="46.91" y="1999.5" ></text>
</g>
<g >
<title>node::SpinEventLoop (154,750,000 samples, 0.12%)</title><rect x="11.5" y="1989" width="1.4" height="15.0" fill="rgb(231,40,41)" rx="2" ry="2" />
<text  x="14.48" y="1999.5" ></text>
</g>
<g >
<title>printTableAddCell (15,000,000 samples, 0.01%)</title><rect x="55.0" y="2021" width="0.2" height="15.0" fill="rgb(216,43,36)" rx="2" ry="2" />
<text  x="58.02" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="309" width="0.2" height="15.0" fill="rgb(220,111,44)" rx="2" ry="2" />
<text  x="17.44" y="319.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (29,250,000 samples, 0.02%)</title><rect x="1043.3" y="1941" width="0.3" height="15.0" fill="rgb(210,30,3)" rx="2" ry="2" />
<text  x="1046.35" y="1951.5" ></text>
</g>
<g >
<title>[psql] (583,250,000 samples, 0.45%)</title><rect x="45.4" y="2037" width="5.3" height="15.0" fill="rgb(226,20,27)" rx="2" ry="2" />
<text  x="48.40" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="549" width="0.2" height="15.0" fill="rgb(234,166,43)" rx="2" ry="2" />
<text  x="17.44" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (26,000,000 samples, 0.02%)</title><rect x="13.1" y="1317" width="0.3" height="15.0" fill="rgb(242,64,26)" rx="2" ry="2" />
<text  x="16.14" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="597" width="0.2" height="15.0" fill="rgb(229,199,52)" rx="2" ry="2" />
<text  x="17.44" y="607.5" ></text>
</g>
<g >
<title>pq_sendcountedtext (30,750,000 samples, 0.02%)</title><rect x="19.7" y="2005" width="0.3" height="15.0" fill="rgb(245,108,26)" rx="2" ry="2" />
<text  x="22.74" y="2015.5" ></text>
</g>
<g >
<title>[libc.so.6] (64,500,000 samples, 0.05%)</title><rect x="14.6" y="2037" width="0.5" height="15.0" fill="rgb(208,197,42)" rx="2" ry="2" />
<text  x="17.55" y="2047.5" ></text>
</g>
<g >
<title>call_cpuidle (103,872,000,000 samples, 79.71%)</title><rect x="102.8" y="1957" width="940.5" height="15.0" fill="rgb(252,209,0)" rx="2" ry="2" />
<text  x="105.80" y="1967.5" >call_cpuidle</text>
</g>
<g >
<title>native_safe_halt (16,153,750,000 samples, 12.40%)</title><rect x="1043.7" y="1829" width="146.2" height="15.0" fill="rgb(209,157,42)" rx="2" ry="2" />
<text  x="1046.66" y="1839.5" >native_safe_halt</text>
</g>
<g >
<title>skb_free_head (12,250,000 samples, 0.01%)</title><rect x="55.5" y="1861" width="0.1" height="15.0" fill="rgb(235,59,34)" rx="2" ry="2" />
<text  x="58.48" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="197" width="0.2" height="15.0" fill="rgb(230,58,3)" rx="2" ry="2" />
<text  x="17.44" y="207.5" ></text>
</g>
<g >
<title>printtup (62,000,000 samples, 0.05%)</title><rect x="30.0" y="2005" width="0.6" height="15.0" fill="rgb(215,45,21)" rx="2" ry="2" />
<text  x="33.05" y="2015.5" ></text>
</g>
<g >
<title>kfree (12,000,000 samples, 0.01%)</title><rect x="55.5" y="1845" width="0.1" height="15.0" fill="rgb(225,111,22)" rx="2" ry="2" />
<text  x="58.48" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,500,000 samples, 0.02%)</title><rect x="13.1" y="1349" width="0.3" height="15.0" fill="rgb(253,197,54)" rx="2" ry="2" />
<text  x="16.13" y="1359.5" ></text>
</g>
<g >
<title>__mem_cgroup_uncharge_list (11,500,000 samples, 0.01%)</title><rect x="53.3" y="1845" width="0.1" height="15.0" fill="rgb(253,40,14)" rx="2" ry="2" />
<text  x="56.27" y="1855.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (56,000,000 samples, 0.04%)</title><rect x="11.7" y="1877" width="0.5" height="15.0" fill="rgb(215,199,40)" rx="2" ry="2" />
<text  x="14.70" y="1887.5" ></text>
</g>
<g >
<title>heap_getnextslot (11,250,000 samples, 0.01%)</title><rect x="24.5" y="2021" width="0.1" height="15.0" fill="rgb(218,148,21)" rx="2" ry="2" />
<text  x="27.47" y="2031.5" ></text>
</g>
<g >
<title>perf_mmap__push (59,250,000 samples, 0.05%)</title><rect x="14.6" y="1941" width="0.5" height="15.0" fill="rgb(238,49,50)" rx="2" ry="2" />
<text  x="17.59" y="1951.5" ></text>
</g>
<g >
<title>acpi_idle_enter (103,865,750,000 samples, 79.70%)</title><rect x="102.9" y="1909" width="940.4" height="15.0" fill="rgb(205,121,28)" rx="2" ry="2" />
<text  x="105.86" y="1919.5" >acpi_idle_enter</text>
</g>
<g >
<title>__libc_pread (86,000,000 samples, 0.07%)</title><rect x="30.8" y="2037" width="0.8" height="15.0" fill="rgb(209,57,17)" rx="2" ry="2" />
<text  x="33.82" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="901" width="0.2" height="15.0" fill="rgb(211,103,6)" rx="2" ry="2" />
<text  x="17.44" y="911.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (16,159,750,000 samples, 12.40%)</title><rect x="1043.6" y="2005" width="146.4" height="15.0" fill="rgb(226,30,19)" rx="2" ry="2" />
<text  x="1046.65" y="2015.5" >x86_64_start_reser..</text>
</g>
<g >
<title>v8::internal::Execution::TryRunMicrotasks (38,750,000 samples, 0.03%)</title><rect x="11.8" y="1797" width="0.3" height="15.0" fill="rgb(248,210,4)" rx="2" ry="2" />
<text  x="14.80" y="1807.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (38,750,000 samples, 0.03%)</title><rect x="11.8" y="1781" width="0.3" height="15.0" fill="rgb(206,27,27)" rx="2" ry="2" />
<text  x="14.80" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1701" width="0.2" height="15.0" fill="rgb(232,183,16)" rx="2" ry="2" />
<text  x="17.44" y="1711.5" ></text>
</g>
<g >
<title>[libc.so.6] (191,000,000 samples, 0.15%)</title><rect x="11.3" y="2037" width="1.7" height="15.0" fill="rgb(223,94,49)" rx="2" ry="2" />
<text  x="14.30" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27,500,000 samples, 0.02%)</title><rect x="13.1" y="1381" width="0.3" height="15.0" fill="rgb(245,223,2)" rx="2" ry="2" />
<text  x="16.13" y="1391.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (16,159,750,000 samples, 12.40%)</title><rect x="1043.6" y="2021" width="146.4" height="15.0" fill="rgb(243,196,44)" rx="2" ry="2" />
<text  x="1046.65" y="2031.5" >x86_64_start_kernel</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1621" width="0.2" height="15.0" fill="rgb(249,160,49)" rx="2" ry="2" />
<text  x="17.44" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (28,750,000 samples, 0.02%)</title><rect x="13.1" y="1445" width="0.3" height="15.0" fill="rgb(239,181,16)" rx="2" ry="2" />
<text  x="16.13" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19,250,000 samples, 0.01%)</title><rect x="13.2" y="965" width="0.1" height="15.0" fill="rgb(220,161,30)" rx="2" ry="2" />
<text  x="16.16" y="975.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (32,500,000 samples, 0.02%)</title><rect x="13.1" y="1557" width="0.3" height="15.0" fill="rgb(240,86,32)" rx="2" ry="2" />
<text  x="16.11" y="1567.5" ></text>
</g>
<g >
<title>node::NodeMainInstance::Run (154,750,000 samples, 0.12%)</title><rect x="11.5" y="2005" width="1.4" height="15.0" fill="rgb(216,225,7)" rx="2" ry="2" />
<text  x="14.48" y="2015.5" ></text>
</g>
<g >
<title>cpuidle_enter (103,871,750,000 samples, 79.71%)</title><rect x="102.8" y="1941" width="940.5" height="15.0" fill="rgb(216,163,23)" rx="2" ry="2" />
<text  x="105.81" y="1951.5" >cpuidle_enter</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,000,000 samples, 0.01%)</title><rect x="13.2" y="757" width="0.1" height="15.0" fill="rgb(219,210,46)" rx="2" ry="2" />
<text  x="16.19" y="767.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="709" width="0.2" height="15.0" fill="rgb(249,61,7)" rx="2" ry="2" />
<text  x="17.44" y="719.5" ></text>
</g>
<g >
<title>[unknown] (107,000,000 samples, 0.08%)</title><rect x="19.1" y="2021" width="0.9" height="15.0" fill="rgb(217,135,4)" rx="2" ry="2" />
<text  x="22.08" y="2031.5" ></text>
</g>
<g >
<title>MemoryContextReset (17,750,000 samples, 0.01%)</title><rect x="18.9" y="2021" width="0.1" height="15.0" fill="rgb(218,25,33)" rx="2" ry="2" />
<text  x="21.87" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1845" width="0.2" height="15.0" fill="rgb(208,184,42)" rx="2" ry="2" />
<text  x="17.44" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="853" width="0.2" height="15.0" fill="rgb(217,91,18)" rx="2" ry="2" />
<text  x="17.44" y="863.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1541" width="0.2" height="15.0" fill="rgb(216,174,49)" rx="2" ry="2" />
<text  x="17.44" y="1551.5" ></text>
</g>
<g >
<title>unmap_vmas (27,500,000 samples, 0.02%)</title><rect x="53.6" y="1909" width="0.3" height="15.0" fill="rgb(216,16,25)" rx="2" ry="2" />
<text  x="56.61" y="1919.5" ></text>
</g>
<g >
<title>v8::Function::Call (28,250,000 samples, 0.02%)</title><rect x="12.6" y="1925" width="0.3" height="15.0" fill="rgb(212,86,5)" rx="2" ry="2" />
<text  x="15.63" y="1935.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (28,500,000 samples, 0.02%)</title><rect x="44.5" y="1909" width="0.3" height="15.0" fill="rgb(252,47,13)" rx="2" ry="2" />
<text  x="47.54" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="14.4" y="453" width="0.2" height="15.0" fill="rgb(234,144,23)" rx="2" ry="2" />
<text  x="17.44" y="463.5" ></text>
</g>
<g >
<title>__schedule (29,750,000 samples, 0.02%)</title><rect x="1043.3" y="1957" width="0.3" height="15.0" fill="rgb(214,34,25)" rx="2" ry="2" />
<text  x="1046.34" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="13.2" y="629" width="0.1" height="15.0" fill="rgb(246,0,45)" rx="2" ry="2" />
<text  x="16.20" y="639.5" ></text>
</g>
<g >
<title>[perf-2123.map] (31,750,000 samples, 0.02%)</title><rect x="11.9" y="1637" width="0.2" height="15.0" fill="rgb(254,211,38)" rx="2" ry="2" />
<text  x="14.85" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (18,750,000 samples, 0.01%)</title><rect x="13.2" y="933" width="0.1" height="15.0" fill="rgb(252,93,42)" rx="2" ry="2" />
<text  x="16.16" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (39,750,000 samples, 0.03%)</title><rect x="13.1" y="1813" width="0.3" height="15.0" fill="rgb(233,165,27)" rx="2" ry="2" />
<text  x="16.08" y="1823.5" ></text>
</g>
<g >
<title>uv__stream_io (24,250,000 samples, 0.02%)</title><rect x="12.3" y="1941" width="0.3" height="15.0" fill="rgb(208,155,50)" rx="2" ry="2" />
<text  x="15.33" y="1951.5" ></text>
</g>
<g >
<title>do_syscall_64 (58,500,000 samples, 0.04%)</title><rect x="14.6" y="1877" width="0.5" height="15.0" fill="rgb(212,58,48)" rx="2" ry="2" />
<text  x="17.59" y="1887.5" ></text>
</g>
<g >
<title>v8::Function::Call (11,750,000 samples, 0.01%)</title><rect x="12.4" y="1797" width="0.1" height="15.0" fill="rgb(247,85,33)" rx="2" ry="2" />
<text  x="15.35" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="14.4" y="1525" width="0.2" height="15.0" fill="rgb(222,148,17)" rx="2" ry="2" />
<text  x="17.44" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (23,000,000 samples, 0.02%)</title><rect x="13.1" y="1125" width="0.3" height="15.0" fill="rgb(209,90,48)" rx="2" ry="2" />
<text  x="16.14" y="1135.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,000,000 samples, 0.02%)</title><rect x="13.1" y="1301" width="0.3" height="15.0" fill="rgb(240,10,7)" rx="2" ry="2" />
<text  x="16.14" y="1311.5" ></text>
</g>
<g >
<title>mbvalidate (183,000,000 samples, 0.14%)</title><rect x="56.9" y="2037" width="1.7" height="15.0" fill="rgb(238,210,26)" rx="2" ry="2" />
<text  x="59.90" y="2047.5" ></text>
</g>
<g >
<title>vfs_read (78,750,000 samples, 0.06%)</title><rect x="30.9" y="1973" width="0.7" height="15.0" fill="rgb(253,58,23)" rx="2" ry="2" />
<text  x="33.86" y="1983.5" ></text>
</g>
</g>
</svg>
