<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="2118" onload="init(evt)" viewBox="0 0 1200 2118" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="2118.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="2101" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="2101" > </text>
<g id="frames">
<g >
<title>sock_recvmsg (113,500,000 samples, 0.08%)</title><rect x="65.7" y="1941" width="1.0" height="15.0" fill="rgb(224,103,3)" rx="2" ry="2" />
<text  x="68.69" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,750,000 samples, 0.01%)</title><rect x="13.0" y="709" width="0.2" height="15.0" fill="rgb(225,145,7)" rx="2" ry="2" />
<text  x="16.05" y="719.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19,750,000 samples, 0.01%)</title><rect x="13.0" y="789" width="0.2" height="15.0" fill="rgb(242,207,5)" rx="2" ry="2" />
<text  x="16.04" y="799.5" ></text>
</g>
<g >
<title>mbvalidate (196,750,000 samples, 0.14%)</title><rect x="67.4" y="2037" width="1.7" height="15.0" fill="rgb(230,33,24)" rx="2" ry="2" />
<text  x="70.44" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="517" width="0.1" height="15.0" fill="rgb(228,180,42)" rx="2" ry="2" />
<text  x="17.30" y="527.5" ></text>
</g>
<g >
<title>[perf-2123.map] (43,250,000 samples, 0.03%)</title><rect x="11.6" y="1557" width="0.4" height="15.0" fill="rgb(242,168,26)" rx="2" ry="2" />
<text  x="14.60" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (34,000,000 samples, 0.02%)</title><rect x="13.0" y="1477" width="0.3" height="15.0" fill="rgb(249,140,32)" rx="2" ry="2" />
<text  x="15.97" y="1487.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (143,500,000 samples, 0.11%)</title><rect x="48.8" y="1909" width="1.3" height="15.0" fill="rgb(211,200,19)" rx="2" ry="2" />
<text  x="51.82" y="1919.5" ></text>
</g>
<g >
<title>uv__read (32,000,000 samples, 0.02%)</title><rect x="12.1" y="1925" width="0.3" height="15.0" fill="rgb(248,17,3)" rx="2" ry="2" />
<text  x="15.14" y="1935.5" ></text>
</g>
<g >
<title>SeqNext (38,750,000 samples, 0.03%)</title><rect x="16.1" y="2037" width="0.3" height="15.0" fill="rgb(205,218,43)" rx="2" ry="2" />
<text  x="19.09" y="2047.5" ></text>
</g>
<g >
<title>[libc.so.6] (19,750,000 samples, 0.01%)</title><rect x="13.5" y="2021" width="0.2" height="15.0" fill="rgb(224,165,27)" rx="2" ry="2" />
<text  x="16.51" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11,750,000 samples, 0.01%)</title><rect x="14.2" y="2037" width="0.1" height="15.0" fill="rgb(254,223,45)" rx="2" ry="2" />
<text  x="17.20" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (29,500,000 samples, 0.02%)</title><rect x="13.0" y="1285" width="0.2" height="15.0" fill="rgb(240,109,7)" rx="2" ry="2" />
<text  x="15.99" y="1295.5" ></text>
</g>
<g >
<title>__poll (64,000,000 samples, 0.05%)</title><rect x="66.8" y="2037" width="0.6" height="15.0" fill="rgb(230,110,30)" rx="2" ry="2" />
<text  x="69.81" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (33,750,000 samples, 0.02%)</title><rect x="13.0" y="1461" width="0.3" height="15.0" fill="rgb(245,172,40)" rx="2" ry="2" />
<text  x="15.97" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (40,000,000 samples, 0.03%)</title><rect x="13.0" y="1653" width="0.3" height="15.0" fill="rgb(205,89,50)" rx="2" ry="2" />
<text  x="15.95" y="1663.5" ></text>
</g>
<g >
<title>do_syscall_64 (196,000,000 samples, 0.14%)</title><rect x="62.7" y="1989" width="1.7" height="15.0" fill="rgb(239,90,11)" rx="2" ry="2" />
<text  x="65.72" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (40,000,000 samples, 0.03%)</title><rect x="13.0" y="1637" width="0.3" height="15.0" fill="rgb(207,182,28)" rx="2" ry="2" />
<text  x="15.95" y="1647.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (29,250,000 samples, 0.02%)</title><rect x="13.0" y="1237" width="0.2" height="15.0" fill="rgb(230,143,37)" rx="2" ry="2" />
<text  x="15.99" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="133" width="0.1" height="15.0" fill="rgb(254,177,42)" rx="2" ry="2" />
<text  x="17.30" y="143.5" ></text>
</g>
<g >
<title>heapgettup_pagemode (91,500,000 samples, 0.07%)</title><rect x="40.4" y="2021" width="0.8" height="15.0" fill="rgb(208,5,18)" rx="2" ry="2" />
<text  x="43.37" y="2031.5" ></text>
</g>
<g >
<title>do_poll.constprop.0 (42,500,000 samples, 0.03%)</title><rect x="66.9" y="1957" width="0.4" height="15.0" fill="rgb(216,61,12)" rx="2" ry="2" />
<text  x="69.91" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (14,000,000 samples, 0.01%)</title><rect x="13.1" y="645" width="0.1" height="15.0" fill="rgb(228,167,11)" rx="2" ry="2" />
<text  x="16.05" y="655.5" ></text>
</g>
<g >
<title>worker (12,250,000 samples, 0.01%)</title><rect x="12.8" y="2021" width="0.1" height="15.0" fill="rgb(226,97,2)" rx="2" ry="2" />
<text  x="15.78" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (28,250,000 samples, 0.02%)</title><rect x="13.0" y="1205" width="0.2" height="15.0" fill="rgb(239,195,51)" rx="2" ry="2" />
<text  x="16.00" y="1215.5" ></text>
</g>
<g >
<title>__alloc_pages (55,750,000 samples, 0.04%)</title><rect x="48.3" y="1877" width="0.5" height="15.0" fill="rgb(219,107,19)" rx="2" ry="2" />
<text  x="51.31" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (11,750,000 samples, 0.01%)</title><rect x="13.1" y="453" width="0.1" height="15.0" fill="rgb(233,94,22)" rx="2" ry="2" />
<text  x="16.06" y="463.5" ></text>
</g>
<g >
<title>all (136,262,000,000 samples, 100%)</title><rect x="10.0" y="2069" width="1180.0" height="15.0" fill="rgb(243,161,45)" rx="2" ry="2" />
<text  x="13.00" y="2079.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27,000,000 samples, 0.02%)</title><rect x="13.0" y="1109" width="0.2" height="15.0" fill="rgb(232,227,32)" rx="2" ry="2" />
<text  x="16.00" y="1119.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="421" width="0.1" height="15.0" fill="rgb(224,69,39)" rx="2" ry="2" />
<text  x="17.30" y="431.5" ></text>
</g>
<g >
<title>printtup (81,500,000 samples, 0.06%)</title><rect x="44.3" y="2005" width="0.7" height="15.0" fill="rgb(242,61,44)" rx="2" ry="2" />
<text  x="47.31" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="629" width="0.1" height="15.0" fill="rgb(242,162,6)" rx="2" ry="2" />
<text  x="17.30" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1637" width="0.1" height="15.0" fill="rgb(236,115,39)" rx="2" ry="2" />
<text  x="17.30" y="1647.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (142,500,000 samples, 0.10%)</title><rect x="48.8" y="1893" width="1.3" height="15.0" fill="rgb(253,73,5)" rx="2" ry="2" />
<text  x="51.83" y="1903.5" ></text>
</g>
<g >
<title>[libc.so.6] (387,750,000 samples, 0.28%)</title><rect x="52.8" y="2037" width="3.4" height="15.0" fill="rgb(241,7,29)" rx="2" ry="2" />
<text  x="55.82" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1141" width="0.1" height="15.0" fill="rgb(214,135,9)" rx="2" ry="2" />
<text  x="17.30" y="1151.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="69" width="0.1" height="15.0" fill="rgb(244,123,53)" rx="2" ry="2" />
<text  x="17.30" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="213" width="0.1" height="15.0" fill="rgb(217,128,54)" rx="2" ry="2" />
<text  x="17.30" y="223.5" ></text>
</g>
<g >
<title>[libc.so.6] (117,500,000 samples, 0.09%)</title><rect x="42.8" y="2005" width="1.1" height="15.0" fill="rgb(243,42,33)" rx="2" ry="2" />
<text  x="45.85" y="2015.5" ></text>
</g>
<g >
<title>heap_getnextslot (12,500,000 samples, 0.01%)</title><rect x="40.3" y="2021" width="0.1" height="15.0" fill="rgb(222,153,44)" rx="2" ry="2" />
<text  x="43.26" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20,750,000 samples, 0.02%)</title><rect x="13.0" y="853" width="0.2" height="15.0" fill="rgb(227,39,37)" rx="2" ry="2" />
<text  x="16.03" y="863.5" ></text>
</g>
<g >
<title>do_anonymous_page (96,250,000 samples, 0.07%)</title><rect x="55.1" y="1925" width="0.9" height="15.0" fill="rgb(219,102,10)" rx="2" ry="2" />
<text  x="58.14" y="1935.5" ></text>
</g>
<g >
<title>unmap_page_range (21,000,000 samples, 0.02%)</title><rect x="64.0" y="1877" width="0.2" height="15.0" fill="rgb(207,103,12)" rx="2" ry="2" />
<text  x="67.02" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="805" width="0.1" height="15.0" fill="rgb(241,58,38)" rx="2" ry="2" />
<text  x="17.30" y="815.5" ></text>
</g>
<g >
<title>OutputFunctionCall (29,750,000 samples, 0.02%)</title><rect x="42.6" y="2005" width="0.2" height="15.0" fill="rgb(240,117,44)" rx="2" ry="2" />
<text  x="45.59" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (31,250,000 samples, 0.02%)</title><rect x="13.0" y="1381" width="0.3" height="15.0" fill="rgb(222,115,35)" rx="2" ry="2" />
<text  x="15.98" y="1391.5" ></text>
</g>
<g >
<title>internal_putbytes (51,250,000 samples, 0.04%)</title><rect x="50.9" y="2037" width="0.4" height="15.0" fill="rgb(240,50,45)" rx="2" ry="2" />
<text  x="53.90" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (29,250,000 samples, 0.02%)</title><rect x="13.0" y="1253" width="0.2" height="15.0" fill="rgb(222,108,16)" rx="2" ry="2" />
<text  x="15.99" y="1263.5" ></text>
</g>
<g >
<title>node::SpinEventLoop (182,000,000 samples, 0.13%)</title><rect x="11.2" y="1989" width="1.6" height="15.0" fill="rgb(222,217,38)" rx="2" ry="2" />
<text  x="14.20" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1285" width="0.1" height="15.0" fill="rgb(207,138,10)" rx="2" ry="2" />
<text  x="17.30" y="1295.5" ></text>
</g>
<g >
<title>uv__run_timers (34,000,000 samples, 0.02%)</title><rect x="12.5" y="1957" width="0.3" height="15.0" fill="rgb(206,212,36)" rx="2" ry="2" />
<text  x="15.48" y="1967.5" ></text>
</g>
<g >
<title>call_cpuidle (15,880,000,000 samples, 11.65%)</title><rect x="1052.3" y="1893" width="137.5" height="15.0" fill="rgb(250,146,6)" rx="2" ry="2" />
<text  x="1055.29" y="1903.5" >call_cpuidle</text>
</g>
<g >
<title>cat (36,750,000 samples, 0.03%)</title><rect x="10.0" y="2053" width="0.3" height="15.0" fill="rgb(232,124,47)" rx="2" ry="2" />
<text  x="13.00" y="2063.5" ></text>
</g>
<g >
<title>cpu_startup_entry (15,900,750,000 samples, 11.67%)</title><rect x="1052.3" y="1941" width="137.7" height="15.0" fill="rgb(243,19,45)" rx="2" ry="2" />
<text  x="1055.27" y="1951.5" >cpu_startup_entry</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1589" width="0.1" height="15.0" fill="rgb(208,52,8)" rx="2" ry="2" />
<text  x="17.30" y="1599.5" ></text>
</g>
<g >
<title>x86_64_start_reservations (15,900,750,000 samples, 11.67%)</title><rect x="1052.3" y="2005" width="137.7" height="15.0" fill="rgb(209,135,36)" rx="2" ry="2" />
<text  x="1055.27" y="2015.5" >x86_64_start_rese..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="773" width="0.1" height="15.0" fill="rgb(214,187,54)" rx="2" ry="2" />
<text  x="17.30" y="783.5" ></text>
</g>
<g >
<title>printTableAddCell (78,750,000 samples, 0.06%)</title><rect x="104.5" y="2037" width="0.7" height="15.0" fill="rgb(223,41,13)" rx="2" ry="2" />
<text  x="107.52" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1653" width="0.1" height="15.0" fill="rgb(227,11,24)" rx="2" ry="2" />
<text  x="17.30" y="1663.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (12,750,000 samples, 0.01%)</title><rect x="11.4" y="1765" width="0.2" height="15.0" fill="rgb(248,49,1)" rx="2" ry="2" />
<text  x="14.44" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1205" width="0.1" height="15.0" fill="rgb(244,175,22)" rx="2" ry="2" />
<text  x="17.30" y="1215.5" ></text>
</g>
<g >
<title>do_syscall_64 (13,000,000 samples, 0.01%)</title><rect x="13.7" y="2005" width="0.1" height="15.0" fill="rgb(231,166,53)" rx="2" ry="2" />
<text  x="16.71" y="2015.5" ></text>
</g>
<g >
<title>node::Environment::RunTimers (33,500,000 samples, 0.02%)</title><rect x="12.5" y="1941" width="0.3" height="15.0" fill="rgb(252,109,23)" rx="2" ry="2" />
<text  x="15.49" y="1951.5" ></text>
</g>
<g >
<title>record__pushfn (68,750,000 samples, 0.05%)</title><rect x="14.5" y="1925" width="0.6" height="15.0" fill="rgb(245,9,28)" rx="2" ry="2" />
<text  x="17.46" y="1935.5" ></text>
</g>
<g >
<title>tts_buffer_heap_getsomeattrs (58,250,000 samples, 0.04%)</title><rect x="51.7" y="2037" width="0.5" height="15.0" fill="rgb(207,174,15)" rx="2" ry="2" />
<text  x="54.72" y="2047.5" ></text>
</g>
<g >
<title>grab_cache_page_write_begin (21,250,000 samples, 0.02%)</title><rect x="14.7" y="1733" width="0.2" height="15.0" fill="rgb(249,221,33)" rx="2" ry="2" />
<text  x="17.68" y="1743.5" ></text>
</g>
<g >
<title>charge_memcg (29,000,000 samples, 0.02%)</title><rect x="55.2" y="1893" width="0.3" height="15.0" fill="rgb(214,28,32)" rx="2" ry="2" />
<text  x="58.21" y="1903.5" ></text>
</g>
<g >
<title>ext4_file_read_iter (97,000,000 samples, 0.07%)</title><rect x="47.0" y="1941" width="0.8" height="15.0" fill="rgb(253,84,29)" rx="2" ry="2" />
<text  x="49.96" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1685" width="0.1" height="15.0" fill="rgb(238,224,33)" rx="2" ry="2" />
<text  x="17.30" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (36,750,000 samples, 0.03%)</title><rect x="13.0" y="1557" width="0.3" height="15.0" fill="rgb(252,148,48)" rx="2" ry="2" />
<text  x="15.97" y="1567.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (32,500,000 samples, 0.02%)</title><rect x="1052.0" y="1941" width="0.2" height="15.0" fill="rgb(246,156,22)" rx="2" ry="2" />
<text  x="1054.97" y="1951.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (67,500,000 samples, 0.05%)</title><rect x="11.4" y="1861" width="0.6" height="15.0" fill="rgb(251,167,0)" rx="2" ry="2" />
<text  x="14.44" y="1871.5" ></text>
</g>
<g >
<title>pqRowProcessor (42,500,000 samples, 0.03%)</title><rect x="64.9" y="2021" width="0.4" height="15.0" fill="rgb(228,192,22)" rx="2" ry="2" />
<text  x="67.89" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1557" width="0.1" height="15.0" fill="rgb(209,65,8)" rx="2" ry="2" />
<text  x="17.30" y="1567.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1333" width="0.1" height="15.0" fill="rgb(232,85,1)" rx="2" ry="2" />
<text  x="17.30" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (35,000,000 samples, 0.03%)</title><rect x="13.0" y="1541" width="0.3" height="15.0" fill="rgb(218,70,12)" rx="2" ry="2" />
<text  x="15.97" y="1551.5" ></text>
</g>
<g >
<title>uv__io_poll (129,750,000 samples, 0.10%)</title><rect x="11.3" y="1957" width="1.1" height="15.0" fill="rgb(217,34,50)" rx="2" ry="2" />
<text  x="14.29" y="1967.5" ></text>
</g>
<g >
<title>ExecStoreBufferHeapTuple (44,250,000 samples, 0.03%)</title><rect x="15.5" y="2037" width="0.4" height="15.0" fill="rgb(212,202,14)" rx="2" ry="2" />
<text  x="18.50" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,000,000 samples, 0.02%)</title><rect x="13.0" y="949" width="0.2" height="15.0" fill="rgb(250,95,35)" rx="2" ry="2" />
<text  x="16.02" y="959.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (28,500,000 samples, 0.02%)</title><rect x="14.6" y="1749" width="0.3" height="15.0" fill="rgb(244,39,45)" rx="2" ry="2" />
<text  x="17.62" y="1759.5" ></text>
</g>
<g >
<title>_fxypty_out (381,500,000 samples, 0.28%)</title><rect x="36.9" y="2021" width="3.3" height="15.0" fill="rgb(250,210,16)" rx="2" ry="2" />
<text  x="39.89" y="2031.5" ></text>
</g>
<g >
<title>uv__stream_io (32,750,000 samples, 0.02%)</title><rect x="12.1" y="1941" width="0.3" height="15.0" fill="rgb(223,87,4)" rx="2" ry="2" />
<text  x="15.13" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (20,000,000 samples, 0.01%)</title><rect x="13.0" y="837" width="0.2" height="15.0" fill="rgb(214,164,18)" rx="2" ry="2" />
<text  x="16.04" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1797" width="0.1" height="15.0" fill="rgb(245,38,19)" rx="2" ry="2" />
<text  x="17.30" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (34,750,000 samples, 0.03%)</title><rect x="13.0" y="1493" width="0.3" height="15.0" fill="rgb(219,186,18)" rx="2" ry="2" />
<text  x="15.97" y="1503.5" ></text>
</g>
<g >
<title>uv__work_done (72,750,000 samples, 0.05%)</title><rect x="11.4" y="1925" width="0.7" height="15.0" fill="rgb(214,59,27)" rx="2" ry="2" />
<text  x="14.44" y="1935.5" ></text>
</g>
<g >
<title>[perf-2123.map] (15,250,000 samples, 0.01%)</title><rect x="11.8" y="1349" width="0.2" height="15.0" fill="rgb(244,117,15)" rx="2" ry="2" />
<text  x="14.84" y="1359.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::PerformCheckpoint (49,000,000 samples, 0.04%)</title><rect x="11.6" y="1829" width="0.4" height="15.0" fill="rgb(216,28,1)" rx="2" ry="2" />
<text  x="14.55" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (40,250,000 samples, 0.03%)</title><rect x="13.0" y="1669" width="0.3" height="15.0" fill="rgb(245,52,26)" rx="2" ry="2" />
<text  x="15.95" y="1679.5" ></text>
</g>
<g >
<title>[perf-2123.map] (16,750,000 samples, 0.01%)</title><rect x="11.8" y="1365" width="0.2" height="15.0" fill="rgb(230,162,33)" rx="2" ry="2" />
<text  x="14.83" y="1375.5" ></text>
</g>
<g >
<title>[psql] (583,000,000 samples, 0.43%)</title><rect x="56.2" y="2037" width="5.0" height="15.0" fill="rgb(237,192,36)" rx="2" ry="2" />
<text  x="59.18" y="2047.5" ></text>
</g>
<g >
<title>arch_call_rest_init (15,900,750,000 samples, 11.67%)</title><rect x="1052.3" y="1973" width="137.7" height="15.0" fill="rgb(240,89,37)" rx="2" ry="2" />
<text  x="1055.27" y="1983.5" >arch_call_rest_init</text>
</g>
<g >
<title>dup_mmap (12,500,000 samples, 0.01%)</title><rect x="13.7" y="1909" width="0.1" height="15.0" fill="rgb(215,93,25)" rx="2" ry="2" />
<text  x="16.72" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1237" width="0.1" height="15.0" fill="rgb(252,154,43)" rx="2" ry="2" />
<text  x="17.30" y="1247.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1045" width="0.1" height="15.0" fill="rgb(233,206,1)" rx="2" ry="2" />
<text  x="17.30" y="1055.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (49,000,000 samples, 0.04%)</title><rect x="11.6" y="1765" width="0.4" height="15.0" fill="rgb(207,225,15)" rx="2" ry="2" />
<text  x="14.55" y="1775.5" ></text>
</g>
<g >
<title>cpu_startup_entry (108,632,500,000 samples, 79.72%)</title><rect x="111.5" y="2005" width="940.8" height="15.0" fill="rgb(211,133,39)" rx="2" ry="2" />
<text  x="114.54" y="2015.5" >cpu_startup_entry</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="165" width="0.1" height="15.0" fill="rgb(221,101,8)" rx="2" ry="2" />
<text  x="17.30" y="175.5" ></text>
</g>
<g >
<title>_IO_setb (14,500,000 samples, 0.01%)</title><rect x="35.5" y="2021" width="0.1" height="15.0" fill="rgb(210,56,23)" rx="2" ry="2" />
<text  x="38.52" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="597" width="0.1" height="15.0" fill="rgb(245,56,27)" rx="2" ry="2" />
<text  x="17.30" y="607.5" ></text>
</g>
<g >
<title>__x64_sys_poll (53,250,000 samples, 0.04%)</title><rect x="66.9" y="1989" width="0.4" height="15.0" fill="rgb(210,180,43)" rx="2" ry="2" />
<text  x="69.86" y="1999.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (124,533,250,000 samples, 91.39%)</title><rect x="111.5" y="2037" width="1078.5" height="15.0" fill="rgb(254,47,10)" rx="2" ry="2" />
<text  x="114.54" y="2047.5" >secondary_startup_64_no_verify</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,500,000 samples, 0.01%)</title><rect x="13.1" y="629" width="0.1" height="15.0" fill="rgb(232,48,48)" rx="2" ry="2" />
<text  x="16.06" y="639.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (60,750,000 samples, 0.04%)</title><rect x="14.5" y="1797" width="0.6" height="15.0" fill="rgb(245,192,47)" rx="2" ry="2" />
<text  x="17.53" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="277" width="0.1" height="15.0" fill="rgb(245,215,18)" rx="2" ry="2" />
<text  x="17.30" y="287.5" ></text>
</g>
<g >
<title>[perf-2123.map] (42,750,000 samples, 0.03%)</title><rect x="11.6" y="1525" width="0.4" height="15.0" fill="rgb(244,118,44)" rx="2" ry="2" />
<text  x="14.61" y="1535.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1109" width="0.1" height="15.0" fill="rgb(208,8,35)" rx="2" ry="2" />
<text  x="17.30" y="1119.5" ></text>
</g>
<g >
<title>do_syscall_64 (252,000,000 samples, 0.18%)</title><rect x="47.9" y="2005" width="2.2" height="15.0" fill="rgb(251,155,21)" rx="2" ry="2" />
<text  x="50.91" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1429" width="0.1" height="15.0" fill="rgb(209,196,40)" rx="2" ry="2" />
<text  x="17.30" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22,000,000 samples, 0.02%)</title><rect x="13.0" y="885" width="0.2" height="15.0" fill="rgb(217,197,11)" rx="2" ry="2" />
<text  x="16.02" y="895.5" ></text>
</g>
<g >
<title>node::StreamBase::CallJSOnreadMethod (29,500,000 samples, 0.02%)</title><rect x="12.1" y="1861" width="0.3" height="15.0" fill="rgb(236,102,22)" rx="2" ry="2" />
<text  x="15.15" y="1871.5" ></text>
</g>
<g >
<title>hash_search_with_hash_value (22,000,000 samples, 0.02%)</title><rect x="50.3" y="2037" width="0.2" height="15.0" fill="rgb(253,28,43)" rx="2" ry="2" />
<text  x="53.30" y="2047.5" ></text>
</g>
<g >
<title>__mem_cgroup_charge (34,000,000 samples, 0.02%)</title><rect x="55.2" y="1909" width="0.3" height="15.0" fill="rgb(251,50,46)" rx="2" ry="2" />
<text  x="58.20" y="1919.5" ></text>
</g>
<g >
<title>exc_page_fault (21,500,000 samples, 0.02%)</title><rect x="64.5" y="1989" width="0.2" height="15.0" fill="rgb(217,38,5)" rx="2" ry="2" />
<text  x="67.54" y="1999.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (29,500,000 samples, 0.02%)</title><rect x="12.5" y="1893" width="0.3" height="15.0" fill="rgb(239,20,24)" rx="2" ry="2" />
<text  x="15.52" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="869" width="0.1" height="15.0" fill="rgb(249,170,42)" rx="2" ry="2" />
<text  x="17.30" y="879.5" ></text>
</g>
<g >
<title>[perf-2123.map] (44,000,000 samples, 0.03%)</title><rect x="11.6" y="1653" width="0.4" height="15.0" fill="rgb(254,38,50)" rx="2" ry="2" />
<text  x="14.60" y="1663.5" ></text>
</g>
<g >
<title>[postgres] (26,250,000 samples, 0.02%)</title><rect x="17.1" y="2037" width="0.3" height="15.0" fill="rgb(245,4,38)" rx="2" ry="2" />
<text  x="20.14" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="549" width="0.1" height="15.0" fill="rgb(238,123,47)" rx="2" ry="2" />
<text  x="17.30" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (13,000,000 samples, 0.01%)</title><rect x="13.7" y="2021" width="0.1" height="15.0" fill="rgb(244,99,48)" rx="2" ry="2" />
<text  x="16.71" y="2031.5" ></text>
</g>
<g >
<title>printtup (15,000,000 samples, 0.01%)</title><rect x="41.2" y="2021" width="0.1" height="15.0" fill="rgb(216,123,53)" rx="2" ry="2" />
<text  x="44.18" y="2031.5" ></text>
</g>
<g >
<title>__x64_sys_brk (189,000,000 samples, 0.14%)</title><rect x="62.7" y="1973" width="1.7" height="15.0" fill="rgb(218,67,17)" rx="2" ry="2" />
<text  x="65.72" y="1983.5" ></text>
</g>
<g >
<title>handle_mm_fault (15,750,000 samples, 0.01%)</title><rect x="64.6" y="1957" width="0.1" height="15.0" fill="rgb(211,36,41)" rx="2" ry="2" />
<text  x="67.59" y="1967.5" ></text>
</g>
<g >
<title>pg_encoding_mblen (392,750,000 samples, 0.29%)</title><rect x="72.4" y="2037" width="3.4" height="15.0" fill="rgb(253,67,49)" rx="2" ry="2" />
<text  x="75.43" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="917" width="0.1" height="15.0" fill="rgb(227,69,12)" rx="2" ry="2" />
<text  x="17.30" y="927.5" ></text>
</g>
<g >
<title>clear_page_erms (18,750,000 samples, 0.01%)</title><rect x="48.5" y="1845" width="0.2" height="15.0" fill="rgb(230,54,6)" rx="2" ry="2" />
<text  x="51.54" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="53" width="0.1" height="15.0" fill="rgb(237,173,21)" rx="2" ry="2" />
<text  x="17.30" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1269" width="0.1" height="15.0" fill="rgb(231,183,32)" rx="2" ry="2" />
<text  x="17.30" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="933" width="0.1" height="15.0" fill="rgb(226,112,31)" rx="2" ry="2" />
<text  x="17.30" y="943.5" ></text>
</g>
<g >
<title>ext4_buffered_write_iter (60,750,000 samples, 0.04%)</title><rect x="14.5" y="1781" width="0.6" height="15.0" fill="rgb(242,176,37)" rx="2" ry="2" />
<text  x="17.53" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="293" width="0.1" height="15.0" fill="rgb(233,106,33)" rx="2" ry="2" />
<text  x="17.30" y="303.5" ></text>
</g>
<g >
<title>get_page_from_freelist (16,500,000 samples, 0.01%)</title><rect x="55.8" y="1861" width="0.2" height="15.0" fill="rgb(225,46,40)" rx="2" ry="2" />
<text  x="58.82" y="1871.5" ></text>
</g>
<g >
<title>fxypty_out (12,500,000 samples, 0.01%)</title><rect x="44.0" y="2005" width="0.1" height="15.0" fill="rgb(216,44,32)" rx="2" ry="2" />
<text  x="46.96" y="2015.5" ></text>
</g>
<g >
<title>AllocSetReset (17,250,000 samples, 0.01%)</title><rect x="15.3" y="2037" width="0.1" height="15.0" fill="rgb(222,106,8)" rx="2" ry="2" />
<text  x="18.30" y="2047.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (68,250,000 samples, 0.05%)</title><rect x="14.5" y="1893" width="0.6" height="15.0" fill="rgb(219,86,37)" rx="2" ry="2" />
<text  x="17.47" y="1903.5" ></text>
</g>
<g >
<title>node::ThreadPoolWork::ScheduleWork (68,000,000 samples, 0.05%)</title><rect x="11.4" y="1909" width="0.6" height="15.0" fill="rgb(215,48,44)" rx="2" ry="2" />
<text  x="14.44" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="613" width="0.1" height="15.0" fill="rgb(247,32,24)" rx="2" ry="2" />
<text  x="17.30" y="623.5" ></text>
</g>
<g >
<title>do_user_addr_fault (21,500,000 samples, 0.02%)</title><rect x="64.5" y="1973" width="0.2" height="15.0" fill="rgb(210,67,34)" rx="2" ry="2" />
<text  x="67.54" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="229" width="0.1" height="15.0" fill="rgb(241,226,49)" rx="2" ry="2" />
<text  x="17.30" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="181" width="0.1" height="15.0" fill="rgb(251,68,29)" rx="2" ry="2" />
<text  x="17.30" y="191.5" ></text>
</g>
<g >
<title>__sys_recvfrom (115,250,000 samples, 0.08%)</title><rect x="65.7" y="1957" width="1.0" height="15.0" fill="rgb(231,10,7)" rx="2" ry="2" />
<text  x="68.68" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,500,000 samples, 0.03%)</title><rect x="12.9" y="1845" width="0.4" height="15.0" fill="rgb(224,101,49)" rx="2" ry="2" />
<text  x="15.93" y="1855.5" ></text>
</g>
<g >
<title>[perf-2123.map] (21,750,000 samples, 0.02%)</title><rect x="11.8" y="1397" width="0.2" height="15.0" fill="rgb(216,207,42)" rx="2" ry="2" />
<text  x="14.78" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,500,000 samples, 0.02%)</title><rect x="13.0" y="1397" width="0.3" height="15.0" fill="rgb(218,90,8)" rx="2" ry="2" />
<text  x="15.98" y="1407.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1829" width="0.1" height="15.0" fill="rgb(247,20,10)" rx="2" ry="2" />
<text  x="17.30" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,750,000 samples, 0.01%)</title><rect x="13.1" y="517" width="0.1" height="15.0" fill="rgb(216,116,53)" rx="2" ry="2" />
<text  x="16.06" y="527.5" ></text>
</g>
<g >
<title>_Fork (13,250,000 samples, 0.01%)</title><rect x="13.7" y="2037" width="0.1" height="15.0" fill="rgb(239,170,35)" rx="2" ry="2" />
<text  x="16.71" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="741" width="0.1" height="15.0" fill="rgb(217,198,25)" rx="2" ry="2" />
<text  x="17.30" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (33,000,000 samples, 0.02%)</title><rect x="13.0" y="1445" width="0.3" height="15.0" fill="rgb(240,52,38)" rx="2" ry="2" />
<text  x="15.98" y="1455.5" ></text>
</g>
<g >
<title>__mark_inode_dirty (14,250,000 samples, 0.01%)</title><rect x="14.9" y="1717" width="0.1" height="15.0" fill="rgb(222,181,53)" rx="2" ry="2" />
<text  x="17.89" y="1727.5" ></text>
</g>
<g >
<title>socket_putmessage (13,250,000 samples, 0.01%)</title><rect x="51.6" y="2037" width="0.1" height="15.0" fill="rgb(246,173,52)" rx="2" ry="2" />
<text  x="54.61" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (21,750,000 samples, 0.02%)</title><rect x="13.0" y="869" width="0.2" height="15.0" fill="rgb(227,10,44)" rx="2" ry="2" />
<text  x="16.02" y="879.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (37,750,000 samples, 0.03%)</title><rect x="13.0" y="1605" width="0.3" height="15.0" fill="rgb(247,73,44)" rx="2" ry="2" />
<text  x="15.96" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,000,000 samples, 0.02%)</title><rect x="13.0" y="981" width="0.2" height="15.0" fill="rgb(227,140,10)" rx="2" ry="2" />
<text  x="16.02" y="991.5" ></text>
</g>
<g >
<title>vm_area_dup (19,250,000 samples, 0.01%)</title><rect x="63.0" y="1909" width="0.2" height="15.0" fill="rgb(248,190,43)" rx="2" ry="2" />
<text  x="65.99" y="1919.5" ></text>
</g>
<g >
<title>pg_encoding_dsplen (379,500,000 samples, 0.28%)</title><rect x="69.1" y="2037" width="3.3" height="15.0" fill="rgb(249,189,10)" rx="2" ry="2" />
<text  x="72.15" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1765" width="0.1" height="15.0" fill="rgb(246,111,49)" rx="2" ry="2" />
<text  x="17.30" y="1775.5" ></text>
</g>
<g >
<title>v8::Function::Call (29,750,000 samples, 0.02%)</title><rect x="12.5" y="1925" width="0.3" height="15.0" fill="rgb(208,8,17)" rx="2" ry="2" />
<text  x="15.51" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41,000,000 samples, 0.03%)</title><rect x="13.0" y="1685" width="0.3" height="15.0" fill="rgb(249,229,27)" rx="2" ry="2" />
<text  x="15.95" y="1695.5" ></text>
</g>
<g >
<title>pqResultAlloc (27,250,000 samples, 0.02%)</title><rect x="104.1" y="2037" width="0.2" height="15.0" fill="rgb(240,193,43)" rx="2" ry="2" />
<text  x="107.05" y="2047.5" ></text>
</g>
<g >
<title>pqGetc (18,500,000 samples, 0.01%)</title><rect x="103.2" y="2037" width="0.2" height="15.0" fill="rgb(227,6,22)" rx="2" ry="2" />
<text  x="106.22" y="2047.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (108,590,000,000 samples, 79.69%)</title><rect x="111.6" y="1925" width="940.3" height="15.0" fill="rgb(205,30,28)" rx="2" ry="2" />
<text  x="114.57" y="1935.5" >cpuidle_enter_state</text>
</g>
<g >
<title>utf8_to_unicode (360,250,000 samples, 0.26%)</title><rect x="108.1" y="2037" width="3.1" height="15.0" fill="rgb(243,29,37)" rx="2" ry="2" />
<text  x="111.13" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1365" width="0.1" height="15.0" fill="rgb(234,65,49)" rx="2" ry="2" />
<text  x="17.30" y="1375.5" ></text>
</g>
<g >
<title>Builtins_AsyncFunctionAwaitResolveClosure (47,500,000 samples, 0.03%)</title><rect x="11.6" y="1701" width="0.4" height="15.0" fill="rgb(214,201,1)" rx="2" ry="2" />
<text  x="14.57" y="1711.5" ></text>
</g>
<g >
<title>folio_add_lru (12,500,000 samples, 0.01%)</title><rect x="55.6" y="1877" width="0.1" height="15.0" fill="rgb(227,190,46)" rx="2" ry="2" />
<text  x="58.62" y="1887.5" ></text>
</g>
<g >
<title>copy_user_enhanced_fast_string (76,750,000 samples, 0.06%)</title><rect x="47.0" y="1893" width="0.7" height="15.0" fill="rgb(217,74,0)" rx="2" ry="2" />
<text  x="50.03" y="1903.5" ></text>
</g>
<g >
<title>__do_munmap (171,250,000 samples, 0.13%)</title><rect x="62.7" y="1941" width="1.5" height="15.0" fill="rgb(245,23,19)" rx="2" ry="2" />
<text  x="65.73" y="1951.5" ></text>
</g>
<g >
<title>[perf-2123.map] (19,250,000 samples, 0.01%)</title><rect x="11.8" y="1381" width="0.2" height="15.0" fill="rgb(250,23,29)" rx="2" ry="2" />
<text  x="14.81" y="1391.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1909" width="0.1" height="15.0" fill="rgb(213,27,9)" rx="2" ry="2" />
<text  x="17.30" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,500,000 samples, 0.01%)</title><rect x="13.1" y="565" width="0.1" height="15.0" fill="rgb(253,216,33)" rx="2" ry="2" />
<text  x="16.06" y="575.5" ></text>
</g>
<g >
<title>[perf-2123.map] (35,500,000 samples, 0.03%)</title><rect x="11.7" y="1445" width="0.3" height="15.0" fill="rgb(211,222,18)" rx="2" ry="2" />
<text  x="14.67" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (28,250,000 samples, 0.02%)</title><rect x="13.0" y="1221" width="0.2" height="15.0" fill="rgb(220,85,53)" rx="2" ry="2" />
<text  x="16.00" y="1231.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (28,000,000 samples, 0.02%)</title><rect x="13.0" y="1173" width="0.2" height="15.0" fill="rgb(252,128,40)" rx="2" ry="2" />
<text  x="16.00" y="1183.5" ></text>
</g>
<g >
<title>__alloc_pages (19,000,000 samples, 0.01%)</title><rect x="55.8" y="1877" width="0.2" height="15.0" fill="rgb(219,20,18)" rx="2" ry="2" />
<text  x="58.80" y="1887.5" ></text>
</g>
<g >
<title>__skb_datagram_iter (53,000,000 samples, 0.04%)</title><rect x="66.2" y="1861" width="0.5" height="15.0" fill="rgb(251,11,45)" rx="2" ry="2" />
<text  x="69.21" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="437" width="0.1" height="15.0" fill="rgb(251,221,47)" rx="2" ry="2" />
<text  x="17.30" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1925" width="0.1" height="15.0" fill="rgb(243,164,27)" rx="2" ry="2" />
<text  x="17.30" y="1935.5" ></text>
</g>
<g >
<title>start_secondary (108,632,500,000 samples, 79.72%)</title><rect x="111.5" y="2021" width="940.8" height="15.0" fill="rgb(210,190,53)" rx="2" ry="2" />
<text  x="114.54" y="2031.5" >start_secondary</text>
</g>
<g >
<title>cpuidle_enter (15,880,000,000 samples, 11.65%)</title><rect x="1052.3" y="1877" width="137.5" height="15.0" fill="rgb(254,68,14)" rx="2" ry="2" />
<text  x="1055.29" y="1887.5" >cpuidle_enter</text>
</g>
<g >
<title>copy_user_enhanced_fast_string (47,000,000 samples, 0.03%)</title><rect x="66.3" y="1829" width="0.4" height="15.0" fill="rgb(215,126,5)" rx="2" ry="2" />
<text  x="69.26" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="469" width="0.1" height="15.0" fill="rgb(248,160,12)" rx="2" ry="2" />
<text  x="17.30" y="479.5" ></text>
</g>
<g >
<title>__folio_alloc (20,000,000 samples, 0.01%)</title><rect x="55.8" y="1893" width="0.2" height="15.0" fill="rgb(240,170,19)" rx="2" ry="2" />
<text  x="58.80" y="1903.5" ></text>
</g>
<g >
<title>__schedule (24,250,000 samples, 0.02%)</title><rect x="67.0" y="1893" width="0.2" height="15.0" fill="rgb(252,187,0)" rx="2" ry="2" />
<text  x="70.01" y="1903.5" ></text>
</g>
<g >
<title>handle_mm_fault (26,750,000 samples, 0.02%)</title><rect x="105.0" y="1973" width="0.2" height="15.0" fill="rgb(232,95,26)" rx="2" ry="2" />
<text  x="107.96" y="1983.5" ></text>
</g>
<g >
<title>exc_page_fault (42,750,000 samples, 0.03%)</title><rect x="104.8" y="2005" width="0.4" height="15.0" fill="rgb(242,202,45)" rx="2" ry="2" />
<text  x="107.83" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (16,000,000 samples, 0.01%)</title><rect x="13.1" y="677" width="0.1" height="15.0" fill="rgb(232,76,31)" rx="2" ry="2" />
<text  x="16.05" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1621" width="0.1" height="15.0" fill="rgb(233,130,40)" rx="2" ry="2" />
<text  x="17.30" y="1631.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (117,250,000 samples, 0.09%)</title><rect x="65.7" y="2005" width="1.0" height="15.0" fill="rgb(248,146,22)" rx="2" ry="2" />
<text  x="68.68" y="2015.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (157,000,000 samples, 0.12%)</title><rect x="45.3" y="2037" width="1.3" height="15.0" fill="rgb(214,92,0)" rx="2" ry="2" />
<text  x="48.29" y="2047.5" ></text>
</g>
<g >
<title>pqGetInt (71,500,000 samples, 0.05%)</title><rect x="102.6" y="2037" width="0.6" height="15.0" fill="rgb(246,121,49)" rx="2" ry="2" />
<text  x="105.61" y="2047.5" ></text>
</g>
<g >
<title>[pgfixeypointy.so] (16,750,000 samples, 0.01%)</title><rect x="33.7" y="2021" width="0.2" height="15.0" fill="rgb(251,206,29)" rx="2" ry="2" />
<text  x="36.74" y="2031.5" ></text>
</g>
<g >
<title>Watcher::isIgnored (47,500,000 samples, 0.03%)</title><rect x="12.9" y="1941" width="0.4" height="15.0" fill="rgb(229,134,52)" rx="2" ry="2" />
<text  x="15.91" y="1951.5" ></text>
</g>
<g >
<title>rest_init (15,900,750,000 samples, 11.67%)</title><rect x="1052.3" y="1957" width="137.7" height="15.0" fill="rgb(252,170,50)" rx="2" ry="2" />
<text  x="1055.27" y="1967.5" >rest_init</text>
</g>
<g >
<title>node::NodeMainInstance::Run (182,000,000 samples, 0.13%)</title><rect x="11.2" y="2005" width="1.6" height="15.0" fill="rgb(227,47,49)" rx="2" ry="2" />
<text  x="14.20" y="2015.5" ></text>
</g>
<g >
<title>cmd_record (75,250,000 samples, 0.06%)</title><rect x="14.4" y="1989" width="0.7" height="15.0" fill="rgb(231,86,17)" rx="2" ry="2" />
<text  x="17.42" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="821" width="0.1" height="15.0" fill="rgb(245,53,22)" rx="2" ry="2" />
<text  x="17.30" y="831.5" ></text>
</g>
<g >
<title>Builtins_RunMicrotasks (48,500,000 samples, 0.04%)</title><rect x="11.6" y="1733" width="0.4" height="15.0" fill="rgb(251,36,0)" rx="2" ry="2" />
<text  x="14.56" y="1743.5" ></text>
</g>
<g >
<title>MemoryContextReset (22,500,000 samples, 0.02%)</title><rect x="18.3" y="2021" width="0.2" height="15.0" fill="rgb(245,198,19)" rx="2" ry="2" />
<text  x="21.33" y="2031.5" ></text>
</g>
<g >
<title>do_idle (15,899,750,000 samples, 11.67%)</title><rect x="1052.3" y="1925" width="137.7" height="15.0" fill="rgb(219,212,54)" rx="2" ry="2" />
<text  x="1055.28" y="1935.5" >do_idle</text>
</g>
<g >
<title>pqSkipnchar (14,500,000 samples, 0.01%)</title><rect x="104.4" y="2037" width="0.1" height="15.0" fill="rgb(211,98,12)" rx="2" ry="2" />
<text  x="107.37" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,500,000 samples, 0.01%)</title><rect x="13.1" y="581" width="0.1" height="15.0" fill="rgb(217,62,15)" rx="2" ry="2" />
<text  x="16.06" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1941" width="0.1" height="15.0" fill="rgb(220,222,46)" rx="2" ry="2" />
<text  x="17.30" y="1951.5" ></text>
</g>
<g >
<title>native_safe_halt (15,878,750,000 samples, 11.65%)</title><rect x="1052.3" y="1829" width="137.5" height="15.0" fill="rgb(218,3,13)" rx="2" ry="2" />
<text  x="1055.30" y="1839.5" >native_safe_halt</text>
</g>
<g >
<title>unmap_vmas (23,000,000 samples, 0.02%)</title><rect x="64.0" y="1909" width="0.2" height="15.0" fill="rgb(249,72,17)" rx="2" ry="2" />
<text  x="67.00" y="1919.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (12,250,000 samples, 0.01%)</title><rect x="12.3" y="1797" width="0.1" height="15.0" fill="rgb(238,166,21)" rx="2" ry="2" />
<text  x="15.29" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="645" width="0.1" height="15.0" fill="rgb(244,42,38)" rx="2" ry="2" />
<text  x="17.30" y="655.5" ></text>
</g>
<g >
<title>[perf-1052.map] (12,000,000 samples, 0.01%)</title><rect x="12.2" y="1717" width="0.1" height="15.0" fill="rgb(238,163,10)" rx="2" ry="2" />
<text  x="15.15" y="1727.5" ></text>
</g>
<g >
<title>node::LibuvStreamWrap::OnUvRead (30,000,000 samples, 0.02%)</title><rect x="12.1" y="1893" width="0.3" height="15.0" fill="rgb(238,34,2)" rx="2" ry="2" />
<text  x="15.14" y="1903.5" ></text>
</g>
<g >
<title>InotifyBackend::handleSubscription (49,500,000 samples, 0.04%)</title><rect x="12.9" y="1957" width="0.4" height="15.0" fill="rgb(248,177,24)" rx="2" ry="2" />
<text  x="15.91" y="1967.5" ></text>
</g>
<g >
<title>AllocSetAlloc (26,750,000 samples, 0.02%)</title><rect x="15.1" y="2037" width="0.2" height="15.0" fill="rgb(218,153,6)" rx="2" ry="2" />
<text  x="18.07" y="2047.5" ></text>
</g>
<g >
<title>call_cpuidle (108,590,500,000 samples, 79.69%)</title><rect x="111.6" y="1957" width="940.3" height="15.0" fill="rgb(211,184,2)" rx="2" ry="2" />
<text  x="114.57" y="1967.5" >call_cpuidle</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,250,000 samples, 0.02%)</title><rect x="13.0" y="1013" width="0.2" height="15.0" fill="rgb(239,102,27)" rx="2" ry="2" />
<text  x="16.01" y="1023.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="2005" width="0.1" height="15.0" fill="rgb(236,217,9)" rx="2" ry="2" />
<text  x="17.30" y="2015.5" ></text>
</g>
<g >
<title>ext4_da_write_end (17,500,000 samples, 0.01%)</title><rect x="14.9" y="1749" width="0.1" height="15.0" fill="rgb(253,145,37)" rx="2" ry="2" />
<text  x="17.87" y="1759.5" ></text>
</g>
<g >
<title>__pagevec_lru_add (12,250,000 samples, 0.01%)</title><rect x="55.6" y="1861" width="0.1" height="15.0" fill="rgb(209,86,16)" rx="2" ry="2" />
<text  x="58.62" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="997" width="0.1" height="15.0" fill="rgb(242,157,36)" rx="2" ry="2" />
<text  x="17.30" y="1007.5" ></text>
</g>
<g >
<title>pg_utf_mblen (868,500,000 samples, 0.64%)</title><rect x="83.6" y="2037" width="7.5" height="15.0" fill="rgb(209,10,10)" rx="2" ry="2" />
<text  x="86.63" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1349" width="0.1" height="15.0" fill="rgb(226,181,5)" rx="2" ry="2" />
<text  x="17.30" y="1359.5" ></text>
</g>
<g >
<title>pqParseInput3 (77,250,000 samples, 0.06%)</title><rect x="103.4" y="2037" width="0.7" height="15.0" fill="rgb(226,156,36)" rx="2" ry="2" />
<text  x="106.38" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (13,500,000 samples, 0.01%)</title><rect x="13.1" y="613" width="0.1" height="15.0" fill="rgb(224,26,10)" rx="2" ry="2" />
<text  x="16.06" y="623.5" ></text>
</g>
<g >
<title>[perf-2123.map] (43,750,000 samples, 0.03%)</title><rect x="11.6" y="1589" width="0.4" height="15.0" fill="rgb(213,187,45)" rx="2" ry="2" />
<text  x="14.60" y="1599.5" ></text>
</g>
<g >
<title>node::LibuvStreamWrap::ReadStart (30,750,000 samples, 0.02%)</title><rect x="12.1" y="1909" width="0.3" height="15.0" fill="rgb(241,32,37)" rx="2" ry="2" />
<text  x="15.14" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="453" width="0.1" height="15.0" fill="rgb(230,51,35)" rx="2" ry="2" />
<text  x="17.30" y="463.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (107,750,000 samples, 0.08%)</title><rect x="46.9" y="2021" width="1.0" height="15.0" fill="rgb(233,167,17)" rx="2" ry="2" />
<text  x="49.93" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (44,500,000 samples, 0.03%)</title><rect x="12.9" y="1861" width="0.4" height="15.0" fill="rgb(225,29,4)" rx="2" ry="2" />
<text  x="15.93" y="1871.5" ></text>
</g>
<g >
<title>sock_def_readable (145,250,000 samples, 0.11%)</title><rect x="48.8" y="1925" width="1.3" height="15.0" fill="rgb(229,44,18)" rx="2" ry="2" />
<text  x="51.81" y="1935.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (12,250,000 samples, 0.01%)</title><rect x="12.3" y="1781" width="0.1" height="15.0" fill="rgb(235,65,31)" rx="2" ry="2" />
<text  x="15.29" y="1791.5" ></text>
</g>
<g >
<title>do_idle (108,630,500,000 samples, 79.72%)</title><rect x="111.6" y="1989" width="940.7" height="15.0" fill="rgb(230,144,37)" rx="2" ry="2" />
<text  x="114.55" y="1999.5" >do_idle</text>
</g>
<g >
<title>AllocSetReset (102,750,000 samples, 0.08%)</title><rect x="41.3" y="2005" width="0.9" height="15.0" fill="rgb(247,132,46)" rx="2" ry="2" />
<text  x="44.31" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1445" width="0.1" height="15.0" fill="rgb(209,17,4)" rx="2" ry="2" />
<text  x="17.30" y="1455.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1013" width="0.1" height="15.0" fill="rgb(223,102,53)" rx="2" ry="2" />
<text  x="17.30" y="1023.5" ></text>
</g>
<g >
<title>[perf-2123.map] (43,000,000 samples, 0.03%)</title><rect x="11.6" y="1541" width="0.4" height="15.0" fill="rgb(239,15,34)" rx="2" ry="2" />
<text  x="14.60" y="1551.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (29,500,000 samples, 0.02%)</title><rect x="12.5" y="1877" width="0.3" height="15.0" fill="rgb(240,12,31)" rx="2" ry="2" />
<text  x="15.52" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (35,000,000 samples, 0.03%)</title><rect x="13.0" y="1525" width="0.3" height="15.0" fill="rgb(216,19,52)" rx="2" ry="2" />
<text  x="15.97" y="1535.5" ></text>
</g>
<g >
<title>schedule_idle (34,500,000 samples, 0.03%)</title><rect x="1051.9" y="1973" width="0.3" height="15.0" fill="rgb(206,164,26)" rx="2" ry="2" />
<text  x="1054.95" y="1983.5" ></text>
</g>
<g >
<title>ksys_write (68,000,000 samples, 0.05%)</title><rect x="14.5" y="1845" width="0.6" height="15.0" fill="rgb(251,121,51)" rx="2" ry="2" />
<text  x="17.47" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1749" width="0.1" height="15.0" fill="rgb(216,133,45)" rx="2" ry="2" />
<text  x="17.30" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="149" width="0.1" height="15.0" fill="rgb(234,183,17)" rx="2" ry="2" />
<text  x="17.30" y="159.5" ></text>
</g>
<g >
<title>__cmd_record.constprop.0 (75,250,000 samples, 0.06%)</title><rect x="14.4" y="1973" width="0.7" height="15.0" fill="rgb(215,96,24)" rx="2" ry="2" />
<text  x="17.42" y="1983.5" ></text>
</g>
<g >
<title>pqAddTuple (35,500,000 samples, 0.03%)</title><rect x="64.4" y="2021" width="0.3" height="15.0" fill="rgb(218,158,32)" rx="2" ry="2" />
<text  x="67.42" y="2031.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineCompilationJob::ExecuteJobImpl (18,500,000 samples, 0.01%)</title><rect x="11.0" y="1957" width="0.2" height="15.0" fill="rgb(220,73,21)" rx="2" ry="2" />
<text  x="14.02" y="1967.5" ></text>
</g>
<g >
<title>Watcher::fireCallbacks (12,750,000 samples, 0.01%)</title><rect x="11.3" y="1925" width="0.1" height="15.0" fill="rgb(222,175,38)" rx="2" ry="2" />
<text  x="14.32" y="1935.5" ></text>
</g>
<g >
<title>ExecScan (20,750,000 samples, 0.02%)</title><rect x="17.8" y="2021" width="0.2" height="15.0" fill="rgb(239,213,30)" rx="2" ry="2" />
<text  x="20.80" y="2031.5" ></text>
</g>
<g >
<title>x86_64_start_kernel (15,900,750,000 samples, 11.67%)</title><rect x="1052.3" y="2021" width="137.7" height="15.0" fill="rgb(239,113,35)" rx="2" ry="2" />
<text  x="1055.27" y="2031.5" >x86_64_start_kernel</text>
</g>
<g >
<title>ExecScanFetch (19,250,000 samples, 0.01%)</title><rect x="18.0" y="2021" width="0.1" height="15.0" fill="rgb(254,106,1)" rx="2" ry="2" />
<text  x="20.98" y="2031.5" ></text>
</g>
<g >
<title>v8::Function::Call (13,000,000 samples, 0.01%)</title><rect x="11.4" y="1829" width="0.2" height="15.0" fill="rgb(252,187,37)" rx="2" ry="2" />
<text  x="14.44" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (43,250,000 samples, 0.03%)</title><rect x="12.9" y="1829" width="0.4" height="15.0" fill="rgb(222,91,26)" rx="2" ry="2" />
<text  x="15.94" y="1839.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (29,500,000 samples, 0.02%)</title><rect x="12.5" y="1909" width="0.3" height="15.0" fill="rgb(227,196,43)" rx="2" ry="2" />
<text  x="15.52" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="37" width="0.1" height="15.0" fill="rgb(229,95,43)" rx="2" ry="2" />
<text  x="17.30" y="47.5" ></text>
</g>
<g >
<title>filemap_read (95,750,000 samples, 0.07%)</title><rect x="47.0" y="1909" width="0.8" height="15.0" fill="rgb(252,19,34)" rx="2" ry="2" />
<text  x="49.97" y="1919.5" ></text>
</g>
<g >
<title>[perf-2123.map] (42,750,000 samples, 0.03%)</title><rect x="11.6" y="1509" width="0.4" height="15.0" fill="rgb(219,46,48)" rx="2" ry="2" />
<text  x="14.61" y="1519.5" ></text>
</g>
<g >
<title>alloc_pages (56,500,000 samples, 0.04%)</title><rect x="48.3" y="1893" width="0.5" height="15.0" fill="rgb(216,130,42)" rx="2" ry="2" />
<text  x="51.31" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="533" width="0.1" height="15.0" fill="rgb(231,4,27)" rx="2" ry="2" />
<text  x="17.30" y="543.5" ></text>
</g>
<g >
<title>flush_tlb_mm_range (21,000,000 samples, 0.02%)</title><rect x="63.5" y="1893" width="0.2" height="15.0" fill="rgb(239,126,51)" rx="2" ry="2" />
<text  x="66.47" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (25,000,000 samples, 0.02%)</title><rect x="13.0" y="997" width="0.2" height="15.0" fill="rgb(226,166,30)" rx="2" ry="2" />
<text  x="16.02" y="1007.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::PlatformWorkerThread (22,750,000 samples, 0.02%)</title><rect x="11.0" y="2021" width="0.2" height="15.0" fill="rgb(218,116,9)" rx="2" ry="2" />
<text  x="14.00" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="357" width="0.1" height="15.0" fill="rgb(252,57,48)" rx="2" ry="2" />
<text  x="17.30" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="85" width="0.1" height="15.0" fill="rgb(214,30,48)" rx="2" ry="2" />
<text  x="17.30" y="95.5" ></text>
</g>
<g >
<title>malloc (20,250,000 samples, 0.01%)</title><rect x="14.0" y="2037" width="0.1" height="15.0" fill="rgb(218,150,25)" rx="2" ry="2" />
<text  x="16.96" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (13,500,000 samples, 0.01%)</title><rect x="13.1" y="549" width="0.1" height="15.0" fill="rgb(243,6,3)" rx="2" ry="2" />
<text  x="16.06" y="559.5" ></text>
</g>
<g >
<title>unix_stream_sendmsg (242,500,000 samples, 0.18%)</title><rect x="48.0" y="1941" width="2.1" height="15.0" fill="rgb(246,82,39)" rx="2" ry="2" />
<text  x="50.97" y="1951.5" ></text>
</g>
<g >
<title>[unknown] (3,223,250,000 samples, 2.37%)</title><rect x="17.4" y="2037" width="27.9" height="15.0" fill="rgb(248,219,50)" rx="2" ry="2" />
<text  x="20.37" y="2047.5" >[..</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (30,250,000 samples, 0.02%)</title><rect x="13.0" y="1333" width="0.2" height="15.0" fill="rgb(219,109,22)" rx="2" ry="2" />
<text  x="15.99" y="1343.5" ></text>
</g>
<g >
<title>PQgetisnull (57,500,000 samples, 0.04%)</title><rect x="61.5" y="2021" width="0.5" height="15.0" fill="rgb(228,120,3)" rx="2" ry="2" />
<text  x="64.49" y="2031.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (13,000,000 samples, 0.01%)</title><rect x="11.4" y="1797" width="0.2" height="15.0" fill="rgb(228,56,25)" rx="2" ry="2" />
<text  x="14.44" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="789" width="0.1" height="15.0" fill="rgb(230,192,0)" rx="2" ry="2" />
<text  x="17.30" y="799.5" ></text>
</g>
<g >
<title>schedule_idle (16,500,000 samples, 0.01%)</title><rect x="1189.8" y="1909" width="0.2" height="15.0" fill="rgb(226,216,27)" rx="2" ry="2" />
<text  x="1192.81" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1989" width="0.1" height="15.0" fill="rgb(220,126,30)" rx="2" ry="2" />
<text  x="17.30" y="1999.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (13,000,000 samples, 0.01%)</title><rect x="11.4" y="1781" width="0.2" height="15.0" fill="rgb(210,217,24)" rx="2" ry="2" />
<text  x="14.44" y="1791.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (79,250,000 samples, 0.06%)</title><rect x="34.7" y="2021" width="0.7" height="15.0" fill="rgb(250,87,7)" rx="2" ry="2" />
<text  x="37.75" y="2031.5" ></text>
</g>
<g >
<title>_IO_setb (29,000,000 samples, 0.02%)</title><rect x="46.6" y="2037" width="0.3" height="15.0" fill="rgb(241,114,53)" rx="2" ry="2" />
<text  x="49.65" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (34,750,000 samples, 0.03%)</title><rect x="13.0" y="1509" width="0.3" height="15.0" fill="rgb(236,222,27)" rx="2" ry="2" />
<text  x="15.97" y="1519.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1253" width="0.1" height="15.0" fill="rgb(244,74,12)" rx="2" ry="2" />
<text  x="17.30" y="1263.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (39,750,000 samples, 0.03%)</title><rect x="13.0" y="1621" width="0.3" height="15.0" fill="rgb(217,153,22)" rx="2" ry="2" />
<text  x="15.96" y="1631.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (19,750,000 samples, 0.01%)</title><rect x="13.0" y="821" width="0.2" height="15.0" fill="rgb(235,109,16)" rx="2" ry="2" />
<text  x="16.04" y="831.5" ></text>
</g>
<g >
<title>InotifyBackend::handleEvent (59,250,000 samples, 0.04%)</title><rect x="12.9" y="1973" width="0.5" height="15.0" fill="rgb(213,45,53)" rx="2" ry="2" />
<text  x="15.90" y="1983.5" ></text>
</g>
<g >
<title>[unknown] (15,250,000 samples, 0.01%)</title><rect x="10.1" y="2037" width="0.1" height="15.0" fill="rgb(213,93,19)" rx="2" ry="2" />
<text  x="13.12" y="2047.5" ></text>
</g>
<g >
<title>record__mmap_read_evlist (70,500,000 samples, 0.05%)</title><rect x="14.5" y="1957" width="0.6" height="15.0" fill="rgb(238,83,26)" rx="2" ry="2" />
<text  x="17.46" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18,250,000 samples, 0.01%)</title><rect x="13.0" y="725" width="0.2" height="15.0" fill="rgb(220,29,53)" rx="2" ry="2" />
<text  x="16.05" y="735.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (29,250,000 samples, 0.02%)</title><rect x="13.0" y="1269" width="0.2" height="15.0" fill="rgb(238,0,18)" rx="2" ry="2" />
<text  x="15.99" y="1279.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1717" width="0.1" height="15.0" fill="rgb(236,76,32)" rx="2" ry="2" />
<text  x="17.30" y="1727.5" ></text>
</g>
<g >
<title>cpuidle_enter (108,590,000,000 samples, 79.69%)</title><rect x="111.6" y="1941" width="940.3" height="15.0" fill="rgb(235,173,40)" rx="2" ry="2" />
<text  x="114.57" y="1951.5" >cpuidle_enter</text>
</g>
<g >
<title>__x64_sys_pread64 (102,250,000 samples, 0.08%)</title><rect x="46.9" y="1989" width="0.9" height="15.0" fill="rgb(230,88,44)" rx="2" ry="2" />
<text  x="49.93" y="1999.5" ></text>
</g>
<g >
<title>pqResultAlloc (15,250,000 samples, 0.01%)</title><rect x="64.8" y="2021" width="0.1" height="15.0" fill="rgb(225,124,5)" rx="2" ry="2" />
<text  x="67.75" y="2031.5" ></text>
</g>
<g >
<title>__x64_sys_sendto (248,500,000 samples, 0.18%)</title><rect x="47.9" y="1989" width="2.2" height="15.0" fill="rgb(235,68,47)" rx="2" ry="2" />
<text  x="50.93" y="1999.5" ></text>
</g>
<g >
<title>[libc.so.6] (29,250,000 samples, 0.02%)</title><rect x="62.1" y="2021" width="0.3" height="15.0" fill="rgb(220,24,29)" rx="2" ry="2" />
<text  x="65.11" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (22,000,000 samples, 0.02%)</title><rect x="13.0" y="901" width="0.2" height="15.0" fill="rgb(229,183,40)" rx="2" ry="2" />
<text  x="16.02" y="911.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1669" width="0.1" height="15.0" fill="rgb(242,59,53)" rx="2" ry="2" />
<text  x="17.30" y="1679.5" ></text>
</g>
<g >
<title>node::InternalMakeCallback (29,250,000 samples, 0.02%)</title><rect x="12.1" y="1829" width="0.3" height="15.0" fill="rgb(205,12,49)" rx="2" ry="2" />
<text  x="15.15" y="1839.5" ></text>
</g>
<g >
<title>MemoryContextReset (45,000,000 samples, 0.03%)</title><rect x="42.2" y="2005" width="0.4" height="15.0" fill="rgb(237,46,40)" rx="2" ry="2" />
<text  x="45.20" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1381" width="0.1" height="15.0" fill="rgb(218,64,47)" rx="2" ry="2" />
<text  x="17.30" y="1391.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::Close (62,000,000 samples, 0.05%)</title><rect x="11.4" y="1845" width="0.6" height="15.0" fill="rgb(251,131,33)" rx="2" ry="2" />
<text  x="14.44" y="1855.5" ></text>
</g>
<g >
<title>pmd_page_vaddr (15,500,000 samples, 0.01%)</title><rect x="56.0" y="1925" width="0.1" height="15.0" fill="rgb(236,92,46)" rx="2" ry="2" />
<text  x="58.97" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1077" width="0.1" height="15.0" fill="rgb(246,127,17)" rx="2" ry="2" />
<text  x="17.30" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,500,000 samples, 0.02%)</title><rect x="13.0" y="1077" width="0.2" height="15.0" fill="rgb(241,147,6)" rx="2" ry="2" />
<text  x="16.01" y="1087.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1973" width="0.1" height="15.0" fill="rgb(208,110,16)" rx="2" ry="2" />
<text  x="17.30" y="1983.5" ></text>
</g>
<g >
<title>InotifyBackend::handleEvents (59,750,000 samples, 0.04%)</title><rect x="12.9" y="1989" width="0.5" height="15.0" fill="rgb(251,76,30)" rx="2" ry="2" />
<text  x="15.90" y="1999.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (16,000,000 samples, 0.01%)</title><rect x="12.2" y="1781" width="0.1" height="15.0" fill="rgb(225,78,53)" rx="2" ry="2" />
<text  x="15.15" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="117" width="0.1" height="15.0" fill="rgb(213,111,1)" rx="2" ry="2" />
<text  x="17.30" y="127.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (30,250,000 samples, 0.02%)</title><rect x="13.0" y="1317" width="0.2" height="15.0" fill="rgb(218,60,26)" rx="2" ry="2" />
<text  x="15.99" y="1327.5" ></text>
</g>
<g >
<title>__schedule (16,000,000 samples, 0.01%)</title><rect x="1189.8" y="1893" width="0.2" height="15.0" fill="rgb(219,171,40)" rx="2" ry="2" />
<text  x="1192.81" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (41,000,000 samples, 0.03%)</title><rect x="13.0" y="1701" width="0.3" height="15.0" fill="rgb(216,19,52)" rx="2" ry="2" />
<text  x="15.95" y="1711.5" ></text>
</g>
<g >
<title>__snprintf_chk (21,250,000 samples, 0.02%)</title><rect x="36.7" y="2021" width="0.2" height="15.0" fill="rgb(206,180,30)" rx="2" ry="2" />
<text  x="39.70" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,250,000 samples, 0.02%)</title><rect x="13.0" y="1365" width="0.3" height="15.0" fill="rgb(220,138,22)" rx="2" ry="2" />
<text  x="15.98" y="1375.5" ></text>
</g>
<g >
<title>main (75,250,000 samples, 0.06%)</title><rect x="14.4" y="2021" width="0.7" height="15.0" fill="rgb(243,191,38)" rx="2" ry="2" />
<text  x="17.42" y="2031.5" ></text>
</g>
<g >
<title>non-virtual thunk to v8::internal::CancelableTask::Run (19,750,000 samples, 0.01%)</title><rect x="11.0" y="2005" width="0.2" height="15.0" fill="rgb(221,37,12)" rx="2" ry="2" />
<text  x="14.00" y="2015.5" ></text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (14,500,000 samples, 0.01%)</title><rect x="55.6" y="1909" width="0.1" height="15.0" fill="rgb(250,225,16)" rx="2" ry="2" />
<text  x="58.60" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1605" width="0.1" height="15.0" fill="rgb(244,82,44)" rx="2" ry="2" />
<text  x="17.30" y="1615.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (28,000,000 samples, 0.02%)</title><rect x="13.0" y="1189" width="0.2" height="15.0" fill="rgb(214,221,21)" rx="2" ry="2" />
<text  x="16.00" y="1199.5" ></text>
</g>
<g >
<title>pagecache_get_page (21,250,000 samples, 0.02%)</title><rect x="14.7" y="1717" width="0.2" height="15.0" fill="rgb(220,184,9)" rx="2" ry="2" />
<text  x="17.68" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="2021" width="0.1" height="15.0" fill="rgb(240,165,51)" rx="2" ry="2" />
<text  x="17.30" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41,250,000 samples, 0.03%)</title><rect x="12.9" y="1717" width="0.4" height="15.0" fill="rgb(238,30,29)" rx="2" ry="2" />
<text  x="15.95" y="1727.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="565" width="0.1" height="15.0" fill="rgb(217,79,30)" rx="2" ry="2" />
<text  x="17.30" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="2037" width="0.1" height="15.0" fill="rgb(233,11,2)" rx="2" ry="2" />
<text  x="17.30" y="2047.5" ></text>
</g>
<g >
<title>enlargeStringInfo (14,500,000 samples, 0.01%)</title><rect x="50.2" y="2037" width="0.1" height="15.0" fill="rgb(245,102,46)" rx="2" ry="2" />
<text  x="53.17" y="2047.5" ></text>
</g>
<g >
<title>acpi_idle_enter (108,588,000,000 samples, 79.69%)</title><rect x="111.6" y="1909" width="940.3" height="15.0" fill="rgb(211,161,40)" rx="2" ry="2" />
<text  x="114.59" y="1919.5" >acpi_idle_enter</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,750,000 samples, 0.02%)</title><rect x="13.0" y="1093" width="0.2" height="15.0" fill="rgb(244,112,8)" rx="2" ry="2" />
<text  x="16.01" y="1103.5" ></text>
</g>
<g >
<title>lru_cache_add (12,500,000 samples, 0.01%)</title><rect x="55.6" y="1893" width="0.1" height="15.0" fill="rgb(237,144,45)" rx="2" ry="2" />
<text  x="58.62" y="1903.5" ></text>
</g>
<g >
<title>__filemap_add_folio (11,750,000 samples, 0.01%)</title><rect x="14.7" y="1669" width="0.1" height="15.0" fill="rgb(212,79,25)" rx="2" ry="2" />
<text  x="17.70" y="1679.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="13.1" y="501" width="0.1" height="15.0" fill="rgb(233,90,53)" rx="2" ry="2" />
<text  x="16.06" y="511.5" ></text>
</g>
<g >
<title>dup_mm (12,500,000 samples, 0.01%)</title><rect x="13.7" y="1925" width="0.1" height="15.0" fill="rgb(233,194,14)" rx="2" ry="2" />
<text  x="16.72" y="1935.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (15,500,000 samples, 0.01%)</title><rect x="1189.8" y="1877" width="0.2" height="15.0" fill="rgb(235,84,44)" rx="2" ry="2" />
<text  x="1192.82" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42,750,000 samples, 0.03%)</title><rect x="12.9" y="1781" width="0.4" height="15.0" fill="rgb(212,47,0)" rx="2" ry="2" />
<text  x="15.94" y="1791.5" ></text>
</g>
<g >
<title>[libc.so.6] (75,250,000 samples, 0.06%)</title><rect x="14.4" y="2037" width="0.7" height="15.0" fill="rgb(239,138,18)" rx="2" ry="2" />
<text  x="17.42" y="2047.5" ></text>
</g>
<g >
<title>node::(anonymous namespace)::CompressionStream&lt;node::(anonymous namespace)::ZlibContext&gt;::AfterThreadPoolWork (68,000,000 samples, 0.05%)</title><rect x="11.4" y="1893" width="0.6" height="15.0" fill="rgb(247,171,8)" rx="2" ry="2" />
<text  x="14.44" y="1903.5" ></text>
</g>
<g >
<title>copy_process (12,750,000 samples, 0.01%)</title><rect x="13.7" y="1941" width="0.1" height="15.0" fill="rgb(250,39,35)" rx="2" ry="2" />
<text  x="16.71" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="853" width="0.1" height="15.0" fill="rgb(207,144,52)" rx="2" ry="2" />
<text  x="17.30" y="863.5" ></text>
</g>
<g >
<title>perf_mmap__push (69,000,000 samples, 0.05%)</title><rect x="14.5" y="1941" width="0.6" height="15.0" fill="rgb(220,49,6)" rx="2" ry="2" />
<text  x="17.46" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1733" width="0.1" height="15.0" fill="rgb(212,0,30)" rx="2" ry="2" />
<text  x="17.30" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1781" width="0.1" height="15.0" fill="rgb(233,57,10)" rx="2" ry="2" />
<text  x="17.30" y="1791.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (67,750,000 samples, 0.05%)</title><rect x="11.4" y="1877" width="0.6" height="15.0" fill="rgb(220,152,31)" rx="2" ry="2" />
<text  x="14.44" y="1887.5" ></text>
</g>
<g >
<title>finish_task_switch.isra.0 (24,000,000 samples, 0.02%)</title><rect x="67.0" y="1877" width="0.2" height="15.0" fill="rgb(207,156,49)" rx="2" ry="2" />
<text  x="70.02" y="1887.5" ></text>
</g>
<g >
<title>[perf-2123.map] (43,750,000 samples, 0.03%)</title><rect x="11.6" y="1621" width="0.4" height="15.0" fill="rgb(224,98,6)" rx="2" ry="2" />
<text  x="14.60" y="1631.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (196,000,000 samples, 0.14%)</title><rect x="62.7" y="2005" width="1.7" height="15.0" fill="rgb(210,107,31)" rx="2" ry="2" />
<text  x="65.72" y="2015.5" ></text>
</g>
<g >
<title>__do_sys_clone (12,750,000 samples, 0.01%)</title><rect x="13.7" y="1973" width="0.1" height="15.0" fill="rgb(228,175,39)" rx="2" ry="2" />
<text  x="16.71" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (26,250,000 samples, 0.02%)</title><rect x="13.0" y="1045" width="0.2" height="15.0" fill="rgb(208,0,25)" rx="2" ry="2" />
<text  x="16.01" y="1055.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="501" width="0.1" height="15.0" fill="rgb(215,91,21)" rx="2" ry="2" />
<text  x="17.30" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42,750,000 samples, 0.03%)</title><rect x="12.9" y="1797" width="0.4" height="15.0" fill="rgb(227,67,19)" rx="2" ry="2" />
<text  x="15.94" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1173" width="0.1" height="15.0" fill="rgb(232,196,41)" rx="2" ry="2" />
<text  x="17.30" y="1183.5" ></text>
</g>
<g >
<title>simple_copy_to_iter (51,250,000 samples, 0.04%)</title><rect x="66.2" y="1845" width="0.5" height="15.0" fill="rgb(231,132,35)" rx="2" ry="2" />
<text  x="69.23" y="1855.5" ></text>
</g>
<g >
<title>node::InternalCallbackScope::Close (16,500,000 samples, 0.01%)</title><rect x="12.1" y="1813" width="0.2" height="15.0" fill="rgb(225,217,16)" rx="2" ry="2" />
<text  x="15.15" y="1823.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (108,591,500,000 samples, 79.69%)</title><rect x="111.6" y="1973" width="940.3" height="15.0" fill="rgb(224,131,16)" rx="2" ry="2" />
<text  x="114.57" y="1983.5" >cpuidle_idle_call</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="341" width="0.1" height="15.0" fill="rgb(215,194,24)" rx="2" ry="2" />
<text  x="17.30" y="351.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;Backend::run (65,750,000 samples, 0.05%)</title><rect x="12.9" y="2021" width="0.6" height="15.0" fill="rgb(237,93,46)" rx="2" ry="2" />
<text  x="15.90" y="2031.5" ></text>
</g>
<g >
<title>handle_pte_fault (14,000,000 samples, 0.01%)</title><rect x="64.6" y="1925" width="0.1" height="15.0" fill="rgb(245,85,51)" rx="2" ry="2" />
<text  x="67.60" y="1935.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (11,750,000 samples, 0.01%)</title><rect x="12.3" y="1765" width="0.1" height="15.0" fill="rgb(229,164,49)" rx="2" ry="2" />
<text  x="15.29" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (33,000,000 samples, 0.02%)</title><rect x="13.0" y="1429" width="0.3" height="15.0" fill="rgb(219,78,30)" rx="2" ry="2" />
<text  x="15.98" y="1439.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1029" width="0.1" height="15.0" fill="rgb(205,15,39)" rx="2" ry="2" />
<text  x="17.30" y="1039.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (59,500,000 samples, 0.04%)</title><rect x="66.8" y="2021" width="0.6" height="15.0" fill="rgb(247,33,13)" rx="2" ry="2" />
<text  x="69.85" y="2031.5" ></text>
</g>
<g >
<title>printTableAddCell (19,000,000 samples, 0.01%)</title><rect x="65.5" y="2021" width="0.2" height="15.0" fill="rgb(244,207,15)" rx="2" ry="2" />
<text  x="68.50" y="2031.5" ></text>
</g>
<g >
<title>[unknown] (12,000,000 samples, 0.01%)</title><rect x="52.3" y="2037" width="0.1" height="15.0" fill="rgb(244,102,34)" rx="2" ry="2" />
<text  x="55.27" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1493" width="0.1" height="15.0" fill="rgb(242,154,22)" rx="2" ry="2" />
<text  x="17.30" y="1503.5" ></text>
</g>
<g >
<title>PQdsplen (15,250,000 samples, 0.01%)</title><rect x="52.5" y="2037" width="0.1" height="15.0" fill="rgb(229,19,44)" rx="2" ry="2" />
<text  x="55.45" y="2047.5" ></text>
</g>
<g >
<title>skb_copy_datagram_iter (53,500,000 samples, 0.04%)</title><rect x="66.2" y="1877" width="0.5" height="15.0" fill="rgb(238,152,33)" rx="2" ry="2" />
<text  x="69.21" y="1887.5" ></text>
</g>
<g >
<title>[perf-2123.map] (37,000,000 samples, 0.03%)</title><rect x="11.7" y="1461" width="0.3" height="15.0" fill="rgb(251,53,36)" rx="2" ry="2" />
<text  x="14.66" y="1471.5" ></text>
</g>
<g >
<title>__x64_sys_recvfrom (115,250,000 samples, 0.08%)</title><rect x="65.7" y="1973" width="1.0" height="15.0" fill="rgb(244,126,2)" rx="2" ry="2" />
<text  x="68.68" y="1983.5" ></text>
</g>
<g >
<title>[perf-2123.map] (32,000,000 samples, 0.02%)</title><rect x="11.7" y="1429" width="0.3" height="15.0" fill="rgb(250,148,47)" rx="2" ry="2" />
<text  x="14.70" y="1439.5" ></text>
</g>
<g >
<title>native_safe_halt (108,587,500,000 samples, 79.69%)</title><rect x="111.6" y="1893" width="940.3" height="15.0" fill="rgb(220,9,21)" rx="2" ry="2" />
<text  x="114.60" y="1903.5" >native_safe_halt</text>
</g>
<g >
<title>[perf-2123.map] (44,000,000 samples, 0.03%)</title><rect x="11.6" y="1637" width="0.4" height="15.0" fill="rgb(215,120,43)" rx="2" ry="2" />
<text  x="14.60" y="1647.5" ></text>
</g>
<g >
<title>heap_getnextslot (14,000,000 samples, 0.01%)</title><rect x="50.5" y="2037" width="0.1" height="15.0" fill="rgb(252,105,9)" rx="2" ry="2" />
<text  x="53.49" y="2047.5" ></text>
</g>
<g >
<title>v8::internal::compiler::PipelineImpl::OptimizeGraph (17,500,000 samples, 0.01%)</title><rect x="11.0" y="1941" width="0.2" height="15.0" fill="rgb(234,81,24)" rx="2" ry="2" />
<text  x="14.02" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1413" width="0.1" height="15.0" fill="rgb(240,47,41)" rx="2" ry="2" />
<text  x="17.30" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="725" width="0.1" height="15.0" fill="rgb(247,135,30)" rx="2" ry="2" />
<text  x="17.30" y="735.5" ></text>
</g>
<g >
<title>swapper (124,533,250,000 samples, 91.39%)</title><rect x="111.5" y="2053" width="1078.5" height="15.0" fill="rgb(244,119,26)" rx="2" ry="2" />
<text  x="114.54" y="2063.5" >swapper</text>
</g>
<g >
<title>get_page_from_freelist (31,750,000 samples, 0.02%)</title><rect x="48.5" y="1861" width="0.2" height="15.0" fill="rgb(233,69,23)" rx="2" ry="2" />
<text  x="51.47" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (23,000,000 samples, 0.02%)</title><rect x="13.0" y="933" width="0.2" height="15.0" fill="rgb(222,145,35)" rx="2" ry="2" />
<text  x="16.02" y="943.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1461" width="0.1" height="15.0" fill="rgb(251,32,48)" rx="2" ry="2" />
<text  x="17.30" y="1471.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="485" width="0.1" height="15.0" fill="rgb(225,51,14)" rx="2" ry="2" />
<text  x="17.30" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1061" width="0.1" height="15.0" fill="rgb(248,135,48)" rx="2" ry="2" />
<text  x="17.30" y="1071.5" ></text>
</g>
<g >
<title>handle_mm_fault (132,500,000 samples, 0.10%)</title><rect x="55.0" y="1973" width="1.2" height="15.0" fill="rgb(250,164,25)" rx="2" ry="2" />
<text  x="58.01" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1573" width="0.1" height="15.0" fill="rgb(237,134,29)" rx="2" ry="2" />
<text  x="17.30" y="1583.5" ></text>
</g>
<g >
<title>cpuUsage.sh (53,500,000 samples, 0.04%)</title><rect x="10.4" y="2053" width="0.4" height="15.0" fill="rgb(218,109,2)" rx="2" ry="2" />
<text  x="13.36" y="2063.5" ></text>
</g>
<g >
<title>alloc_skb_with_frags (80,000,000 samples, 0.06%)</title><rect x="48.1" y="1909" width="0.7" height="15.0" fill="rgb(232,175,49)" rx="2" ry="2" />
<text  x="51.11" y="1919.5" ></text>
</g>
<g >
<title>[perf-2123.map] (12,250,000 samples, 0.01%)</title><rect x="11.9" y="1317" width="0.1" height="15.0" fill="rgb(217,189,38)" rx="2" ry="2" />
<text  x="14.87" y="1327.5" ></text>
</g>
<g >
<title>[libc.so.6] (81,750,000 samples, 0.06%)</title><rect x="16.4" y="2037" width="0.7" height="15.0" fill="rgb(244,15,21)" rx="2" ry="2" />
<text  x="19.43" y="2047.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (15,880,750,000 samples, 11.65%)</title><rect x="1052.3" y="1909" width="137.5" height="15.0" fill="rgb(227,97,49)" rx="2" ry="2" />
<text  x="1055.28" y="1919.5" >cpuidle_idle_call</text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,500,000 samples, 0.01%)</title><rect x="13.1" y="597" width="0.1" height="15.0" fill="rgb(220,82,8)" rx="2" ry="2" />
<text  x="16.06" y="607.5" ></text>
</g>
<g >
<title>[perf-2123.map] (13,500,000 samples, 0.01%)</title><rect x="11.9" y="1333" width="0.1" height="15.0" fill="rgb(211,222,38)" rx="2" ry="2" />
<text  x="14.86" y="1343.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1397" width="0.1" height="15.0" fill="rgb(250,221,40)" rx="2" ry="2" />
<text  x="17.30" y="1407.5" ></text>
</g>
<g >
<title>__x64_sys_clone (12,750,000 samples, 0.01%)</title><rect x="13.7" y="1989" width="0.1" height="15.0" fill="rgb(217,183,20)" rx="2" ry="2" />
<text  x="16.71" y="1999.5" ></text>
</g>
<g >
<title>unmap_single_vma (22,000,000 samples, 0.02%)</title><rect x="64.0" y="1893" width="0.2" height="15.0" fill="rgb(247,99,11)" rx="2" ry="2" />
<text  x="67.01" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1221" width="0.1" height="15.0" fill="rgb(235,69,11)" rx="2" ry="2" />
<text  x="17.30" y="1231.5" ></text>
</g>
<g >
<title>standard_ExecutorRun (19,250,000 samples, 0.01%)</title><rect x="45.1" y="2021" width="0.2" height="15.0" fill="rgb(245,33,0)" rx="2" ry="2" />
<text  x="48.12" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="197" width="0.1" height="15.0" fill="rgb(238,107,30)" rx="2" ry="2" />
<text  x="17.30" y="207.5" ></text>
</g>
<g >
<title>__handle_mm_fault (25,250,000 samples, 0.02%)</title><rect x="105.0" y="1957" width="0.2" height="15.0" fill="rgb(214,8,2)" rx="2" ry="2" />
<text  x="107.96" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="101" width="0.1" height="15.0" fill="rgb(246,112,1)" rx="2" ry="2" />
<text  x="17.30" y="111.5" ></text>
</g>
<g >
<title>PQmblen (27,000,000 samples, 0.02%)</title><rect x="52.6" y="2037" width="0.2" height="15.0" fill="rgb(254,51,34)" rx="2" ry="2" />
<text  x="55.59" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (45,250,000 samples, 0.03%)</title><rect x="12.9" y="1877" width="0.4" height="15.0" fill="rgb(220,75,37)" rx="2" ry="2" />
<text  x="15.93" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1893" width="0.1" height="15.0" fill="rgb(213,170,15)" rx="2" ry="2" />
<text  x="17.30" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18,500,000 samples, 0.01%)</title><rect x="13.0" y="757" width="0.2" height="15.0" fill="rgb(225,9,2)" rx="2" ry="2" />
<text  x="16.04" y="767.5" ></text>
</g>
<g >
<title>write (68,250,000 samples, 0.05%)</title><rect x="14.5" y="1909" width="0.6" height="15.0" fill="rgb(252,151,0)" rx="2" ry="2" />
<text  x="17.47" y="1919.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore (142,250,000 samples, 0.10%)</title><rect x="48.8" y="1877" width="1.3" height="15.0" fill="rgb(253,12,10)" rx="2" ry="2" />
<text  x="51.83" y="1887.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (30,000,000 samples, 0.02%)</title><rect x="13.0" y="1301" width="0.2" height="15.0" fill="rgb(212,93,15)" rx="2" ry="2" />
<text  x="15.99" y="1311.5" ></text>
</g>
<g >
<title>unix_stream_recvmsg (113,000,000 samples, 0.08%)</title><rect x="65.7" y="1925" width="1.0" height="15.0" fill="rgb(252,57,5)" rx="2" ry="2" />
<text  x="68.70" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="661" width="0.1" height="15.0" fill="rgb(239,167,38)" rx="2" ry="2" />
<text  x="17.30" y="671.5" ></text>
</g>
<g >
<title>std::__detail::__regex_algo_impl&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, char, std::regex_traits&lt;char&gt;,  (47,250,000 samples, 0.03%)</title><rect x="12.9" y="1909" width="0.4" height="15.0" fill="rgb(242,23,47)" rx="2" ry="2" />
<text  x="15.91" y="1919.5" ></text>
</g>
<g >
<title>do_sys_poll (52,500,000 samples, 0.04%)</title><rect x="66.9" y="1973" width="0.4" height="15.0" fill="rgb(242,68,24)" rx="2" ry="2" />
<text  x="69.87" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (46,000,000 samples, 0.03%)</title><rect x="12.9" y="1893" width="0.4" height="15.0" fill="rgb(217,56,17)" rx="2" ry="2" />
<text  x="15.92" y="1903.5" ></text>
</g>
<g >
<title>tlb_batch_pages_flush (38,000,000 samples, 0.03%)</title><rect x="63.7" y="1893" width="0.3" height="15.0" fill="rgb(216,71,31)" rx="2" ry="2" />
<text  x="66.66" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (42,500,000 samples, 0.03%)</title><rect x="12.9" y="1749" width="0.4" height="15.0" fill="rgb(233,123,10)" rx="2" ry="2" />
<text  x="15.95" y="1759.5" ></text>
</g>
<g >
<title>run_builtin (75,250,000 samples, 0.06%)</title><rect x="14.4" y="2005" width="0.7" height="15.0" fill="rgb(243,40,21)" rx="2" ry="2" />
<text  x="17.42" y="2015.5" ></text>
</g>
<g >
<title>__divmodti4 (122,250,000 samples, 0.09%)</title><rect x="35.6" y="2021" width="1.1" height="15.0" fill="rgb(246,205,22)" rx="2" ry="2" />
<text  x="38.64" y="2031.5" ></text>
</g>
<g >
<title>unmap_region (103,000,000 samples, 0.08%)</title><rect x="63.3" y="1925" width="0.9" height="15.0" fill="rgb(219,129,38)" rx="2" ry="2" />
<text  x="66.31" y="1935.5" ></text>
</g>
<g >
<title>schedule (25,750,000 samples, 0.02%)</title><rect x="67.0" y="1909" width="0.2" height="15.0" fill="rgb(246,18,42)" rx="2" ry="2" />
<text  x="70.00" y="1919.5" ></text>
</g>
<g >
<title>do_syscall_64 (59,250,000 samples, 0.04%)</title><rect x="66.8" y="2005" width="0.6" height="15.0" fill="rgb(216,31,27)" rx="2" ry="2" />
<text  x="69.85" y="2015.5" ></text>
</g>
<g >
<title>v8::internal::Execution::Call (13,000,000 samples, 0.01%)</title><rect x="11.4" y="1813" width="0.2" height="15.0" fill="rgb(226,214,19)" rx="2" ry="2" />
<text  x="14.44" y="1823.5" ></text>
</g>
<g >
<title>unix_stream_read_generic (109,000,000 samples, 0.08%)</title><rect x="65.7" y="1909" width="1.0" height="15.0" fill="rgb(253,127,16)" rx="2" ry="2" />
<text  x="68.73" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="405" width="0.1" height="15.0" fill="rgb(223,38,11)" rx="2" ry="2" />
<text  x="17.30" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="949" width="0.1" height="15.0" fill="rgb(222,228,21)" rx="2" ry="2" />
<text  x="17.30" y="959.5" ></text>
</g>
<g >
<title>perf (75,250,000 samples, 0.06%)</title><rect x="14.4" y="2053" width="0.7" height="15.0" fill="rgb(212,45,12)" rx="2" ry="2" />
<text  x="17.42" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="261" width="0.1" height="15.0" fill="rgb(215,85,6)" rx="2" ry="2" />
<text  x="17.30" y="271.5" ></text>
</g>
<g >
<title>ext4_dirty_inode (14,000,000 samples, 0.01%)</title><rect x="14.9" y="1701" width="0.1" height="15.0" fill="rgb(212,8,36)" rx="2" ry="2" />
<text  x="17.89" y="1711.5" ></text>
</g>
<g >
<title>PQgetvalue (14,250,000 samples, 0.01%)</title><rect x="62.0" y="2021" width="0.1" height="15.0" fill="rgb(212,37,38)" rx="2" ry="2" />
<text  x="64.99" y="2031.5" ></text>
</g>
<g >
<title>node::AsyncWrap::MakeCallback (29,500,000 samples, 0.02%)</title><rect x="12.1" y="1845" width="0.3" height="15.0" fill="rgb(214,15,25)" rx="2" ry="2" />
<text  x="15.15" y="1855.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (29,500,000 samples, 0.02%)</title><rect x="12.5" y="1861" width="0.3" height="15.0" fill="rgb(247,228,25)" rx="2" ry="2" />
<text  x="15.52" y="1871.5" ></text>
</g>
<g >
<title>__handle_mm_fault (14,500,000 samples, 0.01%)</title><rect x="64.6" y="1941" width="0.1" height="15.0" fill="rgb(216,121,42)" rx="2" ry="2" />
<text  x="67.60" y="1951.5" ></text>
</g>
<g >
<title>zap_pmd_range.isra.0 (16,500,000 samples, 0.01%)</title><rect x="64.1" y="1861" width="0.1" height="15.0" fill="rgb(209,189,20)" rx="2" ry="2" />
<text  x="67.06" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1813" width="0.1" height="15.0" fill="rgb(226,127,30)" rx="2" ry="2" />
<text  x="17.30" y="1823.5" ></text>
</g>
<g >
<title>handle_pte_fault (119,750,000 samples, 0.09%)</title><rect x="55.1" y="1941" width="1.0" height="15.0" fill="rgb(230,181,12)" rx="2" ry="2" />
<text  x="58.09" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1093" width="0.1" height="15.0" fill="rgb(224,135,32)" rx="2" ry="2" />
<text  x="17.30" y="1103.5" ></text>
</g>
<g >
<title>brk (208,000,000 samples, 0.15%)</title><rect x="62.6" y="2021" width="1.8" height="15.0" fill="rgb(223,178,20)" rx="2" ry="2" />
<text  x="65.61" y="2031.5" ></text>
</g>
<g >
<title>v8::internal::MicrotaskQueue::RunMicrotasks (49,000,000 samples, 0.04%)</title><rect x="11.6" y="1813" width="0.4" height="15.0" fill="rgb(222,218,1)" rx="2" ry="2" />
<text  x="14.55" y="1823.5" ></text>
</g>
<g >
<title>start_kernel (15,900,750,000 samples, 11.67%)</title><rect x="1052.3" y="1989" width="137.7" height="15.0" fill="rgb(225,112,40)" rx="2" ry="2" />
<text  x="1055.27" y="1999.5" >start_kernel</text>
</g>
<g >
<title>[libstdc++.so.6.0.30] (71,250,000 samples, 0.05%)</title><rect x="12.9" y="2037" width="0.6" height="15.0" fill="rgb(215,4,38)" rx="2" ry="2" />
<text  x="15.89" y="2047.5" ></text>
</g>
<g >
<title>pq_sendcountedtext (29,500,000 samples, 0.02%)</title><rect x="34.4" y="2005" width="0.3" height="15.0" fill="rgb(239,76,10)" rx="2" ry="2" />
<text  x="37.44" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="757" width="0.1" height="15.0" fill="rgb(254,153,30)" rx="2" ry="2" />
<text  x="17.30" y="767.5" ></text>
</g>
<g >
<title>acpi_idle_enter (15,879,000,000 samples, 11.65%)</title><rect x="1052.3" y="1845" width="137.5" height="15.0" fill="rgb(226,26,19)" rx="2" ry="2" />
<text  x="1055.30" y="1855.5" >acpi_idle_enter</text>
</g>
<g >
<title>heapgetpage (31,750,000 samples, 0.02%)</title><rect x="50.6" y="2037" width="0.3" height="15.0" fill="rgb(245,3,18)" rx="2" ry="2" />
<text  x="53.61" y="2047.5" ></text>
</g>
<g >
<title>do_syscall_64 (107,750,000 samples, 0.08%)</title><rect x="46.9" y="2005" width="1.0" height="15.0" fill="rgb(245,165,4)" rx="2" ry="2" />
<text  x="49.93" y="2015.5" ></text>
</g>
<g >
<title>__libc_pread (111,500,000 samples, 0.08%)</title><rect x="46.9" y="2037" width="1.0" height="15.0" fill="rgb(211,213,37)" rx="2" ry="2" />
<text  x="49.90" y="2047.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (191,750,000 samples, 0.14%)</title><rect x="54.5" y="2021" width="1.7" height="15.0" fill="rgb(245,50,25)" rx="2" ry="2" />
<text  x="57.52" y="2031.5" ></text>
</g>
<g >
<title>recv (118,500,000 samples, 0.09%)</title><rect x="65.7" y="2021" width="1.0" height="15.0" fill="rgb(240,52,45)" rx="2" ry="2" />
<text  x="68.67" y="2031.5" ></text>
</g>
<g >
<title>vfs_write (67,750,000 samples, 0.05%)</title><rect x="14.5" y="1829" width="0.6" height="15.0" fill="rgb(254,88,29)" rx="2" ry="2" />
<text  x="17.47" y="1839.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1877" width="0.1" height="15.0" fill="rgb(214,138,16)" rx="2" ry="2" />
<text  x="17.30" y="1887.5" ></text>
</g>
<g >
<title>exc_page_fault (191,750,000 samples, 0.14%)</title><rect x="54.5" y="2005" width="1.7" height="15.0" fill="rgb(243,223,41)" rx="2" ry="2" />
<text  x="57.52" y="2015.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (27,500,000 samples, 0.02%)</title><rect x="67.0" y="1941" width="0.2" height="15.0" fill="rgb(206,196,27)" rx="2" ry="2" />
<text  x="69.99" y="1951.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (30,500,000 samples, 0.02%)</title><rect x="13.0" y="1349" width="0.2" height="15.0" fill="rgb(240,43,6)" rx="2" ry="2" />
<text  x="15.98" y="1359.5" ></text>
</g>
<g >
<title>uv_run (181,500,000 samples, 0.13%)</title><rect x="11.2" y="1973" width="1.6" height="15.0" fill="rgb(219,72,21)" rx="2" ry="2" />
<text  x="14.21" y="1983.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::InvokeWithTryCatch (49,000,000 samples, 0.04%)</title><rect x="11.6" y="1781" width="0.4" height="15.0" fill="rgb(230,117,42)" rx="2" ry="2" />
<text  x="14.55" y="1791.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1957" width="0.1" height="15.0" fill="rgb(212,10,12)" rx="2" ry="2" />
<text  x="17.30" y="1967.5" ></text>
</g>
<g >
<title>v8::internal::OptimizedCompilationJob::ExecuteJob (18,500,000 samples, 0.01%)</title><rect x="11.0" y="1973" width="0.2" height="15.0" fill="rgb(210,193,50)" rx="2" ry="2" />
<text  x="14.02" y="1983.5" ></text>
</g>
<g >
<title>print_aligned_text (337,750,000 samples, 0.25%)</title><rect x="105.2" y="2037" width="2.9" height="15.0" fill="rgb(235,197,35)" rx="2" ry="2" />
<text  x="108.20" y="2047.5" ></text>
</g>
<g >
<title>pg_server_to_client (20,000,000 samples, 0.01%)</title><rect x="34.2" y="2005" width="0.1" height="15.0" fill="rgb(240,98,52)" rx="2" ry="2" />
<text  x="37.18" y="2015.5" ></text>
</g>
<g >
<title>node::EmitToJSStreamListener::OnStreamRead (30,000,000 samples, 0.02%)</title><rect x="12.1" y="1877" width="0.3" height="15.0" fill="rgb(218,73,36)" rx="2" ry="2" />
<text  x="15.14" y="1887.5" ></text>
</g>
<g >
<title>uv__async_io.part.1 (87,000,000 samples, 0.06%)</title><rect x="11.3" y="1941" width="0.8" height="15.0" fill="rgb(206,131,44)" rx="2" ry="2" />
<text  x="14.31" y="1951.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (252,500,000 samples, 0.19%)</title><rect x="47.9" y="2021" width="2.2" height="15.0" fill="rgb(229,168,8)" rx="2" ry="2" />
<text  x="50.90" y="2031.5" ></text>
</g>
<g >
<title>free_compound_page (13,250,000 samples, 0.01%)</title><rect x="65.9" y="1845" width="0.1" height="15.0" fill="rgb(207,149,33)" rx="2" ry="2" />
<text  x="68.86" y="1855.5" ></text>
</g>
<g >
<title>printtup_startup (438,750,000 samples, 0.32%)</title><rect x="41.3" y="2021" width="3.8" height="15.0" fill="rgb(238,163,26)" rx="2" ry="2" />
<text  x="44.31" y="2031.5" ></text>
</g>
<g >
<title>__alloc_skb (18,000,000 samples, 0.01%)</title><rect x="48.2" y="1893" width="0.1" height="15.0" fill="rgb(218,72,6)" rx="2" ry="2" />
<text  x="51.15" y="1903.5" ></text>
</g>
<g >
<title>__handle_mm_fault (125,750,000 samples, 0.09%)</title><rect x="55.0" y="1957" width="1.1" height="15.0" fill="rgb(227,200,28)" rx="2" ry="2" />
<text  x="58.04" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (31,500,000 samples, 0.02%)</title><rect x="13.0" y="1413" width="0.3" height="15.0" fill="rgb(238,183,6)" rx="2" ry="2" />
<text  x="15.98" y="1423.5" ></text>
</g>
<g >
<title>[perf-2123.map] (39,000,000 samples, 0.03%)</title><rect x="11.6" y="1477" width="0.4" height="15.0" fill="rgb(227,98,9)" rx="2" ry="2" />
<text  x="14.64" y="1487.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="677" width="0.1" height="15.0" fill="rgb(217,89,33)" rx="2" ry="2" />
<text  x="17.30" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1845" width="0.1" height="15.0" fill="rgb(230,155,27)" rx="2" ry="2" />
<text  x="17.30" y="1855.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="325" width="0.1" height="15.0" fill="rgb(219,5,18)" rx="2" ry="2" />
<text  x="17.30" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="389" width="0.1" height="15.0" fill="rgb(223,103,43)" rx="2" ry="2" />
<text  x="17.30" y="399.5" ></text>
</g>
<g >
<title>new_sync_read (97,000,000 samples, 0.07%)</title><rect x="47.0" y="1957" width="0.8" height="15.0" fill="rgb(253,217,2)" rx="2" ry="2" />
<text  x="49.96" y="1967.5" ></text>
</g>
<g >
<title>[unknown] (100,250,000 samples, 0.07%)</title><rect x="33.9" y="2021" width="0.8" height="15.0" fill="rgb(251,185,1)" rx="2" ry="2" />
<text  x="36.88" y="2031.5" ></text>
</g>
<g >
<title>[psql] (17,750,000 samples, 0.01%)</title><rect x="62.4" y="2021" width="0.2" height="15.0" fill="rgb(236,190,51)" rx="2" ry="2" />
<text  x="65.45" y="2031.5" ></text>
</g>
<g >
<title>node::Start (182,000,000 samples, 0.13%)</title><rect x="11.2" y="2021" width="1.6" height="15.0" fill="rgb(231,24,17)" rx="2" ry="2" />
<text  x="14.20" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="245" width="0.1" height="15.0" fill="rgb(209,90,34)" rx="2" ry="2" />
<text  x="17.30" y="255.5" ></text>
</g>
<g >
<title>Glob::isIgnored (47,250,000 samples, 0.03%)</title><rect x="12.9" y="1925" width="0.4" height="15.0" fill="rgb(247,133,40)" rx="2" ry="2" />
<text  x="15.91" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27,000,000 samples, 0.02%)</title><rect x="13.0" y="1141" width="0.2" height="15.0" fill="rgb(247,39,29)" rx="2" ry="2" />
<text  x="16.00" y="1151.5" ></text>
</g>
<g >
<title>[libc.so.6] (228,000,000 samples, 0.17%)</title><rect x="10.9" y="2037" width="2.0" height="15.0" fill="rgb(224,36,37)" rx="2" ry="2" />
<text  x="13.91" y="2047.5" ></text>
</g>
<g >
<title>free_pgtables (12,750,000 samples, 0.01%)</title><rect x="63.3" y="1909" width="0.1" height="15.0" fill="rgb(238,196,27)" rx="2" ry="2" />
<text  x="66.32" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1541" width="0.1" height="15.0" fill="rgb(228,67,12)" rx="2" ry="2" />
<text  x="17.30" y="1551.5" ></text>
</g>
<g >
<title>[perf-2123.map] (26,250,000 samples, 0.02%)</title><rect x="11.7" y="1413" width="0.3" height="15.0" fill="rgb(228,72,49)" rx="2" ry="2" />
<text  x="14.74" y="1423.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1301" width="0.1" height="15.0" fill="rgb(209,216,44)" rx="2" ry="2" />
<text  x="17.30" y="1311.5" ></text>
</g>
<g >
<title>generic_write_end (17,250,000 samples, 0.01%)</title><rect x="14.9" y="1733" width="0.1" height="15.0" fill="rgb(233,73,35)" rx="2" ry="2" />
<text  x="17.87" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1701" width="0.1" height="15.0" fill="rgb(223,4,6)" rx="2" ry="2" />
<text  x="17.30" y="1711.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="965" width="0.1" height="15.0" fill="rgb(210,220,9)" rx="2" ry="2" />
<text  x="17.30" y="975.5" ></text>
</g>
<g >
<title>filemap_add_folio (13,250,000 samples, 0.01%)</title><rect x="14.7" y="1685" width="0.1" height="15.0" fill="rgb(217,123,12)" rx="2" ry="2" />
<text  x="17.70" y="1695.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="901" width="0.1" height="15.0" fill="rgb(247,131,51)" rx="2" ry="2" />
<text  x="17.30" y="911.5" ></text>
</g>
<g >
<title>vfs_read (100,500,000 samples, 0.07%)</title><rect x="46.9" y="1973" width="0.9" height="15.0" fill="rgb(250,19,24)" rx="2" ry="2" />
<text  x="49.95" y="1983.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1525" width="0.1" height="15.0" fill="rgb(219,105,17)" rx="2" ry="2" />
<text  x="17.30" y="1535.5" ></text>
</g>
<g >
<title>psql (6,789,000,000 samples, 4.98%)</title><rect x="52.5" y="2053" width="58.7" height="15.0" fill="rgb(216,3,23)" rx="2" ry="2" />
<text  x="55.45" y="2063.5" >psql</text>
</g>
<g >
<title>free_pages_and_swap_cache (36,500,000 samples, 0.03%)</title><rect x="63.7" y="1877" width="0.3" height="15.0" fill="rgb(221,61,36)" rx="2" ry="2" />
<text  x="66.66" y="1887.5" ></text>
</g>
<g >
<title>skb_release_data (25,250,000 samples, 0.02%)</title><rect x="65.9" y="1877" width="0.2" height="15.0" fill="rgb(232,41,17)" rx="2" ry="2" />
<text  x="68.86" y="1887.5" ></text>
</g>
<g >
<title>__do_sys_brk (182,250,000 samples, 0.13%)</title><rect x="62.7" y="1957" width="1.6" height="15.0" fill="rgb(234,46,21)" rx="2" ry="2" />
<text  x="65.72" y="1967.5" ></text>
</g>
<g >
<title>v8::internal::(anonymous namespace)::Invoke (16,000,000 samples, 0.01%)</title><rect x="12.2" y="1765" width="0.1" height="15.0" fill="rgb(240,46,12)" rx="2" ry="2" />
<text  x="15.15" y="1775.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1189" width="0.1" height="15.0" fill="rgb(209,104,52)" rx="2" ry="2" />
<text  x="17.30" y="1199.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (25,500,000 samples, 0.02%)</title><rect x="13.0" y="1029" width="0.2" height="15.0" fill="rgb(207,74,38)" rx="2" ry="2" />
<text  x="16.01" y="1039.5" ></text>
</g>
<g >
<title>[perf-2123.map] (43,750,000 samples, 0.03%)</title><rect x="11.6" y="1605" width="0.4" height="15.0" fill="rgb(235,61,4)" rx="2" ry="2" />
<text  x="14.60" y="1615.5" ></text>
</g>
<g >
<title>[perf-2123.map] (43,500,000 samples, 0.03%)</title><rect x="11.6" y="1573" width="0.4" height="15.0" fill="rgb(242,5,21)" rx="2" ry="2" />
<text  x="14.60" y="1583.5" ></text>
</g>
<g >
<title>Builtins_JSEntry (16,000,000 samples, 0.01%)</title><rect x="12.2" y="1749" width="0.1" height="15.0" fill="rgb(223,105,23)" rx="2" ry="2" />
<text  x="15.15" y="1759.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,000,000 samples, 0.02%)</title><rect x="13.0" y="917" width="0.2" height="15.0" fill="rgb(243,9,47)" rx="2" ry="2" />
<text  x="16.02" y="927.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,250,000 samples, 0.01%)</title><rect x="13.1" y="693" width="0.1" height="15.0" fill="rgb(227,62,51)" rx="2" ry="2" />
<text  x="16.05" y="703.5" ></text>
</g>
<g >
<title>[unknown] (23,750,000 samples, 0.02%)</title><rect x="13.5" y="2037" width="0.2" height="15.0" fill="rgb(220,179,27)" rx="2" ry="2" />
<text  x="16.51" y="2047.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="837" width="0.1" height="15.0" fill="rgb(249,222,19)" rx="2" ry="2" />
<text  x="17.30" y="847.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (43,250,000 samples, 0.03%)</title><rect x="12.9" y="1813" width="0.4" height="15.0" fill="rgb(249,80,33)" rx="2" ry="2" />
<text  x="15.94" y="1823.5" ></text>
</g>
<g >
<title>do_anonymous_page (18,000,000 samples, 0.01%)</title><rect x="105.0" y="1925" width="0.1" height="15.0" fill="rgb(246,45,8)" rx="2" ry="2" />
<text  x="107.98" y="1935.5" ></text>
</g>
<g >
<title>Builtins_JSRunMicrotasksEntry (48,500,000 samples, 0.04%)</title><rect x="11.6" y="1749" width="0.4" height="15.0" fill="rgb(215,60,5)" rx="2" ry="2" />
<text  x="14.56" y="1759.5" ></text>
</g>
<g >
<title>do_syscall_64 (68,250,000 samples, 0.05%)</title><rect x="14.5" y="1877" width="0.6" height="15.0" fill="rgb(233,178,35)" rx="2" ry="2" />
<text  x="17.47" y="1887.5" ></text>
</g>
<g >
<title>sock_sendmsg (246,000,000 samples, 0.18%)</title><rect x="47.9" y="1957" width="2.2" height="15.0" fill="rgb(245,16,30)" rx="2" ry="2" />
<text  x="50.94" y="1967.5" ></text>
</g>
<g >
<title>handle_pte_fault (23,750,000 samples, 0.02%)</title><rect x="105.0" y="1941" width="0.2" height="15.0" fill="rgb(227,1,3)" rx="2" ry="2" />
<text  x="107.98" y="1951.5" ></text>
</g>
<g >
<title>vma_alloc_folio (21,750,000 samples, 0.02%)</title><rect x="55.8" y="1909" width="0.2" height="15.0" fill="rgb(218,124,1)" rx="2" ry="2" />
<text  x="58.79" y="1919.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (37,250,000 samples, 0.03%)</title><rect x="13.0" y="1589" width="0.3" height="15.0" fill="rgb(225,151,23)" rx="2" ry="2" />
<text  x="15.96" y="1599.5" ></text>
</g>
<g >
<title>[unknown] (20,250,000 samples, 0.01%)</title><rect x="10.4" y="2037" width="0.2" height="15.0" fill="rgb(206,176,10)" rx="2" ry="2" />
<text  x="13.41" y="2047.5" ></text>
</g>
<g >
<title>InotifyBackend::start (61,750,000 samples, 0.05%)</title><rect x="12.9" y="2005" width="0.5" height="15.0" fill="rgb(206,2,9)" rx="2" ry="2" />
<text  x="15.90" y="2015.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1509" width="0.1" height="15.0" fill="rgb(211,17,39)" rx="2" ry="2" />
<text  x="17.30" y="1519.5" ></text>
</g>
<g >
<title>node (407,000,000 samples, 0.30%)</title><rect x="10.9" y="2053" width="3.5" height="15.0" fill="rgb(224,94,37)" rx="2" ry="2" />
<text  x="13.89" y="2063.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="885" width="0.1" height="15.0" fill="rgb(211,124,25)" rx="2" ry="2" />
<text  x="17.30" y="895.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (37,000,000 samples, 0.03%)</title><rect x="13.0" y="1573" width="0.3" height="15.0" fill="rgb(225,55,34)" rx="2" ry="2" />
<text  x="15.96" y="1583.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1157" width="0.1" height="15.0" fill="rgb(250,222,36)" rx="2" ry="2" />
<text  x="17.30" y="1167.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="981" width="0.1" height="15.0" fill="rgb(213,143,19)" rx="2" ry="2" />
<text  x="17.30" y="991.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (27,000,000 samples, 0.02%)</title><rect x="13.0" y="1125" width="0.2" height="15.0" fill="rgb(213,113,1)" rx="2" ry="2" />
<text  x="16.00" y="1135.5" ></text>
</g>
<g >
<title>__split_vma (45,500,000 samples, 0.03%)</title><rect x="62.8" y="1925" width="0.4" height="15.0" fill="rgb(223,82,7)" rx="2" ry="2" />
<text  x="65.77" y="1935.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (21,500,000 samples, 0.02%)</title><rect x="64.5" y="2005" width="0.2" height="15.0" fill="rgb(206,71,0)" rx="2" ry="2" />
<text  x="67.54" y="2015.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (27,000,000 samples, 0.02%)</title><rect x="67.0" y="1925" width="0.2" height="15.0" fill="rgb(248,196,23)" rx="2" ry="2" />
<text  x="69.99" y="1935.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (23,000,000 samples, 0.02%)</title><rect x="13.0" y="965" width="0.2" height="15.0" fill="rgb(206,197,34)" rx="2" ry="2" />
<text  x="16.02" y="975.5" ></text>
</g>
<g >
<title>unix_stream_read_actor (53,750,000 samples, 0.04%)</title><rect x="66.2" y="1893" width="0.5" height="15.0" fill="rgb(246,146,10)" rx="2" ry="2" />
<text  x="69.21" y="1903.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (26,250,000 samples, 0.02%)</title><rect x="13.0" y="1061" width="0.2" height="15.0" fill="rgb(236,174,30)" rx="2" ry="2" />
<text  x="16.01" y="1071.5" ></text>
</g>
<g >
<title>PQclear (27,000,000 samples, 0.02%)</title><rect x="61.2" y="2021" width="0.3" height="15.0" fill="rgb(251,94,53)" rx="2" ry="2" />
<text  x="64.23" y="2031.5" ></text>
</g>
<g >
<title>pq_sendcountedtext (18,500,000 samples, 0.01%)</title><rect x="44.1" y="2005" width="0.2" height="15.0" fill="rgb(246,75,45)" rx="2" ry="2" />
<text  x="47.15" y="2015.5" ></text>
</g>
<g >
<title>__put_page (13,500,000 samples, 0.01%)</title><rect x="65.9" y="1861" width="0.1" height="15.0" fill="rgb(217,10,3)" rx="2" ry="2" />
<text  x="68.86" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (13,500,000 samples, 0.01%)</title><rect x="13.1" y="533" width="0.1" height="15.0" fill="rgb(230,158,46)" rx="2" ry="2" />
<text  x="16.06" y="543.5" ></text>
</g>
<g >
<title>enlargeStringInfo (33,750,000 samples, 0.02%)</title><rect x="33.9" y="2005" width="0.3" height="15.0" fill="rgb(211,122,5)" rx="2" ry="2" />
<text  x="36.88" y="2015.5" ></text>
</g>
<g >
<title>new_sync_write (60,750,000 samples, 0.04%)</title><rect x="14.5" y="1813" width="0.6" height="15.0" fill="rgb(235,132,21)" rx="2" ry="2" />
<text  x="17.53" y="1823.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (19,750,000 samples, 0.01%)</title><rect x="13.0" y="805" width="0.2" height="15.0" fill="rgb(244,53,1)" rx="2" ry="2" />
<text  x="16.04" y="815.5" ></text>
</g>
<g >
<title>v8::Function::Call (16,250,000 samples, 0.01%)</title><rect x="12.1" y="1797" width="0.2" height="15.0" fill="rgb(208,220,21)" rx="2" ry="2" />
<text  x="15.15" y="1807.5" ></text>
</g>
<g >
<title>tlb_finish_mmu (63,250,000 samples, 0.05%)</title><rect x="63.4" y="1909" width="0.6" height="15.0" fill="rgb(221,118,39)" rx="2" ry="2" />
<text  x="66.44" y="1919.5" ></text>
</g>
<g >
<title>sock_alloc_send_pskb (81,250,000 samples, 0.06%)</title><rect x="48.1" y="1925" width="0.7" height="15.0" fill="rgb(221,126,32)" rx="2" ry="2" />
<text  x="51.11" y="1935.5" ></text>
</g>
<g >
<title>printQuery (25,500,000 samples, 0.02%)</title><rect x="65.3" y="2021" width="0.2" height="15.0" fill="rgb(209,43,30)" rx="2" ry="2" />
<text  x="68.28" y="2031.5" ></text>
</g>
<g >
<title>slot_getsomeattrs_int (17,250,000 samples, 0.01%)</title><rect x="51.5" y="2037" width="0.1" height="15.0" fill="rgb(233,114,27)" rx="2" ry="2" />
<text  x="54.46" y="2047.5" ></text>
</g>
<g >
<title>do_user_addr_fault (41,500,000 samples, 0.03%)</title><rect x="104.8" y="1989" width="0.4" height="15.0" fill="rgb(238,114,4)" rx="2" ry="2" />
<text  x="107.83" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1125" width="0.1" height="15.0" fill="rgb(242,192,37)" rx="2" ry="2" />
<text  x="17.30" y="1135.5" ></text>
</g>
<g >
<title>[libc.so.6] (1,752,750,000 samples, 1.29%)</title><rect x="18.6" y="2021" width="15.1" height="15.0" fill="rgb(225,55,36)" rx="2" ry="2" />
<text  x="21.56" y="2031.5" ></text>
</g>
<g >
<title>do_user_addr_fault (190,500,000 samples, 0.14%)</title><rect x="54.5" y="1989" width="1.7" height="15.0" fill="rgb(213,110,9)" rx="2" ry="2" />
<text  x="57.52" y="1999.5" ></text>
</g>
<g >
<title>__send (257,250,000 samples, 0.19%)</title><rect x="47.9" y="2037" width="2.2" height="15.0" fill="rgb(246,228,14)" rx="2" ry="2" />
<text  x="50.86" y="2047.5" ></text>
</g>
<g >
<title>__schedule (33,500,000 samples, 0.02%)</title><rect x="1052.0" y="1957" width="0.2" height="15.0" fill="rgb(245,160,33)" rx="2" ry="2" />
<text  x="1054.96" y="1967.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (27,500,000 samples, 0.02%)</title><rect x="13.0" y="1157" width="0.2" height="15.0" fill="rgb(218,138,23)" rx="2" ry="2" />
<text  x="16.00" y="1167.5" ></text>
</g>
<g >
<title>v8::internal::Execution::TryRunMicrotasks (49,000,000 samples, 0.04%)</title><rect x="11.6" y="1797" width="0.4" height="15.0" fill="rgb(205,151,21)" rx="2" ry="2" />
<text  x="14.55" y="1807.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (18,500,000 samples, 0.01%)</title><rect x="13.0" y="741" width="0.2" height="15.0" fill="rgb(216,193,8)" rx="2" ry="2" />
<text  x="16.04" y="751.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="709" width="0.1" height="15.0" fill="rgb(229,105,9)" rx="2" ry="2" />
<text  x="17.30" y="719.5" ></text>
</g>
<g >
<title>AllocSetAlloc (49,250,000 samples, 0.04%)</title><rect x="17.4" y="2021" width="0.4" height="15.0" fill="rgb(209,202,13)" rx="2" ry="2" />
<text  x="20.37" y="2031.5" ></text>
</g>
<g >
<title>generic_file_read_iter (96,250,000 samples, 0.07%)</title><rect x="47.0" y="1925" width="0.8" height="15.0" fill="rgb(246,205,10)" rx="2" ry="2" />
<text  x="49.96" y="1935.5" ></text>
</g>
<g >
<title>[perf-2123.map] (44,750,000 samples, 0.03%)</title><rect x="11.6" y="1685" width="0.4" height="15.0" fill="rgb(244,207,50)" rx="2" ry="2" />
<text  x="14.59" y="1695.5" ></text>
</g>
<g >
<title>pg_wcssize (1,323,000,000 samples, 0.97%)</title><rect x="91.1" y="2037" width="11.5" height="15.0" fill="rgb(208,161,17)" rx="2" ry="2" />
<text  x="94.15" y="2047.5" ></text>
</g>
<g >
<title>consume_skb (45,250,000 samples, 0.03%)</title><rect x="65.8" y="1893" width="0.4" height="15.0" fill="rgb(205,158,7)" rx="2" ry="2" />
<text  x="68.77" y="1903.5" ></text>
</g>
<g >
<title>__memcg_kmem_charge_page (13,000,000 samples, 0.01%)</title><rect x="48.3" y="1861" width="0.2" height="15.0" fill="rgb(249,62,54)" rx="2" ry="2" />
<text  x="51.35" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,500,000 samples, 0.01%)</title><rect x="13.1" y="485" width="0.1" height="15.0" fill="rgb(242,179,16)" rx="2" ry="2" />
<text  x="16.06" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (16,000,000 samples, 0.01%)</title><rect x="13.1" y="661" width="0.1" height="15.0" fill="rgb(222,147,10)" rx="2" ry="2" />
<text  x="16.05" y="671.5" ></text>
</g>
<g >
<title>__x64_sys_write (68,000,000 samples, 0.05%)</title><rect x="14.5" y="1861" width="0.6" height="15.0" fill="rgb(212,221,50)" rx="2" ry="2" />
<text  x="17.47" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="693" width="0.1" height="15.0" fill="rgb(222,90,3)" rx="2" ry="2" />
<text  x="17.30" y="703.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (42,750,000 samples, 0.03%)</title><rect x="12.9" y="1765" width="0.4" height="15.0" fill="rgb(242,31,10)" rx="2" ry="2" />
<text  x="15.94" y="1775.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (15,880,000,000 samples, 11.65%)</title><rect x="1052.3" y="1861" width="137.5" height="15.0" fill="rgb(249,21,36)" rx="2" ry="2" />
<text  x="1055.29" y="1871.5" >cpuidle_enter_state</text>
</g>
<g >
<title>Builtins_PromiseFulfillReactionJob (47,750,000 samples, 0.04%)</title><rect x="11.6" y="1717" width="0.4" height="15.0" fill="rgb(238,210,14)" rx="2" ry="2" />
<text  x="14.57" y="1727.5" ></text>
</g>
<g >
<title>[perf-2123.map] (42,000,000 samples, 0.03%)</title><rect x="11.6" y="1493" width="0.4" height="15.0" fill="rgb(228,197,28)" rx="2" ry="2" />
<text  x="14.61" y="1503.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1317" width="0.1" height="15.0" fill="rgb(215,187,10)" rx="2" ry="2" />
<text  x="17.30" y="1327.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (41,500,000 samples, 0.03%)</title><rect x="12.9" y="1733" width="0.4" height="15.0" fill="rgb(245,188,25)" rx="2" ry="2" />
<text  x="15.95" y="1743.5" ></text>
</g>
<g >
<title>do_syscall_64 (116,750,000 samples, 0.09%)</title><rect x="65.7" y="1989" width="1.0" height="15.0" fill="rgb(243,214,10)" rx="2" ry="2" />
<text  x="68.68" y="1999.5" ></text>
</g>
<g >
<title>[unknown] (631,000,000 samples, 0.46%)</title><rect x="61.2" y="2037" width="5.5" height="15.0" fill="rgb(244,207,32)" rx="2" ry="2" />
<text  x="64.23" y="2047.5" ></text>
</g>
<g >
<title>ps (26,250,000 samples, 0.02%)</title><rect x="52.2" y="2053" width="0.3" height="15.0" fill="rgb(211,86,28)" rx="2" ry="2" />
<text  x="55.23" y="2063.5" ></text>
</g>
<g >
<title>v8::Function::Call (12,500,000 samples, 0.01%)</title><rect x="12.3" y="1813" width="0.1" height="15.0" fill="rgb(214,208,1)" rx="2" ry="2" />
<text  x="15.29" y="1823.5" ></text>
</g>
<g >
<title>kernel_clone (12,750,000 samples, 0.01%)</title><rect x="13.7" y="1957" width="0.1" height="15.0" fill="rgb(220,129,47)" rx="2" ry="2" />
<text  x="16.71" y="1967.5" ></text>
</g>
<g >
<title>v8::internal::OptimizingCompileDispatcher::CompileNext (18,750,000 samples, 0.01%)</title><rect x="11.0" y="1989" width="0.2" height="15.0" fill="rgb(235,192,31)" rx="2" ry="2" />
<text  x="14.01" y="1999.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="581" width="0.1" height="15.0" fill="rgb(238,196,40)" rx="2" ry="2" />
<text  x="17.30" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1477" width="0.1" height="15.0" fill="rgb(205,201,38)" rx="2" ry="2" />
<text  x="17.30" y="1487.5" ></text>
</g>
<g >
<title>__filemap_get_folio (20,750,000 samples, 0.02%)</title><rect x="14.7" y="1701" width="0.2" height="15.0" fill="rgb(209,128,8)" rx="2" ry="2" />
<text  x="17.68" y="1711.5" ></text>
</g>
<g >
<title>Builtins_JSEntryTrampoline (16,000,000 samples, 0.01%)</title><rect x="12.2" y="1733" width="0.1" height="15.0" fill="rgb(218,163,38)" rx="2" ry="2" />
<text  x="15.15" y="1743.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,250,000 samples, 0.01%)</title><rect x="14.3" y="1861" width="0.1" height="15.0" fill="rgb(233,222,35)" rx="2" ry="2" />
<text  x="17.30" y="1871.5" ></text>
</g>
<g >
<title>__sys_sendto (248,000,000 samples, 0.18%)</title><rect x="47.9" y="1973" width="2.2" height="15.0" fill="rgb(253,109,12)" rx="2" ry="2" />
<text  x="50.93" y="1983.5" ></text>
</g>
<g >
<title>postgres (4,291,000,000 samples, 3.15%)</title><rect x="15.1" y="2053" width="37.1" height="15.0" fill="rgb(224,11,13)" rx="2" ry="2" />
<text  x="18.07" y="2063.5" >pos..</text>
</g>
<g >
<title>pg_utf_dsplen (900,000,000 samples, 0.66%)</title><rect x="75.8" y="2037" width="7.8" height="15.0" fill="rgb(210,116,34)" rx="2" ry="2" />
<text  x="78.83" y="2047.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (42,750,000 samples, 0.03%)</title><rect x="104.8" y="2021" width="0.4" height="15.0" fill="rgb(224,187,32)" rx="2" ry="2" />
<text  x="107.83" y="2031.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (12,500,000 samples, 0.01%)</title><rect x="13.1" y="469" width="0.1" height="15.0" fill="rgb(234,72,24)" rx="2" ry="2" />
<text  x="16.06" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="373" width="0.1" height="15.0" fill="rgb(219,34,2)" rx="2" ry="2" />
<text  x="17.30" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_dfs (18,750,000 samples, 0.01%)</title><rect x="13.0" y="773" width="0.2" height="15.0" fill="rgb(232,133,10)" rx="2" ry="2" />
<text  x="16.04" y="783.5" ></text>
</g>
<g >
<title>release_pages (34,250,000 samples, 0.03%)</title><rect x="63.7" y="1861" width="0.3" height="15.0" fill="rgb(216,225,16)" rx="2" ry="2" />
<text  x="66.68" y="1871.5" ></text>
</g>
<g >
<title>std::__detail::_Executor&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt;, std::allocator&lt;std::sub_match&lt;__gnu_cxx::__normal_iterator&lt;char const*, std::string&gt; &gt; &gt;, std::regex_traits&lt;char&gt;, true&gt;::_M_rep_once_more (12,250,000 samples, 0.01%)</title><rect x="14.3" y="309" width="0.1" height="15.0" fill="rgb(223,17,54)" rx="2" ry="2" />
<text  x="17.30" y="319.5" ></text>
</g>
<g >
<title>generic_perform_write (60,500,000 samples, 0.04%)</title><rect x="14.5" y="1765" width="0.6" height="15.0" fill="rgb(247,51,16)" rx="2" ry="2" />
<text  x="17.53" y="1775.5" ></text>
</g>
<g >
<title>__mem_cgroup_uncharge_list (12,250,000 samples, 0.01%)</title><rect x="63.7" y="1845" width="0.1" height="15.0" fill="rgb(251,100,54)" rx="2" ry="2" />
<text  x="66.70" y="1855.5" ></text>
</g>
<g >
<title>[perf-2123.map] (44,500,000 samples, 0.03%)</title><rect x="11.6" y="1669" width="0.4" height="15.0" fill="rgb(226,192,31)" rx="2" ry="2" />
<text  x="14.59" y="1679.5" ></text>
</g>
</g>
</svg>
